/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: ab.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

fileprivate let _protobuf_package = "otsimo.abtest"

public struct Otsimo_Abtest_ABTestGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ABTestGroup"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "app_id"),
    3: .same(proto: "weight"),
    4: .same(proto: "active"),
  ]

  public var name: String = ""

  public var appId: String = ""

  public var weight: Int32 = 0

  public var active: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &name)
      case 2: try decoder.decodeSingularStringField(value: &appId)
      case 3: try decoder.decodeSingularInt32Field(value: &weight)
      case 4: try decoder.decodeSingularBoolField(value: &active)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !name.isEmpty {
      try visitor.visitSingularStringField(value: name, fieldNumber: 1)
    }
    if !appId.isEmpty {
      try visitor.visitSingularStringField(value: appId, fieldNumber: 2)
    }
    if weight != 0 {
      try visitor.visitSingularInt32Field(value: weight, fieldNumber: 3)
    }
    if active != false {
      try visitor.visitSingularBoolField(value: active, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Otsimo_Abtest_ABTestGroup) -> Bool {
    if name != other.name {return false}
    if appId != other.appId {return false}
    if weight != other.weight {return false}
    if active != other.active {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Otsimo_Abtest_ABDisableReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ABDisableReq"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "app_id"),
  ]

  public var name: String = ""

  public var appId: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &name)
      case 2: try decoder.decodeSingularStringField(value: &appId)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !name.isEmpty {
      try visitor.visitSingularStringField(value: name, fieldNumber: 1)
    }
    if !appId.isEmpty {
      try visitor.visitSingularStringField(value: appId, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Otsimo_Abtest_ABDisableReq) -> Bool {
    if name != other.name {return false}
    if appId != other.appId {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Otsimo_Abtest_ListTestGroupReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListTestGroupReq"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
  ]

  public var appId: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &appId)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !appId.isEmpty {
      try visitor.visitSingularStringField(value: appId, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Otsimo_Abtest_ListTestGroupReq) -> Bool {
    if appId != other.appId {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Otsimo_Abtest_AppTestingStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AppTestingStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "tests"),
  ]

  public var version: Int32 = 0

  public var tests: [Otsimo_Abtest_ABTestGroup] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &version)
      case 2: try decoder.decodeRepeatedMessageField(value: &tests)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if version != 0 {
      try visitor.visitSingularInt32Field(value: version, fieldNumber: 1)
    }
    if !tests.isEmpty {
      try visitor.visitRepeatedMessageField(value: tests, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Otsimo_Abtest_AppTestingStatus) -> Bool {
    if version != other.version {return false}
    if tests != other.tests {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Otsimo_Abtest_CheckUserStatusReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckUserStatusReq"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
  ]

  public var userId: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &userId)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !userId.isEmpty {
      try visitor.visitSingularStringField(value: userId, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Otsimo_Abtest_CheckUserStatusReq) -> Bool {
    if userId != other.userId {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Otsimo_Abtest_ChangeUserTestGroupReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChangeUserTestGroupReq"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    3: .standard(proto: "app_id"),
    4: .standard(proto: "test_group_name"),
  ]

  public var userId: String = ""

  public var appId: String = ""

  ///  TestGroupName is empty for no testing group
  public var testGroupName: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &userId)
      case 3: try decoder.decodeSingularStringField(value: &appId)
      case 4: try decoder.decodeSingularStringField(value: &testGroupName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !userId.isEmpty {
      try visitor.visitSingularStringField(value: userId, fieldNumber: 1)
    }
    if !appId.isEmpty {
      try visitor.visitSingularStringField(value: appId, fieldNumber: 3)
    }
    if !testGroupName.isEmpty {
      try visitor.visitSingularStringField(value: testGroupName, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Otsimo_Abtest_ChangeUserTestGroupReq) -> Bool {
    if userId != other.userId {return false}
    if appId != other.appId {return false}
    if testGroupName != other.testGroupName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Otsimo_Abtest_UserTestGroupStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserTestGroupStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .same(proto: "apps"),
  ]

  public var userId: String = ""

  public var apps: [Otsimo_Abtest_UserTestGroupStatus.AppGroup] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct AppGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = Otsimo_Abtest_UserTestGroupStatus.protoMessageName + ".AppGroup"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      1: .standard(proto: "app_id"),
      2: .standard(proto: "test_group"),
      3: .same(proto: "version"),
    ]

    public var appId: String = ""

    public var testGroup: String = ""

    public var version: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &appId)
        case 2: try decoder.decodeSingularStringField(value: &testGroup)
        case 3: try decoder.decodeSingularInt32Field(value: &version)
        default: break
        }
      }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !appId.isEmpty {
        try visitor.visitSingularStringField(value: appId, fieldNumber: 1)
      }
      if !testGroup.isEmpty {
        try visitor.visitSingularStringField(value: testGroup, fieldNumber: 2)
      }
      if version != 0 {
        try visitor.visitSingularInt32Field(value: version, fieldNumber: 3)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    public func _protobuf_generated_isEqualTo(other: Otsimo_Abtest_UserTestGroupStatus.AppGroup) -> Bool {
      if appId != other.appId {return false}
      if testGroup != other.testGroup {return false}
      if version != other.version {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &userId)
      case 2: try decoder.decodeRepeatedMessageField(value: &apps)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !userId.isEmpty {
      try visitor.visitSingularStringField(value: userId, fieldNumber: 1)
    }
    if !apps.isEmpty {
      try visitor.visitRepeatedMessageField(value: apps, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Otsimo_Abtest_UserTestGroupStatus) -> Bool {
    if userId != other.userId {return false}
    if apps != other.apps {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
