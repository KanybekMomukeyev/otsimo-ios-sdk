/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: ab.proto
 *
 */

import Foundation
import SwiftProtobuf


public struct Otsimo_Abtest_ABTestGroup: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Otsimo_Abtest_ABTestGroup"}
  public var protoMessageName: String {return "ABTestGroup"}
  public var protoPackageName: String {return "otsimo.abtest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "name", swift: "name"),
    2: .unique(proto: "app_id", json: "appId", swift: "appId"),
    3: .same(proto: "weight", swift: "weight"),
    4: .same(proto: "active", swift: "active"),
  ]


  public var name: String = ""

  public var appId: String = ""

  public var weight: Int32 = 0

  public var active: Bool = false

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &name)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &appId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &weight)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &active)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if name != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: name, fieldNumber: 1)
    }
    if appId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: appId, fieldNumber: 2)
    }
    if weight != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: weight, fieldNumber: 3)
    }
    if active != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: active, fieldNumber: 4)
    }
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_Abtest_ABTestGroup) -> Bool {
    if name != other.name {return false}
    if appId != other.appId {return false}
    if weight != other.weight {return false}
    if active != other.active {return false}
    return true
  }
}

public struct Otsimo_Abtest_ABDisableReq: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Otsimo_Abtest_ABDisableReq"}
  public var protoMessageName: String {return "ABDisableReq"}
  public var protoPackageName: String {return "otsimo.abtest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "name", swift: "name"),
    2: .unique(proto: "app_id", json: "appId", swift: "appId"),
  ]


  public var name: String = ""

  public var appId: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &name)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &appId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if name != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: name, fieldNumber: 1)
    }
    if appId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: appId, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_Abtest_ABDisableReq) -> Bool {
    if name != other.name {return false}
    if appId != other.appId {return false}
    return true
  }
}

public struct Otsimo_Abtest_ListTestGroupReq: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Otsimo_Abtest_ListTestGroupReq"}
  public var protoMessageName: String {return "ListTestGroupReq"}
  public var protoPackageName: String {return "otsimo.abtest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "app_id", json: "appId", swift: "appId"),
  ]


  public var appId: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &appId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if appId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: appId, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_Abtest_ListTestGroupReq) -> Bool {
    if appId != other.appId {return false}
    return true
  }
}

public struct Otsimo_Abtest_AppTestingStatus: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Otsimo_Abtest_AppTestingStatus"}
  public var protoMessageName: String {return "AppTestingStatus"}
  public var protoPackageName: String {return "otsimo.abtest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "version", swift: "version"),
    2: .same(proto: "tests", swift: "tests"),
  ]


  public var version: Int32 = 0

  public var tests: [Otsimo_Abtest_ABTestGroup] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &version)
    case 2: try setter.decodeRepeatedMessageField(fieldType: Otsimo_Abtest_ABTestGroup.self, value: &tests)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if version != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: version, fieldNumber: 1)
    }
    if !tests.isEmpty {
      try visitor.visitRepeatedMessageField(value: tests, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_Abtest_AppTestingStatus) -> Bool {
    if version != other.version {return false}
    if tests != other.tests {return false}
    return true
  }
}

public struct Otsimo_Abtest_CheckUserStatusReq: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Otsimo_Abtest_CheckUserStatusReq"}
  public var protoMessageName: String {return "CheckUserStatusReq"}
  public var protoPackageName: String {return "otsimo.abtest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
  ]


  public var userId: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &userId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if userId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: userId, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_Abtest_CheckUserStatusReq) -> Bool {
    if userId != other.userId {return false}
    return true
  }
}

public struct Otsimo_Abtest_ChangeUserTestGroupReq: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Otsimo_Abtest_ChangeUserTestGroupReq"}
  public var protoMessageName: String {return "ChangeUserTestGroupReq"}
  public var protoPackageName: String {return "otsimo.abtest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    3: .unique(proto: "app_id", json: "appId", swift: "appId"),
    4: .unique(proto: "test_group_name", json: "testGroupName", swift: "testGroupName"),
  ]


  public var userId: String = ""

  public var appId: String = ""

  ///  TestGroupName is empty for no testing group
  public var testGroupName: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &userId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &appId)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &testGroupName)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if userId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: userId, fieldNumber: 1)
    }
    if appId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: appId, fieldNumber: 3)
    }
    if testGroupName != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: testGroupName, fieldNumber: 4)
    }
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_Abtest_ChangeUserTestGroupReq) -> Bool {
    if userId != other.userId {return false}
    if appId != other.appId {return false}
    if testGroupName != other.testGroupName {return false}
    return true
  }
}

public struct Otsimo_Abtest_UserTestGroupStatus: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Otsimo_Abtest_UserTestGroupStatus"}
  public var protoMessageName: String {return "UserTestGroupStatus"}
  public var protoPackageName: String {return "otsimo.abtest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .same(proto: "apps", swift: "apps"),
  ]


  public struct AppGroup: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "Otsimo_Abtest_UserTestGroupStatus.AppGroup"}
    public var protoMessageName: String {return "AppGroup"}
    public var protoPackageName: String {return "otsimo.abtest"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      1: .unique(proto: "app_id", json: "appId", swift: "appId"),
      2: .unique(proto: "test_group", json: "testGroup", swift: "testGroup"),
      3: .same(proto: "version", swift: "version"),
    ]


    public var appId: String = ""

    public var testGroup: String = ""

    public var version: Int32 = 0

    public init() {}

    public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &appId)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &testGroup)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &version)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
      if appId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: appId, fieldNumber: 1)
      }
      if testGroup != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: testGroup, fieldNumber: 2)
      }
      if version != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: version, fieldNumber: 3)
      }
    }

    public func _protoc_generated_isEqualTo(other: Otsimo_Abtest_UserTestGroupStatus.AppGroup) -> Bool {
      if appId != other.appId {return false}
      if testGroup != other.testGroup {return false}
      if version != other.version {return false}
      return true
    }
  }

  public var userId: String = ""

  public var apps: [Otsimo_Abtest_UserTestGroupStatus.AppGroup] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &userId)
    case 2: try setter.decodeRepeatedMessageField(fieldType: Otsimo_Abtest_UserTestGroupStatus.AppGroup.self, value: &apps)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if userId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: userId, fieldNumber: 1)
    }
    if !apps.isEmpty {
      try visitor.visitRepeatedMessageField(value: apps, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_Abtest_UserTestGroupStatus) -> Bool {
    if userId != other.userId {return false}
    if apps != other.apps {return false}
    return true
  }
}
