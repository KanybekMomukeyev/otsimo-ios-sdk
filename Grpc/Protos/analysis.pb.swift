/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: analysis.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

fileprivate let _protobuf_package = "apipb"

public struct Apipb_TimeRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TimeRange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "to"),
  ]

  ///  From is the unix seconds time
  public var from: Int64 = 0

  ///  To is the unix seconds time
  public var to: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &from)
      case 2: try decoder.decodeSingularInt64Field(value: &to)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if from != 0 {
      try visitor.visitSingularInt64Field(value: from, fieldNumber: 1)
    }
    if to != 0 {
      try visitor.visitSingularInt64Field(value: to, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_TimeRange) -> Bool {
    if from != other.from {return false}
    if to != other.to {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_ChildAndProfileIds: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChildAndProfileIds"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "child_id"),
    2: .standard(proto: "profile_id"),
  ]

  ///  ChildId
  public var childId: String = ""

  ///  ProfileId
  public var profileId: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &childId)
      case 2: try decoder.decodeSingularStringField(value: &profileId)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !childId.isEmpty {
      try visitor.visitSingularStringField(value: childId, fieldNumber: 1)
    }
    if !profileId.isEmpty {
      try visitor.visitSingularStringField(value: profileId, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_ChildAndProfileIds) -> Bool {
    if childId != other.childId {return false}
    if profileId != other.profileId {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_ChildAndTimeRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChildAndTimeRange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "child_id"),
    2: .standard(proto: "profile_id"),
    3: .same(proto: "range"),
  ]

  private class _StorageClass {
    var _childId: String = ""
    var _profileId: String = ""
    var _range: Apipb_TimeRange? = nil

    init() {}

    init(copying source: _StorageClass) {
      _childId = source._childId
      _profileId = source._profileId
      _range = source._range
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  ///  ChildId
  public var childId: String {
    get {return _storage._childId}
    set {_uniqueStorage()._childId = newValue}
  }

  ///  ProfileId
  public var profileId: String {
    get {return _storage._profileId}
    set {_uniqueStorage()._profileId = newValue}
  }

  ///  Range is the time range
  public var range: Apipb_TimeRange {
    get {return _storage._range ?? Apipb_TimeRange()}
    set {_uniqueStorage()._range = newValue}
  }
  public var hasRange: Bool {
    return _storage._range != nil
  }
  public mutating func clearRange() {
    return _storage._range = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._childId)
        case 2: try decoder.decodeSingularStringField(value: &_storage._profileId)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._range)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._childId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._childId, fieldNumber: 1)
      }
      if !_storage._profileId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._profileId, fieldNumber: 2)
      }
      if let v = _storage._range {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_ChildAndTimeRange) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._childId != other_storage._childId {return false}
        if _storage._profileId != other_storage._profileId {return false}
        if _storage._range != other_storage._range {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GameWithVersions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameWithVersions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_id"),
    2: .same(proto: "versions"),
  ]

  ///  GameId
  public var gameId: String = ""

  ///  Versions
  public var versions: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &gameId)
      case 2: try decoder.decodeRepeatedStringField(value: &versions)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !gameId.isEmpty {
      try visitor.visitSingularStringField(value: gameId, fieldNumber: 1)
    }
    if !versions.isEmpty {
      try visitor.visitRepeatedStringField(value: versions, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GameWithVersions) -> Bool {
    if gameId != other.gameId {return false}
    if versions != other.versions {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_PlayedGamesList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlayedGamesList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "games"),
    2: .standard(proto: "child_id"),
    3: .same(proto: "range"),
  ]

  private class _StorageClass {
    var _games: [Apipb_GameWithVersions] = []
    var _childId: String = ""
    var _range: Apipb_TimeRange? = nil

    init() {}

    init(copying source: _StorageClass) {
      _games = source._games
      _childId = source._childId
      _range = source._range
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var games: [Apipb_GameWithVersions] {
    get {return _storage._games}
    set {_uniqueStorage()._games = newValue}
  }

  ///  ChildId
  public var childId: String {
    get {return _storage._childId}
    set {_uniqueStorage()._childId = newValue}
  }

  ///  Range is the time range
  public var range: Apipb_TimeRange {
    get {return _storage._range ?? Apipb_TimeRange()}
    set {_uniqueStorage()._range = newValue}
  }
  public var hasRange: Bool {
    return _storage._range != nil
  }
  public mutating func clearRange() {
    return _storage._range = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._games)
        case 2: try decoder.decodeSingularStringField(value: &_storage._childId)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._range)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._games.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._games, fieldNumber: 1)
      }
      if !_storage._childId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._childId, fieldNumber: 2)
      }
      if let v = _storage._range {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_PlayedGamesList) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._games != other_storage._games {return false}
        if _storage._childId != other_storage._childId {return false}
        if _storage._range != other_storage._range {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_QuerySort: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QuerySort"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "field_name"),
    2: .same(proto: "order"),
  ]

  public var fieldName: String = ""

  public var order: Apipb_QuerySort.SortOrder = Apipb_QuerySort.SortOrder.asc

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum SortOrder: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case asc // = 0
    case dsc // = 1
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "ASC"),
      1: .same(proto: "DSC"),
    ]

    public init() {
      self = .asc
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .asc
      case 1: self = .dsc
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .asc: return 0
      case .dsc: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &fieldName)
      case 2: try decoder.decodeSingularEnumField(value: &order)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !fieldName.isEmpty {
      try visitor.visitSingularStringField(value: fieldName, fieldNumber: 1)
    }
    if order != Apipb_QuerySort.SortOrder.asc {
      try visitor.visitSingularEnumField(value: order, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_QuerySort) -> Bool {
    if fieldName != other.fieldName {return false}
    if order != other.order {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_Aggregation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Aggregation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "field_name"),
    2: .standard(proto: "output_field"),
    3: .same(proto: "accumulator"),
  ]

  public var fieldName: String = ""

  public var outputField: String = ""

  public var accumulator: Apipb_Aggregation.Accumulator = Apipb_Aggregation.Accumulator.none

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Accumulator: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case none // = 0
    case count // = 1
    case sum // = 2
    case max // = 3
    case min // = 4
    case avg // = 5
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "NONE"),
      1: .same(proto: "COUNT"),
      2: .same(proto: "SUM"),
      3: .same(proto: "MAX"),
      4: .same(proto: "MIN"),
      5: .same(proto: "AVG"),
    ]

    public init() {
      self = .none
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .count
      case 2: self = .sum
      case 3: self = .max
      case 4: self = .min
      case 5: self = .avg
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .none: return 0
      case .count: return 1
      case .sum: return 2
      case .max: return 3
      case .min: return 4
      case .avg: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &fieldName)
      case 2: try decoder.decodeSingularStringField(value: &outputField)
      case 3: try decoder.decodeSingularEnumField(value: &accumulator)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !fieldName.isEmpty {
      try visitor.visitSingularStringField(value: fieldName, fieldNumber: 1)
    }
    if !outputField.isEmpty {
      try visitor.visitSingularStringField(value: outputField, fieldNumber: 2)
    }
    if accumulator != Apipb_Aggregation.Accumulator.none {
      try visitor.visitSingularEnumField(value: accumulator, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_Aggregation) -> Bool {
    if fieldName != other.fieldName {return false}
    if outputField != other.outputField {return false}
    if accumulator != other.accumulator {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GroupInterval: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupInterval"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "int"),
    2: .same(proto: "real"),
    3: .same(proto: "days"),
    4: .same(proto: "hours"),
    5: .same(proto: "minutes"),
    6: .same(proto: "seconds"),
  ]

  ///  For ContinuesInterval
  public var int: Int32 = 0

  ///  For ContinuesInterval
  public var real: Float = 0

  ///  For Datetime
  public var days: Int32 = 0

  ///  For Datetime
  public var hours: Int32 = 0

  ///  For TimeOfDay
  public var minutes: Bool = false

  ///  For TimeOfDay
  public var seconds: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &int)
      case 2: try decoder.decodeSingularFloatField(value: &real)
      case 3: try decoder.decodeSingularInt32Field(value: &days)
      case 4: try decoder.decodeSingularInt32Field(value: &hours)
      case 5: try decoder.decodeSingularBoolField(value: &minutes)
      case 6: try decoder.decodeSingularBoolField(value: &seconds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if int != 0 {
      try visitor.visitSingularInt32Field(value: int, fieldNumber: 1)
    }
    if real != 0 {
      try visitor.visitSingularFloatField(value: real, fieldNumber: 2)
    }
    if days != 0 {
      try visitor.visitSingularInt32Field(value: days, fieldNumber: 3)
    }
    if hours != 0 {
      try visitor.visitSingularInt32Field(value: hours, fieldNumber: 4)
    }
    if minutes != false {
      try visitor.visitSingularBoolField(value: minutes, fieldNumber: 5)
    }
    if seconds != false {
      try visitor.visitSingularBoolField(value: seconds, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GroupInterval) -> Bool {
    if int != other.int {return false}
    if real != other.real {return false}
    if days != other.days {return false}
    if hours != other.hours {return false}
    if minutes != other.minutes {return false}
    if seconds != other.seconds {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_QueryGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QueryGroup"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "field_name"),
    2: .same(proto: "type"),
    3: .same(proto: "interval"),
    4: .standard(proto: "output_field"),
  ]

  private class _StorageClass {
    var _fieldName: String = ""
    var _type: Apipb_QueryGroup.GroupType = Apipb_QueryGroup.GroupType.date
    var _interval: Apipb_GroupInterval? = nil
    var _outputField: String = ""

    init() {}

    init(copying source: _StorageClass) {
      _fieldName = source._fieldName
      _type = source._type
      _interval = source._interval
      _outputField = source._outputField
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var fieldName: String {
    get {return _storage._fieldName}
    set {_uniqueStorage()._fieldName = newValue}
  }

  public var type: Apipb_QueryGroup.GroupType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  ///  Interval is optional for Date and Discrete type
  public var interval: Apipb_GroupInterval {
    get {return _storage._interval ?? Apipb_GroupInterval()}
    set {_uniqueStorage()._interval = newValue}
  }
  public var hasInterval: Bool {
    return _storage._interval != nil
  }
  public mutating func clearInterval() {
    return _storage._interval = nil
  }

  public var outputField: String {
    get {return _storage._outputField}
    set {_uniqueStorage()._outputField = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum GroupType: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int

    ///  Date gives rows each day of given timeRange
    case date // = 0

    ///  Datetime gives rows on given interval
    case datetime // = 1

    ///  TimeofDay gives rows on time of day. minutes and seconds on interval value determines interval.
    ///  ex: if minutes and seconds are false then rows will be 0,1,2,3,4
    ///  ex: if minutes is true then rows will be 00:00,00:01,00:02,...
    ///  when seconds is true than minutes is always true
    case timeOfDay // = 2

    ///  Discrete should be used for String values
    case discrete // = 3

    ///  ContinuesInterval is for number values
    case continuesInterval // = 4
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "Date"),
      1: .same(proto: "Datetime"),
      2: .same(proto: "TimeOfDay"),
      3: .same(proto: "Discrete"),
      4: .same(proto: "ContinuesInterval"),
    ]

    public init() {
      self = .date
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .date
      case 1: self = .datetime
      case 2: self = .timeOfDay
      case 3: self = .discrete
      case 4: self = .continuesInterval
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .date: return 0
      case .datetime: return 1
      case .timeOfDay: return 2
      case .discrete: return 3
      case .continuesInterval: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._fieldName)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._interval)
        case 4: try decoder.decodeSingularStringField(value: &_storage._outputField)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._fieldName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fieldName, fieldNumber: 1)
      }
      if _storage._type != Apipb_QueryGroup.GroupType.date {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 2)
      }
      if let v = _storage._interval {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._outputField.isEmpty {
        try visitor.visitSingularStringField(value: _storage._outputField, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_QueryGroup) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._fieldName != other_storage._fieldName {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._interval != other_storage._interval {return false}
        if _storage._outputField != other_storage._outputField {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_Query: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Query"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "events"),
    2: .same(proto: "range"),
    3: .same(proto: "sort"),
    4: .same(proto: "limit"),
    5: .same(proto: "offset"),
    6: .standard(proto: "group_by"),
    7: .same(proto: "aggregations"),
    8: .standard(proto: "raw_queries"),
  ]

  private class _StorageClass {
    var _events: [String] = []
    var _range: Apipb_TimeRange? = nil
    var _sort: [Apipb_QuerySort] = []
    var _limit: Int32 = 0
    var _offset: Int32 = 0
    var _groupBy: Apipb_QueryGroup? = nil
    var _aggregations: [Apipb_Aggregation] = []
    var _rawQueries: [Data] = []

    init() {}

    init(copying source: _StorageClass) {
      _events = source._events
      _range = source._range
      _sort = source._sort
      _limit = source._limit
      _offset = source._offset
      _groupBy = source._groupBy
      _aggregations = source._aggregations
      _rawQueries = source._rawQueries
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var events: [String] {
    get {return _storage._events}
    set {_uniqueStorage()._events = newValue}
  }

  public var range: Apipb_TimeRange {
    get {return _storage._range ?? Apipb_TimeRange()}
    set {_uniqueStorage()._range = newValue}
  }
  public var hasRange: Bool {
    return _storage._range != nil
  }
  public mutating func clearRange() {
    return _storage._range = nil
  }

  public var sort: [Apipb_QuerySort] {
    get {return _storage._sort}
    set {_uniqueStorage()._sort = newValue}
  }

  public var limit: Int32 {
    get {return _storage._limit}
    set {_uniqueStorage()._limit = newValue}
  }

  public var offset: Int32 {
    get {return _storage._offset}
    set {_uniqueStorage()._offset = newValue}
  }

  public var groupBy: Apipb_QueryGroup {
    get {return _storage._groupBy ?? Apipb_QueryGroup()}
    set {_uniqueStorage()._groupBy = newValue}
  }
  public var hasGroupBy: Bool {
    return _storage._groupBy != nil
  }
  public mutating func clearGroupBy() {
    return _storage._groupBy = nil
  }

  public var aggregations: [Apipb_Aggregation] {
    get {return _storage._aggregations}
    set {_uniqueStorage()._aggregations = newValue}
  }

  public var rawQueries: [Data] {
    get {return _storage._rawQueries}
    set {_uniqueStorage()._rawQueries = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedStringField(value: &_storage._events)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._range)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._sort)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._limit)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._offset)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._groupBy)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._aggregations)
        case 8: try decoder.decodeRepeatedBytesField(value: &_storage._rawQueries)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._events.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._events, fieldNumber: 1)
      }
      if let v = _storage._range {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._sort.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._sort, fieldNumber: 3)
      }
      if _storage._limit != 0 {
        try visitor.visitSingularInt32Field(value: _storage._limit, fieldNumber: 4)
      }
      if _storage._offset != 0 {
        try visitor.visitSingularInt32Field(value: _storage._offset, fieldNumber: 5)
      }
      if let v = _storage._groupBy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._aggregations.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._aggregations, fieldNumber: 7)
      }
      if !_storage._rawQueries.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._rawQueries, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_Query) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._events != other_storage._events {return false}
        if _storage._range != other_storage._range {return false}
        if _storage._sort != other_storage._sort {return false}
        if _storage._limit != other_storage._limit {return false}
        if _storage._offset != other_storage._offset {return false}
        if _storage._groupBy != other_storage._groupBy {return false}
        if _storage._aggregations != other_storage._aggregations {return false}
        if _storage._rawQueries != other_storage._rawQueries {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_AnalyzeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AnalyzeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "child_id"),
    2: .standard(proto: "profile_id"),
    3: .standard(proto: "use_app_data"),
    6: .same(proto: "query"),
    7: .same(proto: "games"),
  ]

  private class _StorageClass {
    var _childId: String = ""
    var _profileId: String = ""
    var _useAppData: Bool = false
    var _query: Apipb_Query? = nil
    var _games: [Apipb_GameWithVersions] = []

    init() {}

    init(copying source: _StorageClass) {
      _childId = source._childId
      _profileId = source._profileId
      _useAppData = source._useAppData
      _query = source._query
      _games = source._games
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  ///  ChildId
  public var childId: String {
    get {return _storage._childId}
    set {_uniqueStorage()._childId = newValue}
  }

  ///  ProfileId
  public var profileId: String {
    get {return _storage._profileId}
    set {_uniqueStorage()._profileId = newValue}
  }

  ///  UseAppData changes data source
  public var useAppData: Bool {
    get {return _storage._useAppData}
    set {_uniqueStorage()._useAppData = newValue}
  }

  ///  Query is calculation query
  public var query: Apipb_Query {
    get {return _storage._query ?? Apipb_Query()}
    set {_uniqueStorage()._query = newValue}
  }
  public var hasQuery: Bool {
    return _storage._query != nil
  }
  public mutating func clearQuery() {
    return _storage._query = nil
  }

  ///  Games are the compute this request on
  public var games: [Apipb_GameWithVersions] {
    get {return _storage._games}
    set {_uniqueStorage()._games = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._childId)
        case 2: try decoder.decodeSingularStringField(value: &_storage._profileId)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._useAppData)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._query)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._games)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._childId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._childId, fieldNumber: 1)
      }
      if !_storage._profileId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._profileId, fieldNumber: 2)
      }
      if _storage._useAppData != false {
        try visitor.visitSingularBoolField(value: _storage._useAppData, fieldNumber: 3)
      }
      if let v = _storage._query {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._games.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._games, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_AnalyzeRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._childId != other_storage._childId {return false}
        if _storage._profileId != other_storage._profileId {return false}
        if _storage._useAppData != other_storage._useAppData {return false}
        if _storage._query != other_storage._query {return false}
        if _storage._games != other_storage._games {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_AnalyzeResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AnalyzeResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "data"),
    3: .standard(proto: "created_at"),
  ]

  private class _StorageClass {
    var _request: Apipb_AnalyzeRequest? = nil
    var _data: Apipb_DataSet? = nil
    var _createdAt: Int64 = 0

    init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _data = source._data
      _createdAt = source._createdAt
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  ///  Request
  public var request: Apipb_AnalyzeRequest {
    get {return _storage._request ?? Apipb_AnalyzeRequest()}
    set {_uniqueStorage()._request = newValue}
  }
  public var hasRequest: Bool {
    return _storage._request != nil
  }
  public mutating func clearRequest() {
    return _storage._request = nil
  }

  ///  Data
  public var data: Apipb_DataSet {
    get {return _storage._data ?? Apipb_DataSet()}
    set {_uniqueStorage()._data = newValue}
  }
  public var hasData: Bool {
    return _storage._data != nil
  }
  public mutating func clearData() {
    return _storage._data = nil
  }

  ///  Created At
  public var createdAt: Int64 {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._data)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._createdAt)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._createdAt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createdAt, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_AnalyzeResult) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._request != other_storage._request {return false}
        if _storage._data != other_storage._data {return false}
        if _storage._createdAt != other_storage._createdAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///  Active Users
public struct Apipb_ActiveUsersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ActiveUsersRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "dates"),
    3: .standard(proto: "app_id"),
  ]

  public var type: Apipb_ActiveUsersRequest.TypeEnum = Apipb_ActiveUsersRequest.TypeEnum.montly

  public var dates: [Int64] = []

  public var appId: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum TypeEnum: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case montly // = 0
    case daily // = 1
    case new // = 2
    case total // = 3
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "MONTLY"),
      1: .same(proto: "DAILY"),
      2: .same(proto: "NEW"),
      3: .same(proto: "TOTAL"),
    ]

    public init() {
      self = .montly
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .montly
      case 1: self = .daily
      case 2: self = .new
      case 3: self = .total
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .montly: return 0
      case .daily: return 1
      case .new: return 2
      case .total: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &type)
      case 2: try decoder.decodeRepeatedInt64Field(value: &dates)
      case 3: try decoder.decodeSingularStringField(value: &appId)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if type != Apipb_ActiveUsersRequest.TypeEnum.montly {
      try visitor.visitSingularEnumField(value: type, fieldNumber: 1)
    }
    if !dates.isEmpty {
      try visitor.visitPackedInt64Field(value: dates, fieldNumber: 2)
    }
    if !appId.isEmpty {
      try visitor.visitSingularStringField(value: appId, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_ActiveUsersRequest) -> Bool {
    if type != other.type {return false}
    if dates != other.dates {return false}
    if appId != other.appId {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_ActiveUsersResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ActiveUsersResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "data"),
    3: .standard(proto: "created_at"),
  ]

  private class _StorageClass {
    var _request: Apipb_ActiveUsersRequest? = nil
    var _data: Apipb_DataSet? = nil
    var _createdAt: Int64 = 0

    init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _data = source._data
      _createdAt = source._createdAt
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  ///  Request
  public var request: Apipb_ActiveUsersRequest {
    get {return _storage._request ?? Apipb_ActiveUsersRequest()}
    set {_uniqueStorage()._request = newValue}
  }
  public var hasRequest: Bool {
    return _storage._request != nil
  }
  public mutating func clearRequest() {
    return _storage._request = nil
  }

  ///  Data
  public var data: Apipb_DataSet {
    get {return _storage._data ?? Apipb_DataSet()}
    set {_uniqueStorage()._data = newValue}
  }
  public var hasData: Bool {
    return _storage._data != nil
  }
  public mutating func clearData() {
    return _storage._data = nil
  }

  ///  Created At
  public var createdAt: Int64 {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._data)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._createdAt)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._createdAt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createdAt, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_ActiveUsersResult) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._request != other_storage._request {return false}
        if _storage._data != other_storage._data {return false}
        if _storage._createdAt != other_storage._createdAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///   Retention
public struct Apipb_RetentionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RetentionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "dates"),
    3: .standard(proto: "app_id"),
  ]

  public var type: Apipb_RetentionRequest.TypeEnum = Apipb_RetentionRequest.TypeEnum.one

  public var dates: [Int64] = []

  public var appId: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum TypeEnum: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case one // = 0
    case seven // = 1
    case thirty // = 2
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "ONE"),
      1: .same(proto: "SEVEN"),
      2: .same(proto: "THIRTY"),
    ]

    public init() {
      self = .one
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .one
      case 1: self = .seven
      case 2: self = .thirty
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .one: return 0
      case .seven: return 1
      case .thirty: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &type)
      case 2: try decoder.decodeRepeatedInt64Field(value: &dates)
      case 3: try decoder.decodeSingularStringField(value: &appId)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if type != Apipb_RetentionRequest.TypeEnum.one {
      try visitor.visitSingularEnumField(value: type, fieldNumber: 1)
    }
    if !dates.isEmpty {
      try visitor.visitPackedInt64Field(value: dates, fieldNumber: 2)
    }
    if !appId.isEmpty {
      try visitor.visitSingularStringField(value: appId, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_RetentionRequest) -> Bool {
    if type != other.type {return false}
    if dates != other.dates {return false}
    if appId != other.appId {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_RetentionResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RetentionResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "data"),
    3: .standard(proto: "created_at"),
  ]

  private class _StorageClass {
    var _request: Apipb_RetentionRequest? = nil
    var _data: Apipb_DataSet? = nil
    var _createdAt: Int64 = 0

    init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _data = source._data
      _createdAt = source._createdAt
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  ///  Request
  public var request: Apipb_RetentionRequest {
    get {return _storage._request ?? Apipb_RetentionRequest()}
    set {_uniqueStorage()._request = newValue}
  }
  public var hasRequest: Bool {
    return _storage._request != nil
  }
  public mutating func clearRequest() {
    return _storage._request = nil
  }

  ///  Data
  public var data: Apipb_DataSet {
    get {return _storage._data ?? Apipb_DataSet()}
    set {_uniqueStorage()._data = newValue}
  }
  public var hasData: Bool {
    return _storage._data != nil
  }
  public mutating func clearData() {
    return _storage._data = nil
  }

  ///  Created At
  public var createdAt: Int64 {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._data)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._createdAt)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._createdAt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createdAt, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_RetentionResult) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._request != other_storage._request {return false}
        if _storage._data != other_storage._data {return false}
        if _storage._createdAt != other_storage._createdAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_InactiveUsersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InactiveUsersRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "inactive_during"),
    3: .standard(proto: "active_during"),
  ]

  private class _StorageClass {
    var _appId: String = ""
    var _inactiveDuring: Apipb_TimeRange? = nil
    var _activeDuring: Apipb_TimeRange? = nil

    init() {}

    init(copying source: _StorageClass) {
      _appId = source._appId
      _inactiveDuring = source._inactiveDuring
      _activeDuring = source._activeDuring
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var appId: String {
    get {return _storage._appId}
    set {_uniqueStorage()._appId = newValue}
  }

  public var inactiveDuring: Apipb_TimeRange {
    get {return _storage._inactiveDuring ?? Apipb_TimeRange()}
    set {_uniqueStorage()._inactiveDuring = newValue}
  }
  public var hasInactiveDuring: Bool {
    return _storage._inactiveDuring != nil
  }
  public mutating func clearInactiveDuring() {
    return _storage._inactiveDuring = nil
  }

  public var activeDuring: Apipb_TimeRange {
    get {return _storage._activeDuring ?? Apipb_TimeRange()}
    set {_uniqueStorage()._activeDuring = newValue}
  }
  public var hasActiveDuring: Bool {
    return _storage._activeDuring != nil
  }
  public mutating func clearActiveDuring() {
    return _storage._activeDuring = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._appId)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._inactiveDuring)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._activeDuring)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._appId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appId, fieldNumber: 1)
      }
      if let v = _storage._inactiveDuring {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._activeDuring {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_InactiveUsersRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._appId != other_storage._appId {return false}
        if _storage._inactiveDuring != other_storage._inactiveDuring {return false}
        if _storage._activeDuring != other_storage._activeDuring {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GetActiveUsersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetActiveUsersRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .same(proto: "period"),
  ]

  private class _StorageClass {
    var _appId: String = ""
    var _period: Apipb_TimeRange? = nil

    init() {}

    init(copying source: _StorageClass) {
      _appId = source._appId
      _period = source._period
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var appId: String {
    get {return _storage._appId}
    set {_uniqueStorage()._appId = newValue}
  }

  public var period: Apipb_TimeRange {
    get {return _storage._period ?? Apipb_TimeRange()}
    set {_uniqueStorage()._period = newValue}
  }
  public var hasPeriod: Bool {
    return _storage._period != nil
  }
  public mutating func clearPeriod() {
    return _storage._period = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._appId)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._period)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._appId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appId, fieldNumber: 1)
      }
      if let v = _storage._period {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GetActiveUsersRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._appId != other_storage._appId {return false}
        if _storage._period != other_storage._period {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_ActiveOnRangeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ActiveOnRangeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "range"),
    2: .standard(proto: "country_codes"),
  ]

  private class _StorageClass {
    var _range: Apipb_TimeRange? = nil
    var _countryCodes: [String] = []

    init() {}

    init(copying source: _StorageClass) {
      _range = source._range
      _countryCodes = source._countryCodes
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var range: Apipb_TimeRange {
    get {return _storage._range ?? Apipb_TimeRange()}
    set {_uniqueStorage()._range = newValue}
  }
  public var hasRange: Bool {
    return _storage._range != nil
  }
  public mutating func clearRange() {
    return _storage._range = nil
  }

  public var countryCodes: [String] {
    get {return _storage._countryCodes}
    set {_uniqueStorage()._countryCodes = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._range)
        case 2: try decoder.decodeRepeatedStringField(value: &_storage._countryCodes)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._range {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._countryCodes.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._countryCodes, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_ActiveOnRangeRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._range != other_storage._range {return false}
        if _storage._countryCodes != other_storage._countryCodes {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GameInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameInfoResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_id"),
    2: .same(proto: "events"),
  ]

  public var gameId: String = ""

  public var events: [Apipb_GameInfoResponse.EventInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum FieldType: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case unknown // = 0
    case string // = 1
    case integer // = 2
    case float // = 3
    case bool // = 4
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "UNKNOWN"),
      1: .same(proto: "STRING"),
      2: .same(proto: "INTEGER"),
      3: .same(proto: "FLOAT"),
      4: .same(proto: "BOOL"),
    ]

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .string
      case 2: self = .integer
      case 3: self = .float
      case 4: self = .bool
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .string: return 1
      case .integer: return 2
      case .float: return 3
      case .bool: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct FieldInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = Apipb_GameInfoResponse.protoMessageName + ".FieldInfo"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      1: .same(proto: "name"),
      2: .same(proto: "type"),
    ]

    public var name: String = ""

    public var type: Apipb_GameInfoResponse.FieldType = Apipb_GameInfoResponse.FieldType.unknown

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &name)
        case 2: try decoder.decodeSingularEnumField(value: &type)
        default: break
        }
      }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !name.isEmpty {
        try visitor.visitSingularStringField(value: name, fieldNumber: 1)
      }
      if type != Apipb_GameInfoResponse.FieldType.unknown {
        try visitor.visitSingularEnumField(value: type, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    public func _protobuf_generated_isEqualTo(other: Apipb_GameInfoResponse.FieldInfo) -> Bool {
      if name != other.name {return false}
      if type != other.type {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  public struct EventInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = Apipb_GameInfoResponse.protoMessageName + ".EventInfo"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      1: .same(proto: "name"),
      2: .same(proto: "fields"),
    ]

    public var name: String = ""

    public var fields: [Apipb_GameInfoResponse.FieldInfo] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &name)
        case 2: try decoder.decodeRepeatedMessageField(value: &fields)
        default: break
        }
      }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !name.isEmpty {
        try visitor.visitSingularStringField(value: name, fieldNumber: 1)
      }
      if !fields.isEmpty {
        try visitor.visitRepeatedMessageField(value: fields, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    public func _protobuf_generated_isEqualTo(other: Apipb_GameInfoResponse.EventInfo) -> Bool {
      if name != other.name {return false}
      if fields != other.fields {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &gameId)
      case 2: try decoder.decodeRepeatedMessageField(value: &events)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !gameId.isEmpty {
      try visitor.visitSingularStringField(value: gameId, fieldNumber: 1)
    }
    if !events.isEmpty {
      try visitor.visitRepeatedMessageField(value: events, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GameInfoResponse) -> Bool {
    if gameId != other.gameId {return false}
    if events != other.events {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_AppDataInfoReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AppDataInfoReq"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_AppDataInfoReq) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
