/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: analysis.proto
 *
 */

import Foundation
import SwiftProtobuf


public struct Apipb_TimeRange: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_TimeRange"}
  public var protoMessageName: String {return "TimeRange"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "from", swift: "from"),
    2: .same(proto: "to", swift: "to"),
  ]


  ///  From is the unix seconds time
  public var from: Int64 = 0

  ///  To is the unix seconds time
  public var to: Int64 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &from)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &to)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if from != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: from, fieldNumber: 1)
    }
    if to != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: to, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_TimeRange) -> Bool {
    if from != other.from {return false}
    if to != other.to {return false}
    return true
  }
}

public struct Apipb_ChildAndProfileIds: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_ChildAndProfileIds"}
  public var protoMessageName: String {return "ChildAndProfileIds"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "child_id", json: "childId", swift: "childId"),
    2: .unique(proto: "profile_id", json: "profileId", swift: "profileId"),
  ]


  ///  ChildId
  public var childId: String = ""

  ///  ProfileId
  public var profileId: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &childId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &profileId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if childId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: childId, fieldNumber: 1)
    }
    if profileId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: profileId, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_ChildAndProfileIds) -> Bool {
    if childId != other.childId {return false}
    if profileId != other.profileId {return false}
    return true
  }
}

public struct Apipb_ChildAndTimeRange: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_ChildAndTimeRange"}
  public var protoMessageName: String {return "ChildAndTimeRange"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "child_id", json: "childId", swift: "childId"),
    2: .unique(proto: "profile_id", json: "profileId", swift: "profileId"),
    3: .same(proto: "range", swift: "range"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_ChildAndTimeRange
    var _childId: String = ""
    var _profileId: String = ""
    var _range: Apipb_TimeRange? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_childId)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_profileId)
      case 3: try setter.decodeSingularMessageField(fieldType: Apipb_TimeRange.self, value: &_range)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _childId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _childId, fieldNumber: 1)
      }
      if _profileId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _profileId, fieldNumber: 2)
      }
      if let v = _range {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _childId != other._childId {return false}
      if _profileId != other._profileId {return false}
      if _range != other._range {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._childId = _childId
      clone._profileId = _profileId
      clone._range = _range
      return clone
    }
  }

  private var _storage = _StorageClass()


  ///  ChildId
  public var childId: String {
    get {return _storage._childId}
    set {_uniqueStorage()._childId = newValue}
  }

  ///  ProfileId
  public var profileId: String {
    get {return _storage._profileId}
    set {_uniqueStorage()._profileId = newValue}
  }

  ///  Range is the time range
  public var range: Apipb_TimeRange {
    get {return _storage._range ?? Apipb_TimeRange()}
    set {_uniqueStorage()._range = newValue}
  }
  public var hasRange: Bool {
    return _storage._range != nil
  }
  public mutating func clearRange() {
    return _storage._range = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_ChildAndTimeRange) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_GameWithVersions: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GameWithVersions"}
  public var protoMessageName: String {return "GameWithVersions"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "game_id", json: "gameId", swift: "gameId"),
    2: .same(proto: "versions", swift: "versions"),
  ]


  ///  GameId
  public var gameId: String = ""

  ///  Versions
  public var versions: [String] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &gameId)
    case 2: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &versions)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if gameId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: gameId, fieldNumber: 1)
    }
    if !versions.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: versions, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GameWithVersions) -> Bool {
    if gameId != other.gameId {return false}
    if versions != other.versions {return false}
    return true
  }
}

public struct Apipb_PlayedGamesList: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_PlayedGamesList"}
  public var protoMessageName: String {return "PlayedGamesList"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "games", swift: "games"),
    2: .unique(proto: "child_id", json: "childId", swift: "childId"),
    3: .same(proto: "range", swift: "range"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_PlayedGamesList
    var _games: [Apipb_GameWithVersions] = []
    var _childId: String = ""
    var _range: Apipb_TimeRange? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeRepeatedMessageField(fieldType: Apipb_GameWithVersions.self, value: &_games)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_childId)
      case 3: try setter.decodeSingularMessageField(fieldType: Apipb_TimeRange.self, value: &_range)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if !_games.isEmpty {
        try visitor.visitRepeatedMessageField(value: _games, fieldNumber: 1)
      }
      if _childId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _childId, fieldNumber: 2)
      }
      if let v = _range {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _games != other._games {return false}
      if _childId != other._childId {return false}
      if _range != other._range {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._games = _games
      clone._childId = _childId
      clone._range = _range
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var games: [Apipb_GameWithVersions] {
    get {return _storage._games}
    set {_uniqueStorage()._games = newValue}
  }

  ///  ChildId
  public var childId: String {
    get {return _storage._childId}
    set {_uniqueStorage()._childId = newValue}
  }

  ///  Range is the time range
  public var range: Apipb_TimeRange {
    get {return _storage._range ?? Apipb_TimeRange()}
    set {_uniqueStorage()._range = newValue}
  }
  public var hasRange: Bool {
    return _storage._range != nil
  }
  public mutating func clearRange() {
    return _storage._range = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_PlayedGamesList) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_QuerySort: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_QuerySort"}
  public var protoMessageName: String {return "QuerySort"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "field_name", json: "fieldName", swift: "fieldName"),
    2: .same(proto: "order", swift: "order"),
  ]


  public enum SortOrder: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case asc // = 0
    case dsc // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .asc
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .asc
      case 1: self = .dsc
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "asc": self = .asc
      case "dsc": self = .dsc
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "ASC": self = .asc
      case "DSC": self = .dsc
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "ASC": self = .asc
      case "DSC": self = .dsc
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .asc: return 0
        case .dsc: return 1
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .asc: return "\"ASC\""
        case .dsc: return "\"DSC\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .asc: return ".asc"
        case .dsc: return ".dsc"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public var fieldName: String = ""

  public var order: Apipb_QuerySort.SortOrder = Apipb_QuerySort.SortOrder.asc

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &fieldName)
    case 2: try setter.decodeSingularField(fieldType: Apipb_QuerySort.SortOrder.self, value: &order)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if fieldName != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: fieldName, fieldNumber: 1)
    }
    if order != Apipb_QuerySort.SortOrder.asc {
      try visitor.visitSingularField(fieldType: Apipb_QuerySort.SortOrder.self, value: order, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_QuerySort) -> Bool {
    if fieldName != other.fieldName {return false}
    if order != other.order {return false}
    return true
  }
}

public struct Apipb_Aggregation: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_Aggregation"}
  public var protoMessageName: String {return "Aggregation"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "field_name", json: "fieldName", swift: "fieldName"),
    2: .unique(proto: "output_field", json: "outputField", swift: "outputField"),
    3: .same(proto: "accumulator", swift: "accumulator"),
  ]


  public enum Accumulator: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case none // = 0
    case count // = 1
    case sum // = 2
    case max // = 3
    case min // = 4
    case avg // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .none
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .count
      case 2: self = .sum
      case 3: self = .max
      case 4: self = .min
      case 5: self = .avg
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "none": self = .none
      case "count": self = .count
      case "sum": self = .sum
      case "max": self = .max
      case "min": self = .min
      case "avg": self = .avg
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "NONE": self = .none
      case "COUNT": self = .count
      case "SUM": self = .sum
      case "MAX": self = .max
      case "MIN": self = .min
      case "AVG": self = .avg
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "NONE": self = .none
      case "COUNT": self = .count
      case "SUM": self = .sum
      case "MAX": self = .max
      case "MIN": self = .min
      case "AVG": self = .avg
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .none: return 0
        case .count: return 1
        case .sum: return 2
        case .max: return 3
        case .min: return 4
        case .avg: return 5
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .none: return "\"NONE\""
        case .count: return "\"COUNT\""
        case .sum: return "\"SUM\""
        case .max: return "\"MAX\""
        case .min: return "\"MIN\""
        case .avg: return "\"AVG\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .none: return ".none"
        case .count: return ".count"
        case .sum: return ".sum"
        case .max: return ".max"
        case .min: return ".min"
        case .avg: return ".avg"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public var fieldName: String = ""

  public var outputField: String = ""

  public var accumulator: Apipb_Aggregation.Accumulator = Apipb_Aggregation.Accumulator.none

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &fieldName)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &outputField)
    case 3: try setter.decodeSingularField(fieldType: Apipb_Aggregation.Accumulator.self, value: &accumulator)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if fieldName != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: fieldName, fieldNumber: 1)
    }
    if outputField != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: outputField, fieldNumber: 2)
    }
    if accumulator != Apipb_Aggregation.Accumulator.none {
      try visitor.visitSingularField(fieldType: Apipb_Aggregation.Accumulator.self, value: accumulator, fieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_Aggregation) -> Bool {
    if fieldName != other.fieldName {return false}
    if outputField != other.outputField {return false}
    if accumulator != other.accumulator {return false}
    return true
  }
}

public struct Apipb_GroupInterval: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GroupInterval"}
  public var protoMessageName: String {return "GroupInterval"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "int", swift: "int"),
    2: .same(proto: "real", swift: "real"),
    3: .same(proto: "days", swift: "days"),
    4: .same(proto: "hours", swift: "hours"),
    5: .same(proto: "minutes", swift: "minutes"),
    6: .same(proto: "seconds", swift: "seconds"),
  ]


  ///  For ContinuesInterval
  public var int: Int32 = 0

  ///  For ContinuesInterval
  public var real: Float = 0

  ///  For Datetime
  public var days: Int32 = 0

  ///  For Datetime
  public var hours: Int32 = 0

  ///  For TimeOfDay
  public var minutes: Bool = false

  ///  For TimeOfDay
  public var seconds: Bool = false

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &int)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &real)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &days)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &hours)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &minutes)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &seconds)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if int != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: int, fieldNumber: 1)
    }
    if real != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: real, fieldNumber: 2)
    }
    if days != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: days, fieldNumber: 3)
    }
    if hours != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: hours, fieldNumber: 4)
    }
    if minutes != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: minutes, fieldNumber: 5)
    }
    if seconds != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: seconds, fieldNumber: 6)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GroupInterval) -> Bool {
    if int != other.int {return false}
    if real != other.real {return false}
    if days != other.days {return false}
    if hours != other.hours {return false}
    if minutes != other.minutes {return false}
    if seconds != other.seconds {return false}
    return true
  }
}

public struct Apipb_QueryGroup: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_QueryGroup"}
  public var protoMessageName: String {return "QueryGroup"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "field_name", json: "fieldName", swift: "fieldName"),
    2: .same(proto: "type", swift: "type"),
    3: .same(proto: "interval", swift: "interval"),
    4: .unique(proto: "output_field", json: "outputField", swift: "outputField"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_QueryGroup
    var _fieldName: String = ""
    var _type: Apipb_QueryGroup.GroupType = Apipb_QueryGroup.GroupType.date
    var _interval: Apipb_GroupInterval? = nil
    var _outputField: String = ""

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_fieldName)
      case 2: try setter.decodeSingularField(fieldType: Apipb_QueryGroup.GroupType.self, value: &_type)
      case 3: try setter.decodeSingularMessageField(fieldType: Apipb_GroupInterval.self, value: &_interval)
      case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_outputField)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _fieldName != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _fieldName, fieldNumber: 1)
      }
      if _type != Apipb_QueryGroup.GroupType.date {
        try visitor.visitSingularField(fieldType: Apipb_QueryGroup.GroupType.self, value: _type, fieldNumber: 2)
      }
      if let v = _interval {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _outputField != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _outputField, fieldNumber: 4)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _fieldName != other._fieldName {return false}
      if _type != other._type {return false}
      if _interval != other._interval {return false}
      if _outputField != other._outputField {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._fieldName = _fieldName
      clone._type = _type
      clone._interval = _interval
      clone._outputField = _outputField
      return clone
    }
  }

  private var _storage = _StorageClass()


  public enum GroupType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    ///  Date gives rows each day of given timeRange
    case date // = 0

    ///  Datetime gives rows on given interval
    case datetime // = 1

    ///  TimeofDay gives rows on time of day. minutes and seconds on interval value determines interval.
    ///  ex: if minutes and seconds are false then rows will be 0,1,2,3,4
    ///  ex: if minutes is true then rows will be 00:00,00:01,00:02,...
    ///  when seconds is true than minutes is always true
    case timeOfDay // = 2

    ///  Discrete should be used for String values
    case discrete // = 3

    ///  ContinuesInterval is for number values
    case continuesInterval // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .date
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .date
      case 1: self = .datetime
      case 2: self = .timeOfDay
      case 3: self = .discrete
      case 4: self = .continuesInterval
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "date": self = .date
      case "datetime": self = .datetime
      case "timeOfDay": self = .timeOfDay
      case "discrete": self = .discrete
      case "continuesInterval": self = .continuesInterval
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "Date": self = .date
      case "Datetime": self = .datetime
      case "TimeOfDay": self = .timeOfDay
      case "Discrete": self = .discrete
      case "ContinuesInterval": self = .continuesInterval
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "Date": self = .date
      case "Datetime": self = .datetime
      case "TimeOfDay": self = .timeOfDay
      case "Discrete": self = .discrete
      case "ContinuesInterval": self = .continuesInterval
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .date: return 0
        case .datetime: return 1
        case .timeOfDay: return 2
        case .discrete: return 3
        case .continuesInterval: return 4
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .date: return "\"Date\""
        case .datetime: return "\"Datetime\""
        case .timeOfDay: return "\"TimeOfDay\""
        case .discrete: return "\"Discrete\""
        case .continuesInterval: return "\"ContinuesInterval\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .date: return ".date"
        case .datetime: return ".datetime"
        case .timeOfDay: return ".timeOfDay"
        case .discrete: return ".discrete"
        case .continuesInterval: return ".continuesInterval"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public var fieldName: String {
    get {return _storage._fieldName}
    set {_uniqueStorage()._fieldName = newValue}
  }

  public var type: Apipb_QueryGroup.GroupType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  ///  Interval is optional for Date and Discrete type
  public var interval: Apipb_GroupInterval {
    get {return _storage._interval ?? Apipb_GroupInterval()}
    set {_uniqueStorage()._interval = newValue}
  }
  public var hasInterval: Bool {
    return _storage._interval != nil
  }
  public mutating func clearInterval() {
    return _storage._interval = nil
  }

  public var outputField: String {
    get {return _storage._outputField}
    set {_uniqueStorage()._outputField = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_QueryGroup) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_Query: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_Query"}
  public var protoMessageName: String {return "Query"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "events", swift: "events"),
    2: .same(proto: "range", swift: "range"),
    3: .same(proto: "sort", swift: "sort"),
    4: .same(proto: "limit", swift: "limit"),
    5: .same(proto: "offset", swift: "offset"),
    6: .unique(proto: "group_by", json: "groupBy", swift: "groupBy"),
    7: .same(proto: "aggregations", swift: "aggregations"),
    8: .unique(proto: "raw_queries", json: "rawQueries", swift: "rawQueries"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_Query
    var _events: [String] = []
    var _range: Apipb_TimeRange? = nil
    var _sort: [Apipb_QuerySort] = []
    var _limit: Int32 = 0
    var _offset: Int32 = 0
    var _groupBy: Apipb_QueryGroup? = nil
    var _aggregations: [Apipb_Aggregation] = []
    var _rawQueries: [Data] = []

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_events)
      case 2: try setter.decodeSingularMessageField(fieldType: Apipb_TimeRange.self, value: &_range)
      case 3: try setter.decodeRepeatedMessageField(fieldType: Apipb_QuerySort.self, value: &_sort)
      case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_limit)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_offset)
      case 6: try setter.decodeSingularMessageField(fieldType: Apipb_QueryGroup.self, value: &_groupBy)
      case 7: try setter.decodeRepeatedMessageField(fieldType: Apipb_Aggregation.self, value: &_aggregations)
      case 8: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_rawQueries)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if !_events.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _events, fieldNumber: 1)
      }
      if let v = _range {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_sort.isEmpty {
        try visitor.visitRepeatedMessageField(value: _sort, fieldNumber: 3)
      }
      if _limit != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _limit, fieldNumber: 4)
      }
      if _offset != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _offset, fieldNumber: 5)
      }
      if let v = _groupBy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_aggregations.isEmpty {
        try visitor.visitRepeatedMessageField(value: _aggregations, fieldNumber: 7)
      }
      if !_rawQueries.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: _rawQueries, fieldNumber: 8)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _events != other._events {return false}
      if _range != other._range {return false}
      if _sort != other._sort {return false}
      if _limit != other._limit {return false}
      if _offset != other._offset {return false}
      if _groupBy != other._groupBy {return false}
      if _aggregations != other._aggregations {return false}
      if _rawQueries != other._rawQueries {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._events = _events
      clone._range = _range
      clone._sort = _sort
      clone._limit = _limit
      clone._offset = _offset
      clone._groupBy = _groupBy
      clone._aggregations = _aggregations
      clone._rawQueries = _rawQueries
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var events: [String] {
    get {return _storage._events}
    set {_uniqueStorage()._events = newValue}
  }

  public var range: Apipb_TimeRange {
    get {return _storage._range ?? Apipb_TimeRange()}
    set {_uniqueStorage()._range = newValue}
  }
  public var hasRange: Bool {
    return _storage._range != nil
  }
  public mutating func clearRange() {
    return _storage._range = nil
  }

  public var sort: [Apipb_QuerySort] {
    get {return _storage._sort}
    set {_uniqueStorage()._sort = newValue}
  }

  public var limit: Int32 {
    get {return _storage._limit}
    set {_uniqueStorage()._limit = newValue}
  }

  public var offset: Int32 {
    get {return _storage._offset}
    set {_uniqueStorage()._offset = newValue}
  }

  public var groupBy: Apipb_QueryGroup {
    get {return _storage._groupBy ?? Apipb_QueryGroup()}
    set {_uniqueStorage()._groupBy = newValue}
  }
  public var hasGroupBy: Bool {
    return _storage._groupBy != nil
  }
  public mutating func clearGroupBy() {
    return _storage._groupBy = nil
  }

  public var aggregations: [Apipb_Aggregation] {
    get {return _storage._aggregations}
    set {_uniqueStorage()._aggregations = newValue}
  }

  public var rawQueries: [Data] {
    get {return _storage._rawQueries}
    set {_uniqueStorage()._rawQueries = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_Query) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_AnalyzeRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_AnalyzeRequest"}
  public var protoMessageName: String {return "AnalyzeRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "child_id", json: "childId", swift: "childId"),
    2: .unique(proto: "profile_id", json: "profileId", swift: "profileId"),
    3: .unique(proto: "use_app_data", json: "useAppData", swift: "useAppData"),
    6: .same(proto: "query", swift: "query"),
    7: .same(proto: "games", swift: "games"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_AnalyzeRequest
    var _childId: String = ""
    var _profileId: String = ""
    var _useAppData: Bool = false
    var _query: Apipb_Query? = nil
    var _games: [Apipb_GameWithVersions] = []

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_childId)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_profileId)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_useAppData)
      case 6: try setter.decodeSingularMessageField(fieldType: Apipb_Query.self, value: &_query)
      case 7: try setter.decodeRepeatedMessageField(fieldType: Apipb_GameWithVersions.self, value: &_games)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _childId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _childId, fieldNumber: 1)
      }
      if _profileId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _profileId, fieldNumber: 2)
      }
      if _useAppData != false {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: _useAppData, fieldNumber: 3)
      }
      if let v = _query {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_games.isEmpty {
        try visitor.visitRepeatedMessageField(value: _games, fieldNumber: 7)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _childId != other._childId {return false}
      if _profileId != other._profileId {return false}
      if _useAppData != other._useAppData {return false}
      if _query != other._query {return false}
      if _games != other._games {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._childId = _childId
      clone._profileId = _profileId
      clone._useAppData = _useAppData
      clone._query = _query
      clone._games = _games
      return clone
    }
  }

  private var _storage = _StorageClass()


  ///  ChildId
  public var childId: String {
    get {return _storage._childId}
    set {_uniqueStorage()._childId = newValue}
  }

  ///  ProfileId
  public var profileId: String {
    get {return _storage._profileId}
    set {_uniqueStorage()._profileId = newValue}
  }

  ///  UseAppData changes data source
  public var useAppData: Bool {
    get {return _storage._useAppData}
    set {_uniqueStorage()._useAppData = newValue}
  }

  ///  Query is calculation query
  public var query: Apipb_Query {
    get {return _storage._query ?? Apipb_Query()}
    set {_uniqueStorage()._query = newValue}
  }
  public var hasQuery: Bool {
    return _storage._query != nil
  }
  public mutating func clearQuery() {
    return _storage._query = nil
  }

  ///  Games are the compute this request on
  public var games: [Apipb_GameWithVersions] {
    get {return _storage._games}
    set {_uniqueStorage()._games = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_AnalyzeRequest) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_AnalyzeResult: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_AnalyzeResult"}
  public var protoMessageName: String {return "AnalyzeResult"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "request", swift: "request"),
    2: .same(proto: "data", swift: "data"),
    3: .unique(proto: "created_at", json: "createdAt", swift: "createdAt"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_AnalyzeResult
    var _request: Apipb_AnalyzeRequest? = nil
    var _data: Apipb_DataSet? = nil
    var _createdAt: Int64 = 0

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Apipb_AnalyzeRequest.self, value: &_request)
      case 2: try setter.decodeSingularMessageField(fieldType: Apipb_DataSet.self, value: &_data)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_createdAt)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _createdAt != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _createdAt, fieldNumber: 3)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _request != other._request {return false}
      if _data != other._data {return false}
      if _createdAt != other._createdAt {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._request = _request
      clone._data = _data
      clone._createdAt = _createdAt
      return clone
    }
  }

  private var _storage = _StorageClass()


  ///  Request
  public var request: Apipb_AnalyzeRequest {
    get {return _storage._request ?? Apipb_AnalyzeRequest()}
    set {_uniqueStorage()._request = newValue}
  }
  public var hasRequest: Bool {
    return _storage._request != nil
  }
  public mutating func clearRequest() {
    return _storage._request = nil
  }

  ///  Data
  public var data: Apipb_DataSet {
    get {return _storage._data ?? Apipb_DataSet()}
    set {_uniqueStorage()._data = newValue}
  }
  public var hasData: Bool {
    return _storage._data != nil
  }
  public mutating func clearData() {
    return _storage._data = nil
  }

  ///  Created At
  public var createdAt: Int64 {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_AnalyzeResult) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///  Active Users
public struct Apipb_ActiveUsersRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_ActiveUsersRequest"}
  public var protoMessageName: String {return "ActiveUsersRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "type", swift: "type"),
    2: .same(proto: "dates", swift: "dates"),
    3: .unique(proto: "app_id", json: "appId", swift: "appId"),
  ]


  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case montly // = 0
    case daily // = 1
    case new // = 2
    case total // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .montly
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .montly
      case 1: self = .daily
      case 2: self = .new
      case 3: self = .total
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "montly": self = .montly
      case "daily": self = .daily
      case "new": self = .new
      case "total": self = .total
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "MONTLY": self = .montly
      case "DAILY": self = .daily
      case "NEW": self = .new
      case "TOTAL": self = .total
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "MONTLY": self = .montly
      case "DAILY": self = .daily
      case "NEW": self = .new
      case "TOTAL": self = .total
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .montly: return 0
        case .daily: return 1
        case .new: return 2
        case .total: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .montly: return "\"MONTLY\""
        case .daily: return "\"DAILY\""
        case .new: return "\"NEW\""
        case .total: return "\"TOTAL\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .montly: return ".montly"
        case .daily: return ".daily"
        case .new: return ".new"
        case .total: return ".total"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public var type: Apipb_ActiveUsersRequest.TypeEnum = Apipb_ActiveUsersRequest.TypeEnum.montly

  public var dates: [Int64] = []

  public var appId: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: Apipb_ActiveUsersRequest.TypeEnum.self, value: &type)
    case 2: try setter.decodePackedField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &dates)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &appId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if type != Apipb_ActiveUsersRequest.TypeEnum.montly {
      try visitor.visitSingularField(fieldType: Apipb_ActiveUsersRequest.TypeEnum.self, value: type, fieldNumber: 1)
    }
    if !dates.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: dates, fieldNumber: 2)
    }
    if appId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: appId, fieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_ActiveUsersRequest) -> Bool {
    if type != other.type {return false}
    if dates != other.dates {return false}
    if appId != other.appId {return false}
    return true
  }
}

public struct Apipb_ActiveUsersResult: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_ActiveUsersResult"}
  public var protoMessageName: String {return "ActiveUsersResult"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "request", swift: "request"),
    2: .same(proto: "data", swift: "data"),
    3: .unique(proto: "created_at", json: "createdAt", swift: "createdAt"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_ActiveUsersResult
    var _request: Apipb_ActiveUsersRequest? = nil
    var _data: Apipb_DataSet? = nil
    var _createdAt: Int64 = 0

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Apipb_ActiveUsersRequest.self, value: &_request)
      case 2: try setter.decodeSingularMessageField(fieldType: Apipb_DataSet.self, value: &_data)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_createdAt)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _createdAt != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _createdAt, fieldNumber: 3)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _request != other._request {return false}
      if _data != other._data {return false}
      if _createdAt != other._createdAt {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._request = _request
      clone._data = _data
      clone._createdAt = _createdAt
      return clone
    }
  }

  private var _storage = _StorageClass()


  ///  Request
  public var request: Apipb_ActiveUsersRequest {
    get {return _storage._request ?? Apipb_ActiveUsersRequest()}
    set {_uniqueStorage()._request = newValue}
  }
  public var hasRequest: Bool {
    return _storage._request != nil
  }
  public mutating func clearRequest() {
    return _storage._request = nil
  }

  ///  Data
  public var data: Apipb_DataSet {
    get {return _storage._data ?? Apipb_DataSet()}
    set {_uniqueStorage()._data = newValue}
  }
  public var hasData: Bool {
    return _storage._data != nil
  }
  public mutating func clearData() {
    return _storage._data = nil
  }

  ///  Created At
  public var createdAt: Int64 {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_ActiveUsersResult) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Retention
public struct Apipb_RetentionRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_RetentionRequest"}
  public var protoMessageName: String {return "RetentionRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "type", swift: "type"),
    2: .same(proto: "dates", swift: "dates"),
    3: .unique(proto: "app_id", json: "appId", swift: "appId"),
  ]


  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case one // = 0
    case seven // = 1
    case thirty // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .one
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .one
      case 1: self = .seven
      case 2: self = .thirty
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "one": self = .one
      case "seven": self = .seven
      case "thirty": self = .thirty
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "ONE": self = .one
      case "SEVEN": self = .seven
      case "THIRTY": self = .thirty
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "ONE": self = .one
      case "SEVEN": self = .seven
      case "THIRTY": self = .thirty
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .one: return 0
        case .seven: return 1
        case .thirty: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .one: return "\"ONE\""
        case .seven: return "\"SEVEN\""
        case .thirty: return "\"THIRTY\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .one: return ".one"
        case .seven: return ".seven"
        case .thirty: return ".thirty"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public var type: Apipb_RetentionRequest.TypeEnum = Apipb_RetentionRequest.TypeEnum.one

  public var dates: [Int64] = []

  public var appId: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: Apipb_RetentionRequest.TypeEnum.self, value: &type)
    case 2: try setter.decodePackedField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &dates)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &appId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if type != Apipb_RetentionRequest.TypeEnum.one {
      try visitor.visitSingularField(fieldType: Apipb_RetentionRequest.TypeEnum.self, value: type, fieldNumber: 1)
    }
    if !dates.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: dates, fieldNumber: 2)
    }
    if appId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: appId, fieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_RetentionRequest) -> Bool {
    if type != other.type {return false}
    if dates != other.dates {return false}
    if appId != other.appId {return false}
    return true
  }
}

public struct Apipb_RetentionResult: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_RetentionResult"}
  public var protoMessageName: String {return "RetentionResult"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "request", swift: "request"),
    2: .same(proto: "data", swift: "data"),
    3: .unique(proto: "created_at", json: "createdAt", swift: "createdAt"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_RetentionResult
    var _request: Apipb_RetentionRequest? = nil
    var _data: Apipb_DataSet? = nil
    var _createdAt: Int64 = 0

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Apipb_RetentionRequest.self, value: &_request)
      case 2: try setter.decodeSingularMessageField(fieldType: Apipb_DataSet.self, value: &_data)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_createdAt)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _createdAt != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _createdAt, fieldNumber: 3)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _request != other._request {return false}
      if _data != other._data {return false}
      if _createdAt != other._createdAt {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._request = _request
      clone._data = _data
      clone._createdAt = _createdAt
      return clone
    }
  }

  private var _storage = _StorageClass()


  ///  Request
  public var request: Apipb_RetentionRequest {
    get {return _storage._request ?? Apipb_RetentionRequest()}
    set {_uniqueStorage()._request = newValue}
  }
  public var hasRequest: Bool {
    return _storage._request != nil
  }
  public mutating func clearRequest() {
    return _storage._request = nil
  }

  ///  Data
  public var data: Apipb_DataSet {
    get {return _storage._data ?? Apipb_DataSet()}
    set {_uniqueStorage()._data = newValue}
  }
  public var hasData: Bool {
    return _storage._data != nil
  }
  public mutating func clearData() {
    return _storage._data = nil
  }

  ///  Created At
  public var createdAt: Int64 {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_RetentionResult) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_InactiveUsersRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_InactiveUsersRequest"}
  public var protoMessageName: String {return "InactiveUsersRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "app_id", json: "appId", swift: "appId"),
    2: .unique(proto: "inactive_during", json: "inactiveDuring", swift: "inactiveDuring"),
    3: .unique(proto: "active_during", json: "activeDuring", swift: "activeDuring"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_InactiveUsersRequest
    var _appId: String = ""
    var _inactiveDuring: Apipb_TimeRange? = nil
    var _activeDuring: Apipb_TimeRange? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_appId)
      case 2: try setter.decodeSingularMessageField(fieldType: Apipb_TimeRange.self, value: &_inactiveDuring)
      case 3: try setter.decodeSingularMessageField(fieldType: Apipb_TimeRange.self, value: &_activeDuring)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _appId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _appId, fieldNumber: 1)
      }
      if let v = _inactiveDuring {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _activeDuring {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _appId != other._appId {return false}
      if _inactiveDuring != other._inactiveDuring {return false}
      if _activeDuring != other._activeDuring {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._appId = _appId
      clone._inactiveDuring = _inactiveDuring
      clone._activeDuring = _activeDuring
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var appId: String {
    get {return _storage._appId}
    set {_uniqueStorage()._appId = newValue}
  }

  public var inactiveDuring: Apipb_TimeRange {
    get {return _storage._inactiveDuring ?? Apipb_TimeRange()}
    set {_uniqueStorage()._inactiveDuring = newValue}
  }
  public var hasInactiveDuring: Bool {
    return _storage._inactiveDuring != nil
  }
  public mutating func clearInactiveDuring() {
    return _storage._inactiveDuring = nil
  }

  public var activeDuring: Apipb_TimeRange {
    get {return _storage._activeDuring ?? Apipb_TimeRange()}
    set {_uniqueStorage()._activeDuring = newValue}
  }
  public var hasActiveDuring: Bool {
    return _storage._activeDuring != nil
  }
  public mutating func clearActiveDuring() {
    return _storage._activeDuring = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_InactiveUsersRequest) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_GetActiveUsersRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GetActiveUsersRequest"}
  public var protoMessageName: String {return "GetActiveUsersRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "app_id", json: "appId", swift: "appId"),
    2: .same(proto: "period", swift: "period"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_GetActiveUsersRequest
    var _appId: String = ""
    var _period: Apipb_TimeRange? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_appId)
      case 2: try setter.decodeSingularMessageField(fieldType: Apipb_TimeRange.self, value: &_period)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _appId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _appId, fieldNumber: 1)
      }
      if let v = _period {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _appId != other._appId {return false}
      if _period != other._period {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._appId = _appId
      clone._period = _period
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var appId: String {
    get {return _storage._appId}
    set {_uniqueStorage()._appId = newValue}
  }

  public var period: Apipb_TimeRange {
    get {return _storage._period ?? Apipb_TimeRange()}
    set {_uniqueStorage()._period = newValue}
  }
  public var hasPeriod: Bool {
    return _storage._period != nil
  }
  public mutating func clearPeriod() {
    return _storage._period = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GetActiveUsersRequest) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_ActiveOnRangeRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_ActiveOnRangeRequest"}
  public var protoMessageName: String {return "ActiveOnRangeRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "range", swift: "range"),
    2: .unique(proto: "country_codes", json: "countryCodes", swift: "countryCodes"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_ActiveOnRangeRequest
    var _range: Apipb_TimeRange? = nil
    var _countryCodes: [String] = []

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Apipb_TimeRange.self, value: &_range)
      case 2: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_countryCodes)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _range {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_countryCodes.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _countryCodes, fieldNumber: 2)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _range != other._range {return false}
      if _countryCodes != other._countryCodes {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._range = _range
      clone._countryCodes = _countryCodes
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var range: Apipb_TimeRange {
    get {return _storage._range ?? Apipb_TimeRange()}
    set {_uniqueStorage()._range = newValue}
  }
  public var hasRange: Bool {
    return _storage._range != nil
  }
  public mutating func clearRange() {
    return _storage._range = nil
  }

  public var countryCodes: [String] {
    get {return _storage._countryCodes}
    set {_uniqueStorage()._countryCodes = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_ActiveOnRangeRequest) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_GameInfoResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GameInfoResponse"}
  public var protoMessageName: String {return "GameInfoResponse"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "game_id", json: "gameId", swift: "gameId"),
    2: .same(proto: "events", swift: "events"),
  ]


  public enum FieldType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case string // = 1
    case integer // = 2
    case float // = 3
    case bool // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .string
      case 2: self = .integer
      case 3: self = .float
      case 4: self = .bool
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "unknown": self = .unknown
      case "string": self = .string
      case "integer": self = .integer
      case "float": self = .float
      case "bool": self = .bool
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "UNKNOWN": self = .unknown
      case "STRING": self = .string
      case "INTEGER": self = .integer
      case "FLOAT": self = .float
      case "BOOL": self = .bool
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "UNKNOWN": self = .unknown
      case "STRING": self = .string
      case "INTEGER": self = .integer
      case "FLOAT": self = .float
      case "BOOL": self = .bool
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .unknown: return 0
        case .string: return 1
        case .integer: return 2
        case .float: return 3
        case .bool: return 4
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .unknown: return "\"UNKNOWN\""
        case .string: return "\"STRING\""
        case .integer: return "\"INTEGER\""
        case .float: return "\"FLOAT\""
        case .bool: return "\"BOOL\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .unknown: return ".unknown"
        case .string: return ".string"
        case .integer: return ".integer"
        case .float: return ".float"
        case .bool: return ".bool"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public struct FieldInfo: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "Apipb_GameInfoResponse.FieldInfo"}
    public var protoMessageName: String {return "FieldInfo"}
    public var protoPackageName: String {return "apipb"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      1: .same(proto: "name", swift: "name"),
      2: .same(proto: "type", swift: "type"),
    ]


    public var name: String = ""

    public var type: Apipb_GameInfoResponse.FieldType = Apipb_GameInfoResponse.FieldType.unknown

    public init() {}

    public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &name)
      case 2: try setter.decodeSingularField(fieldType: Apipb_GameInfoResponse.FieldType.self, value: &type)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
      if name != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: name, fieldNumber: 1)
      }
      if type != Apipb_GameInfoResponse.FieldType.unknown {
        try visitor.visitSingularField(fieldType: Apipb_GameInfoResponse.FieldType.self, value: type, fieldNumber: 2)
      }
    }

    public func _protoc_generated_isEqualTo(other: Apipb_GameInfoResponse.FieldInfo) -> Bool {
      if name != other.name {return false}
      if type != other.type {return false}
      return true
    }
  }

  public struct EventInfo: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "Apipb_GameInfoResponse.EventInfo"}
    public var protoMessageName: String {return "EventInfo"}
    public var protoPackageName: String {return "apipb"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      1: .same(proto: "name", swift: "name"),
      2: .same(proto: "fields", swift: "fields"),
    ]


    public var name: String = ""

    public var fields: [Apipb_GameInfoResponse.FieldInfo] = []

    public init() {}

    public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &name)
      case 2: try setter.decodeRepeatedMessageField(fieldType: Apipb_GameInfoResponse.FieldInfo.self, value: &fields)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
      if name != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: name, fieldNumber: 1)
      }
      if !fields.isEmpty {
        try visitor.visitRepeatedMessageField(value: fields, fieldNumber: 2)
      }
    }

    public func _protoc_generated_isEqualTo(other: Apipb_GameInfoResponse.EventInfo) -> Bool {
      if name != other.name {return false}
      if fields != other.fields {return false}
      return true
    }
  }

  public var gameId: String = ""

  public var events: [Apipb_GameInfoResponse.EventInfo] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &gameId)
    case 2: try setter.decodeRepeatedMessageField(fieldType: Apipb_GameInfoResponse.EventInfo.self, value: &events)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if gameId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: gameId, fieldNumber: 1)
    }
    if !events.isEmpty {
      try visitor.visitRepeatedMessageField(value: events, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GameInfoResponse) -> Bool {
    if gameId != other.gameId {return false}
    if events != other.events {return false}
    return true
  }
}

public struct Apipb_AppDataInfoReq: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_AppDataInfoReq"}
  public var protoMessageName: String {return "AppDataInfoReq"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames = FieldNameMap()


  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
  }

  public func _protoc_generated_isEqualTo(other: Apipb_AppDataInfoReq) -> Bool {
    return true
  }
}
