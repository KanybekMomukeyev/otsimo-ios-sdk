/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: datasetmodels.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

fileprivate let _protobuf_package = "apipb"

public struct Apipb_Column: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Column"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "name"),
  ]

  public var type: Apipb_Column.TypeEnum = Apipb_Column.TypeEnum.string

  public var name: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum TypeEnum: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case string // = 0
    case integer // = 1
    case real // = 2
    case date // = 3
    case dateTime // = 4
    case timeOfDay // = 5
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "STRING"),
      1: .same(proto: "INTEGER"),
      2: .same(proto: "REAL"),
      3: .same(proto: "DATE"),
      4: .same(proto: "DATE_TIME"),
      5: .same(proto: "TIME_OF_DAY"),
    ]

    public init() {
      self = .string
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .string
      case 1: self = .integer
      case 2: self = .real
      case 3: self = .date
      case 4: self = .dateTime
      case 5: self = .timeOfDay
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .string: return 0
      case .integer: return 1
      case .real: return 2
      case .date: return 3
      case .dateTime: return 4
      case .timeOfDay: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &type)
      case 2: try decoder.decodeSingularStringField(value: &name)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if type != Apipb_Column.TypeEnum.string {
      try visitor.visitSingularEnumField(value: type, fieldNumber: 1)
    }
    if !name.isEmpty {
      try visitor.visitSingularStringField(value: name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_Column) -> Bool {
    if type != other.type {return false}
    if name != other.name {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_TimeOfDay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TimeOfDay"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hours"),
    2: .same(proto: "minutes"),
    3: .same(proto: "seconds"),
    4: .same(proto: "milliseconds"),
  ]

  public var hours: Int32 = 0

  public var minutes: Int32 = 0

  public var seconds: Int32 = 0

  public var milliseconds: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &hours)
      case 2: try decoder.decodeSingularInt32Field(value: &minutes)
      case 3: try decoder.decodeSingularInt32Field(value: &seconds)
      case 4: try decoder.decodeSingularInt32Field(value: &milliseconds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if hours != 0 {
      try visitor.visitSingularInt32Field(value: hours, fieldNumber: 1)
    }
    if minutes != 0 {
      try visitor.visitSingularInt32Field(value: minutes, fieldNumber: 2)
    }
    if seconds != 0 {
      try visitor.visitSingularInt32Field(value: seconds, fieldNumber: 3)
    }
    if milliseconds != 0 {
      try visitor.visitSingularInt32Field(value: milliseconds, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_TimeOfDay) -> Bool {
    if hours != other.hours {return false}
    if minutes != other.minutes {return false}
    if seconds != other.seconds {return false}
    if milliseconds != other.milliseconds {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_RowValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RowValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "str"),
    2: .same(proto: "int"),
    3: .same(proto: "real"),
    4: .same(proto: "date"),
    5: .standard(proto: "date_of_time"),
    6: .standard(proto: "time_of_day"),
  ]

  private class _StorageClass {
    var _value: Apipb_RowValue.OneOf_Value?

    init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var str: String {
    get {
      if case .str(let v)? = _storage._value {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._value = .str(newValue)
    }
  }

  public var int: Int32 {
    get {
      if case .int(let v)? = _storage._value {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._value = .int(newValue)
    }
  }

  public var real: Float {
    get {
      if case .real(let v)? = _storage._value {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._value = .real(newValue)
    }
  }

  public var date: Int64 {
    get {
      if case .date(let v)? = _storage._value {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._value = .date(newValue)
    }
  }

  public var dateOfTime: Int64 {
    get {
      if case .dateOfTime(let v)? = _storage._value {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._value = .dateOfTime(newValue)
    }
  }

  public var timeOfDay: Apipb_TimeOfDay {
    get {
      if case .timeOfDay(let v)? = _storage._value {
        return v
      }
      return Apipb_TimeOfDay()
    }
    set {
      _uniqueStorage()._value = .timeOfDay(newValue)
    }
  }

  public var value: OneOf_Value? {
    get {return _storage._value}
    set {
      _uniqueStorage()._value = newValue
    }
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Value: Equatable {
    case str(String)
    case int(Int32)
    case real(Float)
    case date(Int64)
    case dateOfTime(Int64)
    case timeOfDay(Apipb_TimeOfDay)

    public static func ==(lhs: Apipb_RowValue.OneOf_Value, rhs: Apipb_RowValue.OneOf_Value) -> Bool {
      switch (lhs, rhs) {
      case (.str(let l), .str(let r)): return l == r
      case (.int(let l), .int(let r)): return l == r
      case (.real(let l), .real(let r)): return l == r
      case (.date(let l), .date(let r)): return l == r
      case (.dateOfTime(let l), .dateOfTime(let r)): return l == r
      case (.timeOfDay(let l), .timeOfDay(let r)): return l == r
      default: return false
      }
    }

    fileprivate init?<T: SwiftProtobuf.Decoder>(byDecodingFrom decoder: inout T, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1:
        var value = String()
        try decoder.decodeSingularStringField(value: &value)
        self = .str(value)
        return
      case 2:
        var value = Int32()
        try decoder.decodeSingularInt32Field(value: &value)
        self = .int(value)
        return
      case 3:
        var value = Float()
        try decoder.decodeSingularFloatField(value: &value)
        self = .real(value)
        return
      case 4:
        var value = Int64()
        try decoder.decodeSingularInt64Field(value: &value)
        self = .date(value)
        return
      case 5:
        var value = Int64()
        try decoder.decodeSingularInt64Field(value: &value)
        self = .dateOfTime(value)
        return
      case 6:
        var value: Apipb_TimeOfDay?
        try decoder.decodeSingularMessageField(value: &value)
        if let value = value {
          self = .timeOfDay(value)
          return
        }
      default:
        break
      }
      return nil
    }

    fileprivate func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V, start: Int, end: Int) throws {
      switch self {
      case .str(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularStringField(value: v, fieldNumber: 1)
        }
      case .int(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
        }
      case .real(let v):
        if start <= 3 && 3 < end {
          try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
        }
      case .date(let v):
        if start <= 4 && 4 < end {
          try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
        }
      case .dateOfTime(let v):
        if start <= 5 && 5 < end {
          try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
        }
      case .timeOfDay(let v):
        if start <= 6 && 6 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
        }
      }
    }
  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1...6:
          if _storage._value != nil {
            try decoder.handleConflictingOneOf()
          }
          _storage._value = try Apipb_RowValue.OneOf_Value(byDecodingFrom: &decoder, fieldNumber: fieldNumber)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      try _storage._value?.traverse(visitor: &visitor, start: 1, end: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_RowValue) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_Row: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Row"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  public var values: [Apipb_RowValue] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &values)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !values.isEmpty {
      try visitor.visitRepeatedMessageField(value: values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_Row) -> Bool {
    if values != other.values {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_DataSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DataSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
    5: .same(proto: "columns"),
    6: .same(proto: "rows"),
  ]

  public var label: String = ""

  public var columns: [Apipb_Column] = []

  public var rows: [Apipb_Row] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &label)
      case 5: try decoder.decodeRepeatedMessageField(value: &columns)
      case 6: try decoder.decodeRepeatedMessageField(value: &rows)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !label.isEmpty {
      try visitor.visitSingularStringField(value: label, fieldNumber: 1)
    }
    if !columns.isEmpty {
      try visitor.visitRepeatedMessageField(value: columns, fieldNumber: 5)
    }
    if !rows.isEmpty {
      try visitor.visitRepeatedMessageField(value: rows, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_DataSet) -> Bool {
    if label != other.label {return false}
    if columns != other.columns {return false}
    if rows != other.rows {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
