/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: datasetmodels.proto
 *
 */

import Foundation
import SwiftProtobuf


public struct Apipb_Column: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_Column"}
  public var protoMessageName: String {return "Column"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "type", swift: "type"),
    2: .same(proto: "name", swift: "name"),
  ]


  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case string // = 0
    case integer // = 1
    case real // = 2
    case date // = 3
    case dateTime // = 4
    case timeOfDay // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .string
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .string
      case 1: self = .integer
      case 2: self = .real
      case 3: self = .date
      case 4: self = .dateTime
      case 5: self = .timeOfDay
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "string": self = .string
      case "integer": self = .integer
      case "real": self = .real
      case "date": self = .date
      case "dateTime": self = .dateTime
      case "timeOfDay": self = .timeOfDay
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "STRING": self = .string
      case "INTEGER": self = .integer
      case "REAL": self = .real
      case "DATE": self = .date
      case "DATE_TIME": self = .dateTime
      case "TIME_OF_DAY": self = .timeOfDay
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "STRING": self = .string
      case "INTEGER": self = .integer
      case "REAL": self = .real
      case "DATE": self = .date
      case "DATE_TIME": self = .dateTime
      case "TIME_OF_DAY": self = .timeOfDay
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .string: return 0
        case .integer: return 1
        case .real: return 2
        case .date: return 3
        case .dateTime: return 4
        case .timeOfDay: return 5
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .string: return "\"STRING\""
        case .integer: return "\"INTEGER\""
        case .real: return "\"REAL\""
        case .date: return "\"DATE\""
        case .dateTime: return "\"DATE_TIME\""
        case .timeOfDay: return "\"TIME_OF_DAY\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .string: return ".string"
        case .integer: return ".integer"
        case .real: return ".real"
        case .date: return ".date"
        case .dateTime: return ".dateTime"
        case .timeOfDay: return ".timeOfDay"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public var type: Apipb_Column.TypeEnum = Apipb_Column.TypeEnum.string

  public var name: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: Apipb_Column.TypeEnum.self, value: &type)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &name)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if type != Apipb_Column.TypeEnum.string {
      try visitor.visitSingularField(fieldType: Apipb_Column.TypeEnum.self, value: type, fieldNumber: 1)
    }
    if name != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: name, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_Column) -> Bool {
    if type != other.type {return false}
    if name != other.name {return false}
    return true
  }
}

public struct Apipb_TimeOfDay: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_TimeOfDay"}
  public var protoMessageName: String {return "TimeOfDay"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "hours", swift: "hours"),
    2: .same(proto: "minutes", swift: "minutes"),
    3: .same(proto: "seconds", swift: "seconds"),
    4: .same(proto: "milliseconds", swift: "milliseconds"),
  ]


  public var hours: Int32 = 0

  public var minutes: Int32 = 0

  public var seconds: Int32 = 0

  public var milliseconds: Int32 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &hours)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &minutes)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &seconds)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &milliseconds)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if hours != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: hours, fieldNumber: 1)
    }
    if minutes != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: minutes, fieldNumber: 2)
    }
    if seconds != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: seconds, fieldNumber: 3)
    }
    if milliseconds != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: milliseconds, fieldNumber: 4)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_TimeOfDay) -> Bool {
    if hours != other.hours {return false}
    if minutes != other.minutes {return false}
    if seconds != other.seconds {return false}
    if milliseconds != other.milliseconds {return false}
    return true
  }
}

public struct Apipb_RowValue: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_RowValue"}
  public var protoMessageName: String {return "RowValue"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "str", swift: "str"),
    2: .same(proto: "int", swift: "int"),
    3: .same(proto: "real", swift: "real"),
    4: .same(proto: "date", swift: "date"),
    5: .unique(proto: "date_of_time", json: "dateOfTime", swift: "dateOfTime"),
    6: .unique(proto: "time_of_day", json: "timeOfDay", swift: "timeOfDay"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_RowValue
    var _value = Apipb_RowValue.OneOf_Value()

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1, 2, 3, 4, 5, 6: try _value.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      try _value.traverse(visitor: visitor, start: 1, end: 7)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _value != other._value {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._value = _value
      return clone
    }
  }

  private var _storage = _StorageClass()


  public enum OneOf_Value: ExpressibleByNilLiteral, SwiftProtobuf.OneofEnum {
    case str(String)
    case int(Int32)
    case real(Float)
    case date(Int64)
    case dateOfTime(Int64)
    case timeOfDay(Apipb_TimeOfDay)
    case None

    public static func ==(lhs: Apipb_RowValue.OneOf_Value, rhs: Apipb_RowValue.OneOf_Value) -> Bool {
      switch (lhs, rhs) {
      case (.str(let l), .str(let r)): return l == r
      case (.int(let l), .int(let r)): return l == r
      case (.real(let l), .real(let r)): return l == r
      case (.date(let l), .date(let r)): return l == r
      case (.dateOfTime(let l), .dateOfTime(let r)): return l == r
      case (.timeOfDay(let l), .timeOfDay(let r)): return l == r
      case (.None, .None): return true
      default: return false
      }
    }

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      if self != .None && setter.rejectConflictingOneof {
        throw SwiftProtobuf.DecodingError.duplicatedOneOf
      }
      switch protoFieldNumber {
      case 1:
        var value = String()
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &value)
        self = .str(value)
      case 2:
        var value = Int32()
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &value)
        self = .int(value)
      case 3:
        var value = Float()
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &value)
        self = .real(value)
      case 4:
        var value = Int64()
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &value)
        self = .date(value)
      case 5:
        var value = Int64()
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &value)
        self = .dateOfTime(value)
      case 6:
        var value: Apipb_TimeOfDay?
        try setter.decodeSingularMessageField(fieldType: Apipb_TimeOfDay.self, value: &value)
        if let value = value {
          self = .timeOfDay(value)
        }
      default:
        self = .None
      }
    }

    public func traverse(visitor: SwiftProtobuf.Visitor, start: Int, end: Int) throws {
      switch self {
      case .str(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, fieldNumber: 1)
        }
      case .int(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, fieldNumber: 2)
        }
      case .real(let v):
        if start <= 3 && 3 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: v, fieldNumber: 3)
        }
      case .date(let v):
        if start <= 4 && 4 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: v, fieldNumber: 4)
        }
      case .dateOfTime(let v):
        if start <= 5 && 5 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: v, fieldNumber: 5)
        }
      case .timeOfDay(let v):
        if start <= 6 && 6 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
        }
      case .None:
        break
      }
    }
  }

  public var str: String {
    get {
      if case .str(let v) = _storage._value {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._value = .str(newValue)
    }
  }

  public var int: Int32 {
    get {
      if case .int(let v) = _storage._value {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._value = .int(newValue)
    }
  }

  public var real: Float {
    get {
      if case .real(let v) = _storage._value {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._value = .real(newValue)
    }
  }

  public var date: Int64 {
    get {
      if case .date(let v) = _storage._value {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._value = .date(newValue)
    }
  }

  public var dateOfTime: Int64 {
    get {
      if case .dateOfTime(let v) = _storage._value {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._value = .dateOfTime(newValue)
    }
  }

  public var timeOfDay: Apipb_TimeOfDay {
    get {
      if case .timeOfDay(let v) = _storage._value {
        return v
      }
      return Apipb_TimeOfDay()
    }
    set {
      _uniqueStorage()._value = .timeOfDay(newValue)
    }
  }

  public var value: OneOf_Value {
    get {return _storage._value}
    set {
      _uniqueStorage()._value = newValue
    }
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_RowValue) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_Row: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_Row"}
  public var protoMessageName: String {return "Row"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "values", swift: "values"),
  ]


  public var values: [Apipb_RowValue] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Apipb_RowValue.self, value: &values)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !values.isEmpty {
      try visitor.visitRepeatedMessageField(value: values, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_Row) -> Bool {
    if values != other.values {return false}
    return true
  }
}

public struct Apipb_DataSet: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_DataSet"}
  public var protoMessageName: String {return "DataSet"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "label", swift: "label"),
    5: .same(proto: "columns", swift: "columns"),
    6: .same(proto: "rows", swift: "rows"),
  ]


  public var label: String = ""

  public var columns: [Apipb_Column] = []

  public var rows: [Apipb_Row] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &label)
    case 5: try setter.decodeRepeatedMessageField(fieldType: Apipb_Column.self, value: &columns)
    case 6: try setter.decodeRepeatedMessageField(fieldType: Apipb_Row.self, value: &rows)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if label != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: label, fieldNumber: 1)
    }
    if !columns.isEmpty {
      try visitor.visitRepeatedMessageField(value: columns, fieldNumber: 5)
    }
    if !rows.isEmpty {
      try visitor.visitRepeatedMessageField(value: rows, fieldNumber: 6)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_DataSet) -> Bool {
    if label != other.label {return false}
    if columns != other.columns {return false}
    if rows != other.rows {return false}
    return true
  }
}
