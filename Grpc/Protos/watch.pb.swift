/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: watch.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

fileprivate let _protobuf_package = "apipb"

public struct Apipb_EmitRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EmitRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "profile_id"),
    2: .same(proto: "event"),
  ]

  private class _StorageClass {
    var _profileId: String = ""
    var _event: Apipb_WatchEvent? = nil

    init() {}

    init(copying source: _StorageClass) {
      _profileId = source._profileId
      _event = source._event
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var profileId: String {
    get {return _storage._profileId}
    set {_uniqueStorage()._profileId = newValue}
  }

  public var event: Apipb_WatchEvent {
    get {return _storage._event ?? Apipb_WatchEvent()}
    set {_uniqueStorage()._event = newValue}
  }
  public var hasEvent: Bool {
    return _storage._event != nil
  }
  public mutating func clearEvent() {
    return _storage._event = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._profileId)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._event)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._profileId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._profileId, fieldNumber: 1)
      }
      if let v = _storage._event {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_EmitRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._profileId != other_storage._profileId {return false}
        if _storage._event != other_storage._event {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///  TODO add something    
public struct Apipb_EmitResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EmitResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_EmitResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_WatchRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WatchRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "profile_id"),
  ]

  ///  profile id is for Create request
  public var profileId: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &profileId)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !profileId.isEmpty {
      try visitor.visitSingularStringField(value: profileId, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_WatchRequest) -> Bool {
    if profileId != other.profileId {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_WatchEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WatchEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "profile_id"),
    3: .standard(proto: "child_id"),
    4: .standard(proto: "game_id"),
  ]

  public var type: Apipb_WatchEvent.EventType = Apipb_WatchEvent.EventType.profileUpdated

  public var profileId: String = ""

  public var childId: String = ""

  public var gameId: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum EventType: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case profileUpdated // = 0
    case childUpdated // = 1
    case childGamesUpdated // = 2
    case childSoundUpdated // = 3
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "PROFILE_UPDATED"),
      1: .same(proto: "CHILD_UPDATED"),
      2: .same(proto: "CHILD_GAMES_UPDATED"),
      3: .same(proto: "CHILD_SOUND_UPDATED"),
    ]

    public init() {
      self = .profileUpdated
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .profileUpdated
      case 1: self = .childUpdated
      case 2: self = .childGamesUpdated
      case 3: self = .childSoundUpdated
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .profileUpdated: return 0
      case .childUpdated: return 1
      case .childGamesUpdated: return 2
      case .childSoundUpdated: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &type)
      case 2: try decoder.decodeSingularStringField(value: &profileId)
      case 3: try decoder.decodeSingularStringField(value: &childId)
      case 4: try decoder.decodeSingularStringField(value: &gameId)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if type != Apipb_WatchEvent.EventType.profileUpdated {
      try visitor.visitSingularEnumField(value: type, fieldNumber: 1)
    }
    if !profileId.isEmpty {
      try visitor.visitSingularStringField(value: profileId, fieldNumber: 2)
    }
    if !childId.isEmpty {
      try visitor.visitSingularStringField(value: childId, fieldNumber: 3)
    }
    if !gameId.isEmpty {
      try visitor.visitSingularStringField(value: gameId, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_WatchEvent) -> Bool {
    if type != other.type {return false}
    if profileId != other.profileId {return false}
    if childId != other.childId {return false}
    if gameId != other.gameId {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_WatchResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WatchResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "created"),
    2: .same(proto: "canceled"),
    3: .same(proto: "event"),
  ]

  private class _StorageClass {
    var _created: Bool = false
    var _canceled: Bool = false
    var _event: Apipb_WatchEvent? = nil

    init() {}

    init(copying source: _StorageClass) {
      _created = source._created
      _canceled = source._canceled
      _event = source._event
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var created: Bool {
    get {return _storage._created}
    set {_uniqueStorage()._created = newValue}
  }

  public var canceled: Bool {
    get {return _storage._canceled}
    set {_uniqueStorage()._canceled = newValue}
  }

  public var event: Apipb_WatchEvent {
    get {return _storage._event ?? Apipb_WatchEvent()}
    set {_uniqueStorage()._event = newValue}
  }
  public var hasEvent: Bool {
    return _storage._event != nil
  }
  public mutating func clearEvent() {
    return _storage._event = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._created)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._canceled)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._event)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._created != false {
        try visitor.visitSingularBoolField(value: _storage._created, fieldNumber: 1)
      }
      if _storage._canceled != false {
        try visitor.visitSingularBoolField(value: _storage._canceled, fieldNumber: 2)
      }
      if let v = _storage._event {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_WatchResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._created != other_storage._created {return false}
        if _storage._canceled != other_storage._canceled {return false}
        if _storage._event != other_storage._event {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
