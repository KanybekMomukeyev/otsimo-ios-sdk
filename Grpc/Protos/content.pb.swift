/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: content.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

fileprivate let _protobuf_package = "apipb"

public struct Apipb_Content: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Content"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "slug"),
    2: .same(proto: "title"),
    3: .same(proto: "language"),
    4: .same(proto: "date"),
    5: .same(proto: "draft"),
    6: .standard(proto: "written_at"),
    7: .same(proto: "author"),
    8: .same(proto: "category"),
    9: .same(proto: "url"),
    10: .same(proto: "weight"),
    11: .same(proto: "keywords"),
    12: .standard(proto: "category_weight"),
    13: .same(proto: "markdown"),
    14: .same(proto: "params"),
  ]

  public var slug: String = ""

  public var title: String = ""

  public var language: String = ""

  public var date: Int64 = 0

  public var draft: Bool = false

  public var writtenAt: String = ""

  public var author: String = ""

  public var category: String = ""

  public var url: String = ""

  public var weight: Int32 = 0

  public var keywords: [String] = []

  public var categoryWeight: Int32 = 0

  public var markdown: Data = Data()

  public var params: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &slug)
      case 2: try decoder.decodeSingularStringField(value: &title)
      case 3: try decoder.decodeSingularStringField(value: &language)
      case 4: try decoder.decodeSingularInt64Field(value: &date)
      case 5: try decoder.decodeSingularBoolField(value: &draft)
      case 6: try decoder.decodeSingularStringField(value: &writtenAt)
      case 7: try decoder.decodeSingularStringField(value: &author)
      case 8: try decoder.decodeSingularStringField(value: &category)
      case 9: try decoder.decodeSingularStringField(value: &url)
      case 10: try decoder.decodeSingularInt32Field(value: &weight)
      case 11: try decoder.decodeRepeatedStringField(value: &keywords)
      case 12: try decoder.decodeSingularInt32Field(value: &categoryWeight)
      case 13: try decoder.decodeSingularBytesField(value: &markdown)
      case 14: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &params)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !slug.isEmpty {
      try visitor.visitSingularStringField(value: slug, fieldNumber: 1)
    }
    if !title.isEmpty {
      try visitor.visitSingularStringField(value: title, fieldNumber: 2)
    }
    if !language.isEmpty {
      try visitor.visitSingularStringField(value: language, fieldNumber: 3)
    }
    if date != 0 {
      try visitor.visitSingularInt64Field(value: date, fieldNumber: 4)
    }
    if draft != false {
      try visitor.visitSingularBoolField(value: draft, fieldNumber: 5)
    }
    if !writtenAt.isEmpty {
      try visitor.visitSingularStringField(value: writtenAt, fieldNumber: 6)
    }
    if !author.isEmpty {
      try visitor.visitSingularStringField(value: author, fieldNumber: 7)
    }
    if !category.isEmpty {
      try visitor.visitSingularStringField(value: category, fieldNumber: 8)
    }
    if !url.isEmpty {
      try visitor.visitSingularStringField(value: url, fieldNumber: 9)
    }
    if weight != 0 {
      try visitor.visitSingularInt32Field(value: weight, fieldNumber: 10)
    }
    if !keywords.isEmpty {
      try visitor.visitRepeatedStringField(value: keywords, fieldNumber: 11)
    }
    if categoryWeight != 0 {
      try visitor.visitSingularInt32Field(value: categoryWeight, fieldNumber: 12)
    }
    if !markdown.isEmpty {
      try visitor.visitSingularBytesField(value: markdown, fieldNumber: 13)
    }
    if !params.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: params, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_Content) -> Bool {
    if slug != other.slug {return false}
    if title != other.title {return false}
    if language != other.language {return false}
    if date != other.date {return false}
    if draft != other.draft {return false}
    if writtenAt != other.writtenAt {return false}
    if author != other.author {return false}
    if category != other.category {return false}
    if url != other.url {return false}
    if weight != other.weight {return false}
    if keywords != other.keywords {return false}
    if categoryWeight != other.categoryWeight {return false}
    if markdown != other.markdown {return false}
    if params != other.params {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_ContentListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentListRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "limit"),
    3: .same(proto: "category"),
    4: .same(proto: "offset"),
    5: .same(proto: "language"),
    6: .standard(proto: "only_html_url"),
    7: .same(proto: "sort"),
    8: .same(proto: "order"),
    10: .standard(proto: "profile_id"),
    11: .standard(proto: "client_version"),
    12: .same(proto: "categories"),
    13: .standard(proto: "except_categories"),
  ]

  public var status: Apipb_ContentListRequest.ListStatus = Apipb_ContentListRequest.ListStatus.both

  public var limit: Int32 = 0

  public var category: String = ""

  public var offset: Int32 = 0

  public var language: String = ""

  public var onlyHtmlURL: Bool = false

  public var sort: Apipb_ContentListRequest.SortBy = Apipb_ContentListRequest.SortBy.weight

  public var order: Apipb_ContentListRequest.SortOrder = Apipb_ContentListRequest.SortOrder.dsc

  public var profileId: String = ""

  public var clientVersion: String = ""

  public var categories: [String] = []

  public var exceptCategories: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum ListStatus: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case both // = 0
    case onlyDraft // = 1
    case onlyApproved // = 2
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "BOTH"),
      1: .same(proto: "ONLY_DRAFT"),
      2: .same(proto: "ONLY_APPROVED"),
    ]

    public init() {
      self = .both
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .both
      case 1: self = .onlyDraft
      case 2: self = .onlyApproved
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .both: return 0
      case .onlyDraft: return 1
      case .onlyApproved: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum SortBy: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case weight // = 0
    case time // = 1
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "WEIGHT"),
      1: .same(proto: "TIME"),
    ]

    public init() {
      self = .weight
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .weight
      case 1: self = .time
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .weight: return 0
      case .time: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum SortOrder: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case dsc // = 0
    case asc // = 1
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "DSC"),
      1: .same(proto: "ASC"),
    ]

    public init() {
      self = .dsc
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .dsc
      case 1: self = .asc
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .dsc: return 0
      case .asc: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &status)
      case 2: try decoder.decodeSingularInt32Field(value: &limit)
      case 3: try decoder.decodeSingularStringField(value: &category)
      case 4: try decoder.decodeSingularInt32Field(value: &offset)
      case 5: try decoder.decodeSingularStringField(value: &language)
      case 6: try decoder.decodeSingularBoolField(value: &onlyHtmlURL)
      case 7: try decoder.decodeSingularEnumField(value: &sort)
      case 8: try decoder.decodeSingularEnumField(value: &order)
      case 10: try decoder.decodeSingularStringField(value: &profileId)
      case 11: try decoder.decodeSingularStringField(value: &clientVersion)
      case 12: try decoder.decodeRepeatedStringField(value: &categories)
      case 13: try decoder.decodeRepeatedStringField(value: &exceptCategories)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if status != Apipb_ContentListRequest.ListStatus.both {
      try visitor.visitSingularEnumField(value: status, fieldNumber: 1)
    }
    if limit != 0 {
      try visitor.visitSingularInt32Field(value: limit, fieldNumber: 2)
    }
    if !category.isEmpty {
      try visitor.visitSingularStringField(value: category, fieldNumber: 3)
    }
    if offset != 0 {
      try visitor.visitSingularInt32Field(value: offset, fieldNumber: 4)
    }
    if !language.isEmpty {
      try visitor.visitSingularStringField(value: language, fieldNumber: 5)
    }
    if onlyHtmlURL != false {
      try visitor.visitSingularBoolField(value: onlyHtmlURL, fieldNumber: 6)
    }
    if sort != Apipb_ContentListRequest.SortBy.weight {
      try visitor.visitSingularEnumField(value: sort, fieldNumber: 7)
    }
    if order != Apipb_ContentListRequest.SortOrder.dsc {
      try visitor.visitSingularEnumField(value: order, fieldNumber: 8)
    }
    if !profileId.isEmpty {
      try visitor.visitSingularStringField(value: profileId, fieldNumber: 10)
    }
    if !clientVersion.isEmpty {
      try visitor.visitSingularStringField(value: clientVersion, fieldNumber: 11)
    }
    if !categories.isEmpty {
      try visitor.visitRepeatedStringField(value: categories, fieldNumber: 12)
    }
    if !exceptCategories.isEmpty {
      try visitor.visitRepeatedStringField(value: exceptCategories, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_ContentListRequest) -> Bool {
    if status != other.status {return false}
    if limit != other.limit {return false}
    if category != other.category {return false}
    if offset != other.offset {return false}
    if language != other.language {return false}
    if onlyHtmlURL != other.onlyHtmlURL {return false}
    if sort != other.sort {return false}
    if order != other.order {return false}
    if profileId != other.profileId {return false}
    if clientVersion != other.clientVersion {return false}
    if categories != other.categories {return false}
    if exceptCategories != other.exceptCategories {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_ContentListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentListResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contents"),
    2: .standard(proto: "asset_version"),
  ]

  public var contents: [Apipb_Content] = []

  public var assetVersion: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &contents)
      case 2: try decoder.decodeSingularInt32Field(value: &assetVersion)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !contents.isEmpty {
      try visitor.visitRepeatedMessageField(value: contents, fieldNumber: 1)
    }
    if assetVersion != 0 {
      try visitor.visitSingularInt32Field(value: assetVersion, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_ContentListResponse) -> Bool {
    if contents != other.contents {return false}
    if assetVersion != other.assetVersion {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_ContentGetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentGetRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "slug"),
  ]

  public var slug: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &slug)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !slug.isEmpty {
      try visitor.visitSingularStringField(value: slug, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_ContentGetRequest) -> Bool {
    if slug != other.slug {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
