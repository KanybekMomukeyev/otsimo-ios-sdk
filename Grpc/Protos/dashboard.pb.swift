/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: dashboard.proto
 *
 */

import Foundation
import SwiftProtobuf


public enum Otsimo_ChartType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case line // = 0
  case bar // = 1
  case pie // = 2
  case scatter // = 3
  case buble // = 4
  case radar // = 5
  case geo // = 6
  case timeline // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .line
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .line
    case 1: self = .bar
    case 2: self = .pie
    case 3: self = .scatter
    case 4: self = .buble
    case 5: self = .radar
    case 6: self = .geo
    case 7: self = .timeline
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "line": self = .line
    case "bar": self = .bar
    case "pie": self = .pie
    case "scatter": self = .scatter
    case "buble": self = .buble
    case "radar": self = .radar
    case "geo": self = .geo
    case "timeline": self = .timeline
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "LINE": self = .line
    case "BAR": self = .bar
    case "PIE": self = .pie
    case "SCATTER": self = .scatter
    case "BUBLE": self = .buble
    case "RADAR": self = .radar
    case "GEO": self = .geo
    case "TIMELINE": self = .timeline
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "LINE": self = .line
    case "BAR": self = .bar
    case "PIE": self = .pie
    case "SCATTER": self = .scatter
    case "BUBLE": self = .buble
    case "RADAR": self = .radar
    case "GEO": self = .geo
    case "TIMELINE": self = .timeline
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .line: return 0
      case .bar: return 1
      case .pie: return 2
      case .scatter: return 3
      case .buble: return 4
      case .radar: return 5
      case .geo: return 6
      case .timeline: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .line: return "\"LINE\""
      case .bar: return "\"BAR\""
      case .pie: return "\"PIE\""
      case .scatter: return "\"SCATTER\""
      case .buble: return "\"BUBLE\""
      case .radar: return "\"RADAR\""
      case .geo: return "\"GEO\""
      case .timeline: return "\"TIMELINE\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .line: return ".line"
      case .bar: return ".bar"
      case .pie: return ".pie"
      case .scatter: return ".scatter"
      case .buble: return ".buble"
      case .radar: return ".radar"
      case .geo: return ".geo"
      case .timeline: return ".timeline"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

public struct Otsimo_DashboardItems: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Otsimo_DashboardItems"}
  public var protoMessageName: String {return "DashboardItems"}
  public var protoPackageName: String {return "otsimo"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "profile_id", json: "profileId", swift: "profileId"),
    2: .unique(proto: "child_id", json: "childId", swift: "childId"),
    3: .unique(proto: "created_at", json: "createdAt", swift: "createdAt"),
    8: .same(proto: "items", swift: "items"),
  ]


  ///  ProfileId
  public var profileId: String = ""

  ///  ChildId
  public var childId: String = ""

  ///  Created At
  public var createdAt: Int64 = 0

  public var items: [Otsimo_Card] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &profileId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &childId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &createdAt)
    case 8: try setter.decodeRepeatedMessageField(fieldType: Otsimo_Card.self, value: &items)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if profileId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: profileId, fieldNumber: 1)
    }
    if childId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: childId, fieldNumber: 2)
    }
    if createdAt != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: createdAt, fieldNumber: 3)
    }
    if !items.isEmpty {
      try visitor.visitRepeatedMessageField(value: items, fieldNumber: 8)
    }
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_DashboardItems) -> Bool {
    if profileId != other.profileId {return false}
    if childId != other.childId {return false}
    if createdAt != other.createdAt {return false}
    if items != other.items {return false}
    return true
  }
}

public struct Otsimo_DashboardGetRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Otsimo_DashboardGetRequest"}
  public var protoMessageName: String {return "DashboardGetRequest"}
  public var protoPackageName: String {return "otsimo"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "profile_id", json: "profileId", swift: "profileId"),
    2: .unique(proto: "child_id", json: "childId", swift: "childId"),
    3: .unique(proto: "app_version", json: "appVersion", swift: "appVersion"),
    4: .same(proto: "language", swift: "language"),
    5: .unique(proto: "country_code", json: "countryCode", swift: "countryCode"),
    6: .unique(proto: "last_time_data_fetched", json: "lastTimeDataFetched", swift: "lastTimeDataFetched"),
  ]


  public var profileId: String = ""

  public var childId: String = ""

  public var appVersion: String = ""

  public var language: String = ""

  public var countryCode: String = ""

  public var lastTimeDataFetched: Int64 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &profileId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &childId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &appVersion)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &language)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &countryCode)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &lastTimeDataFetched)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if profileId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: profileId, fieldNumber: 1)
    }
    if childId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: childId, fieldNumber: 2)
    }
    if appVersion != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: appVersion, fieldNumber: 3)
    }
    if language != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: language, fieldNumber: 4)
    }
    if countryCode != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: countryCode, fieldNumber: 5)
    }
    if lastTimeDataFetched != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: lastTimeDataFetched, fieldNumber: 6)
    }
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_DashboardGetRequest) -> Bool {
    if profileId != other.profileId {return false}
    if childId != other.childId {return false}
    if appVersion != other.appVersion {return false}
    if language != other.language {return false}
    if countryCode != other.countryCode {return false}
    if lastTimeDataFetched != other.lastTimeDataFetched {return false}
    return true
  }
}

public struct Otsimo_CardDecoration: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Otsimo_CardDecoration"}
  public var protoMessageName: String {return "CardDecoration"}
  public var protoPackageName: String {return "otsimo"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "size", swift: "size"),
    2: .unique(proto: "background_style", json: "backgroundStyle", swift: "backgroundStyle"),
    3: .unique(proto: "image_url", json: "imageUrl", swift: "imageURL"),
    4: .unique(proto: "left_icon", json: "leftIcon", swift: "leftIcon"),
    5: .unique(proto: "right_icon", json: "rightIcon", swift: "rightIcon"),
  ]


  public enum Size: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    ///  Small is 1x1 block on iphone
    case small // = 0

    ///  Medium is 2x1 block on iphone
    case medium // = 1

    ///  Large is 2x2 block on iphone
    case large // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .small
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .small
      case 1: self = .medium
      case 2: self = .large
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "small": self = .small
      case "medium": self = .medium
      case "large": self = .large
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "SMALL": self = .small
      case "MEDIUM": self = .medium
      case "LARGE": self = .large
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "SMALL": self = .small
      case "MEDIUM": self = .medium
      case "LARGE": self = .large
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .small: return 0
        case .medium: return 1
        case .large: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .small: return "\"SMALL\""
        case .medium: return "\"MEDIUM\""
        case .large: return "\"LARGE\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .small: return ".small"
        case .medium: return ".medium"
        case .large: return ".large"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum BackgroundStyle: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case empty // = 0
    case image // = 1
    case chartSilhouette // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .empty
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .empty
      case 1: self = .image
      case 2: self = .chartSilhouette
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "empty": self = .empty
      case "image": self = .image
      case "chartSilhouette": self = .chartSilhouette
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "EMPTY": self = .empty
      case "IMAGE": self = .image
      case "CHART_SILHOUETTE": self = .chartSilhouette
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "EMPTY": self = .empty
      case "IMAGE": self = .image
      case "CHART_SILHOUETTE": self = .chartSilhouette
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .empty: return 0
        case .image: return 1
        case .chartSilhouette: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .empty: return "\"EMPTY\""
        case .image: return "\"IMAGE\""
        case .chartSilhouette: return "\"CHART_SILHOUETTE\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .empty: return ".empty"
        case .image: return ".image"
        case .chartSilhouette: return ".chartSilhouette"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public var size: Otsimo_CardDecoration.Size = Otsimo_CardDecoration.Size.small

  public var backgroundStyle: Otsimo_CardDecoration.BackgroundStyle = Otsimo_CardDecoration.BackgroundStyle.empty

  public var imageURL: String = ""

  public var leftIcon: String = ""

  public var rightIcon: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: Otsimo_CardDecoration.Size.self, value: &size)
    case 2: try setter.decodeSingularField(fieldType: Otsimo_CardDecoration.BackgroundStyle.self, value: &backgroundStyle)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &imageURL)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &leftIcon)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &rightIcon)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if size != Otsimo_CardDecoration.Size.small {
      try visitor.visitSingularField(fieldType: Otsimo_CardDecoration.Size.self, value: size, fieldNumber: 1)
    }
    if backgroundStyle != Otsimo_CardDecoration.BackgroundStyle.empty {
      try visitor.visitSingularField(fieldType: Otsimo_CardDecoration.BackgroundStyle.self, value: backgroundStyle, fieldNumber: 2)
    }
    if imageURL != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: imageURL, fieldNumber: 3)
    }
    if leftIcon != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: leftIcon, fieldNumber: 4)
    }
    if rightIcon != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: rightIcon, fieldNumber: 5)
    }
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_CardDecoration) -> Bool {
    if size != other.size {return false}
    if backgroundStyle != other.backgroundStyle {return false}
    if imageURL != other.imageURL {return false}
    if leftIcon != other.leftIcon {return false}
    if rightIcon != other.rightIcon {return false}
    return true
  }
}

public struct Otsimo_CardEmpty: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Otsimo_CardEmpty"}
  public var protoMessageName: String {return "CardEmpty"}
  public var protoPackageName: String {return "otsimo"}
  public static let _protobuf_fieldNames = FieldNameMap()


  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_CardEmpty) -> Bool {
    return true
  }
}

public struct Otsimo_CardWebpage: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Otsimo_CardWebpage"}
  public var protoMessageName: String {return "CardWebpage"}
  public var protoPackageName: String {return "otsimo"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "url", swift: "url"),
  ]


  public var url: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &url)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if url != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: url, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_CardWebpage) -> Bool {
    if url != other.url {return false}
    return true
  }
}

public struct Otsimo_CardApplink: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Otsimo_CardApplink"}
  public var protoMessageName: String {return "CardApplink"}
  public var protoPackageName: String {return "otsimo"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "applink", swift: "applink"),
  ]


  public var applink: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &applink)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if applink != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: applink, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_CardApplink) -> Bool {
    if applink != other.applink {return false}
    return true
  }
}

public struct Otsimo_CardAnalysis: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Otsimo_CardAnalysis"}
  public var protoMessageName: String {return "CardAnalysis"}
  public var protoPackageName: String {return "otsimo"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "data", swift: "data"),
    2: .unique(proto: "chart_type", json: "chartType", swift: "chartType"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Otsimo_CardAnalysis
    var _data: Apipb_DataSet? = nil
    var _chartType: Otsimo_ChartType = Otsimo_ChartType.line

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Apipb_DataSet.self, value: &_data)
      case 2: try setter.decodeSingularField(fieldType: Otsimo_ChartType.self, value: &_chartType)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _chartType != Otsimo_ChartType.line {
        try visitor.visitSingularField(fieldType: Otsimo_ChartType.self, value: _chartType, fieldNumber: 2)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _data != other._data {return false}
      if _chartType != other._chartType {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._data = _data
      clone._chartType = _chartType
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var data: Apipb_DataSet {
    get {return _storage._data ?? Apipb_DataSet()}
    set {_uniqueStorage()._data = newValue}
  }
  public var hasData: Bool {
    return _storage._data != nil
  }
  public mutating func clearData() {
    return _storage._data = nil
  }

  public var chartType: Otsimo_ChartType {
    get {return _storage._chartType}
    set {_uniqueStorage()._chartType = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_CardAnalysis) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Otsimo_Card: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Otsimo_Card"}
  public var protoMessageName: String {return "Card"}
  public var protoPackageName: String {return "otsimo"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "text", swift: "text"),
    3: .unique(proto: "expires_at", json: "expiresAt", swift: "expiresAt"),
    4: .unique(proto: "created_at", json: "createdAt", swift: "createdAt"),
    5: .same(proto: "decoration", swift: "decoration"),
    6: .unique(proto: "provider_score", json: "providerScore", swift: "providerScore"),
    7: .unique(proto: "provider_weight", json: "providerWeight", swift: "providerWeight"),
    8: .unique(proto: "provider_name", json: "providerName", swift: "providerName"),
    9: .same(proto: "language", swift: "language"),
    10: .same(proto: "empty", swift: "empty"),
    11: .same(proto: "webpage", swift: "webpage"),
    12: .same(proto: "applink", swift: "applink"),
    13: .same(proto: "analysis", swift: "analysis"),
    14: .same(proto: "title", swift: "title"),
    15: .same(proto: "subtitle", swift: "subtitle"),
    16: .same(proto: "labels", swift: "labels"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Otsimo_Card
    var _id: String = ""
    var _text: String = ""
    var _expiresAt: Int64 = 0
    var _createdAt: Int64 = 0
    var _decoration: Otsimo_CardDecoration? = nil
    var _providerScore: Int32 = 0
    var _providerWeight: Float = 0
    var _providerName: String = ""
    var _language: String = ""
    var _data = Otsimo_Card.OneOf_Data()
    var _title: String = ""
    var _subtitle: String = ""
    var _labels: Dictionary<String,String> = [:]

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_id)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_text)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_expiresAt)
      case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_createdAt)
      case 5: try setter.decodeSingularMessageField(fieldType: Otsimo_CardDecoration.self, value: &_decoration)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_providerScore)
      case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_providerWeight)
      case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_providerName)
      case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_language)
      case 10, 11, 12, 13: try _data.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      case 14: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_title)
      case 15: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_subtitle)
      case 16: try setter.decodeMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_labels)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _id != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _id, fieldNumber: 1)
      }
      if _text != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _text, fieldNumber: 2)
      }
      if _expiresAt != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _expiresAt, fieldNumber: 3)
      }
      if _createdAt != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _createdAt, fieldNumber: 4)
      }
      if let v = _decoration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _providerScore != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _providerScore, fieldNumber: 6)
      }
      if _providerWeight != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: _providerWeight, fieldNumber: 7)
      }
      if _providerName != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _providerName, fieldNumber: 8)
      }
      if _language != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _language, fieldNumber: 9)
      }
      try _data.traverse(visitor: visitor, start: 10, end: 14)
      if _title != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _title, fieldNumber: 14)
      }
      if _subtitle != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _subtitle, fieldNumber: 15)
      }
      if !_labels.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _labels, fieldNumber: 16)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _id != other._id {return false}
      if _text != other._text {return false}
      if _expiresAt != other._expiresAt {return false}
      if _createdAt != other._createdAt {return false}
      if _decoration != other._decoration {return false}
      if _providerScore != other._providerScore {return false}
      if _providerWeight != other._providerWeight {return false}
      if _providerName != other._providerName {return false}
      if _language != other._language {return false}
      if _data != other._data {return false}
      if _title != other._title {return false}
      if _subtitle != other._subtitle {return false}
      if _labels != other._labels {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._id = _id
      clone._text = _text
      clone._expiresAt = _expiresAt
      clone._createdAt = _createdAt
      clone._decoration = _decoration
      clone._providerScore = _providerScore
      clone._providerWeight = _providerWeight
      clone._providerName = _providerName
      clone._language = _language
      clone._data = _data
      clone._title = _title
      clone._subtitle = _subtitle
      clone._labels = _labels
      return clone
    }
  }

  private var _storage = _StorageClass()


  public enum OneOf_Data: ExpressibleByNilLiteral, SwiftProtobuf.OneofEnum {
    case empty(Otsimo_CardEmpty)
    case webpage(Otsimo_CardWebpage)
    case applink(Otsimo_CardApplink)
    case analysis(Otsimo_CardAnalysis)
    case None

    public static func ==(lhs: Otsimo_Card.OneOf_Data, rhs: Otsimo_Card.OneOf_Data) -> Bool {
      switch (lhs, rhs) {
      case (.empty(let l), .empty(let r)): return l == r
      case (.webpage(let l), .webpage(let r)): return l == r
      case (.applink(let l), .applink(let r)): return l == r
      case (.analysis(let l), .analysis(let r)): return l == r
      case (.None, .None): return true
      default: return false
      }
    }

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      if self != .None && setter.rejectConflictingOneof {
        throw SwiftProtobuf.DecodingError.duplicatedOneOf
      }
      switch protoFieldNumber {
      case 10:
        var value: Otsimo_CardEmpty?
        try setter.decodeSingularMessageField(fieldType: Otsimo_CardEmpty.self, value: &value)
        if let value = value {
          self = .empty(value)
        }
      case 11:
        var value: Otsimo_CardWebpage?
        try setter.decodeSingularMessageField(fieldType: Otsimo_CardWebpage.self, value: &value)
        if let value = value {
          self = .webpage(value)
        }
      case 12:
        var value: Otsimo_CardApplink?
        try setter.decodeSingularMessageField(fieldType: Otsimo_CardApplink.self, value: &value)
        if let value = value {
          self = .applink(value)
        }
      case 13:
        var value: Otsimo_CardAnalysis?
        try setter.decodeSingularMessageField(fieldType: Otsimo_CardAnalysis.self, value: &value)
        if let value = value {
          self = .analysis(value)
        }
      default:
        self = .None
      }
    }

    public func traverse(visitor: SwiftProtobuf.Visitor, start: Int, end: Int) throws {
      switch self {
      case .empty(let v):
        if start <= 10 && 10 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
        }
      case .webpage(let v):
        if start <= 11 && 11 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
        }
      case .applink(let v):
        if start <= 12 && 12 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
        }
      case .analysis(let v):
        if start <= 13 && 13 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
        }
      case .None:
        break
      }
    }
  }

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var text: String {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  public var expiresAt: Int64 {
    get {return _storage._expiresAt}
    set {_uniqueStorage()._expiresAt = newValue}
  }

  public var createdAt: Int64 {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  public var decoration: Otsimo_CardDecoration {
    get {return _storage._decoration ?? Otsimo_CardDecoration()}
    set {_uniqueStorage()._decoration = newValue}
  }
  public var hasDecoration: Bool {
    return _storage._decoration != nil
  }
  public mutating func clearDecoration() {
    return _storage._decoration = nil
  }

  ///   Score is between 0-500
  public var providerScore: Int32 {
    get {return _storage._providerScore}
    set {_uniqueStorage()._providerScore = newValue}
  }

  ///   ProviderWeight is between 0-2
  public var providerWeight: Float {
    get {return _storage._providerWeight}
    set {_uniqueStorage()._providerWeight = newValue}
  }

  public var providerName: String {
    get {return _storage._providerName}
    set {_uniqueStorage()._providerName = newValue}
  }

  public var language: String {
    get {return _storage._language}
    set {_uniqueStorage()._language = newValue}
  }

  public var empty: Otsimo_CardEmpty {
    get {
      if case .empty(let v) = _storage._data {
        return v
      }
      return Otsimo_CardEmpty()
    }
    set {
      _uniqueStorage()._data = .empty(newValue)
    }
  }

  public var webpage: Otsimo_CardWebpage {
    get {
      if case .webpage(let v) = _storage._data {
        return v
      }
      return Otsimo_CardWebpage()
    }
    set {
      _uniqueStorage()._data = .webpage(newValue)
    }
  }

  public var applink: Otsimo_CardApplink {
    get {
      if case .applink(let v) = _storage._data {
        return v
      }
      return Otsimo_CardApplink()
    }
    set {
      _uniqueStorage()._data = .applink(newValue)
    }
  }

  public var analysis: Otsimo_CardAnalysis {
    get {
      if case .analysis(let v) = _storage._data {
        return v
      }
      return Otsimo_CardAnalysis()
    }
    set {
      _uniqueStorage()._data = .analysis(newValue)
    }
  }

  ///   Title for newer systems
  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  ///   Subtitle for newer systems 
  public var subtitle: String {
    get {return _storage._subtitle}
    set {_uniqueStorage()._subtitle = newValue}
  }

  ///   Labels of the card
  public var labels: Dictionary<String,String> {
    get {return _storage._labels}
    set {_uniqueStorage()._labels = newValue}
  }

  public var data: OneOf_Data {
    get {return _storage._data}
    set {
      _uniqueStorage()._data = newValue
    }
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_Card) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}
