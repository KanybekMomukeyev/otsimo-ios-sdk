/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: registry.proto
 *
 */

import Foundation
import SwiftProtobuf


public struct Apipb_AllGameReleases: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_AllGameReleases"}
  public var protoMessageName: String {return "AllGameReleases"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "game_id", json: "gameId", swift: "gameId"),
    2: .same(proto: "releases", swift: "releases"),
  ]


  public struct MiniRelease: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "Apipb_AllGameReleases.MiniRelease"}
    public var protoMessageName: String {return "MiniRelease"}
    public var protoPackageName: String {return "apipb"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      1: .same(proto: "version", swift: "version"),
      2: .unique(proto: "released_at", json: "releasedAt", swift: "releasedAt"),
      3: .unique(proto: "release_state", json: "releaseState", swift: "releaseState"),
    ]


    public var version: String = ""

    public var releasedAt: Int64 = 0

    public var releaseState: Apipb_ReleaseState = Apipb_ReleaseState.created

    public init() {}

    public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &version)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &releasedAt)
      case 3: try setter.decodeSingularField(fieldType: Apipb_ReleaseState.self, value: &releaseState)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
      if version != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: version, fieldNumber: 1)
      }
      if releasedAt != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: releasedAt, fieldNumber: 2)
      }
      if releaseState != Apipb_ReleaseState.created {
        try visitor.visitSingularField(fieldType: Apipb_ReleaseState.self, value: releaseState, fieldNumber: 3)
      }
    }

    public func _protoc_generated_isEqualTo(other: Apipb_AllGameReleases.MiniRelease) -> Bool {
      if version != other.version {return false}
      if releasedAt != other.releasedAt {return false}
      if releaseState != other.releaseState {return false}
      return true
    }
  }

  public var gameId: String = ""

  public var releases: [Apipb_AllGameReleases.MiniRelease] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &gameId)
    case 2: try setter.decodeRepeatedMessageField(fieldType: Apipb_AllGameReleases.MiniRelease.self, value: &releases)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if gameId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: gameId, fieldNumber: 1)
    }
    if !releases.isEmpty {
      try visitor.visitRepeatedMessageField(value: releases, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_AllGameReleases) -> Bool {
    if gameId != other.gameId {return false}
    if releases != other.releases {return false}
    return true
  }
}

public struct Apipb_GameCategoryLocale: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GameCategoryLocale"}
  public var protoMessageName: String {return "GameCategoryLocale"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "language", swift: "language"),
    2: .same(proto: "title", swift: "title"),
    3: .same(proto: "image", swift: "image"),
  ]


  public var language: String = ""

  public var title: String = ""

  public var image: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &language)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &title)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &image)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if language != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: language, fieldNumber: 1)
    }
    if title != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: title, fieldNumber: 2)
    }
    if image != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: image, fieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GameCategoryLocale) -> Bool {
    if language != other.language {return false}
    if title != other.title {return false}
    if image != other.image {return false}
    return true
  }
}

public struct Apipb_GameCategory: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GameCategory"}
  public var protoMessageName: String {return "GameCategory"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "name", swift: "name"),
    2: .same(proto: "locales", swift: "locales"),
    3: .same(proto: "revision", swift: "revision"),
    4: .same(proto: "labels", swift: "labels"),
  ]


  public var name: String = ""

  public var locales: [Apipb_GameCategoryLocale] = []

  public var revision: Int32 = 0

  public var labels: Dictionary<String,String> = [:]

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &name)
    case 2: try setter.decodeRepeatedMessageField(fieldType: Apipb_GameCategoryLocale.self, value: &locales)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &revision)
    case 4: try setter.decodeMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &labels)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if name != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: name, fieldNumber: 1)
    }
    if !locales.isEmpty {
      try visitor.visitRepeatedMessageField(value: locales, fieldNumber: 2)
    }
    if revision != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: revision, fieldNumber: 3)
    }
    if !labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: labels, fieldNumber: 4)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GameCategory) -> Bool {
    if name != other.name {return false}
    if locales != other.locales {return false}
    if revision != other.revision {return false}
    if labels != other.labels {return false}
    return true
  }
}

public struct Apipb_CategoryReq: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_CategoryReq"}
  public var protoMessageName: String {return "CategoryReq"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "task", swift: "task"),
    2: .same(proto: "category", swift: "category"),
    3: .unique(proto: "known_revision", json: "knownRevision", swift: "knownRevision"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_CategoryReq
    var _task: Apipb_CategoryReq.Task = Apipb_CategoryReq.Task.add
    var _category: Apipb_GameCategory? = nil
    var _knownRevision: Int32 = 0

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: Apipb_CategoryReq.Task.self, value: &_task)
      case 2: try setter.decodeSingularMessageField(fieldType: Apipb_GameCategory.self, value: &_category)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_knownRevision)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _task != Apipb_CategoryReq.Task.add {
        try visitor.visitSingularField(fieldType: Apipb_CategoryReq.Task.self, value: _task, fieldNumber: 1)
      }
      if let v = _category {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _knownRevision != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _knownRevision, fieldNumber: 3)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _task != other._task {return false}
      if _category != other._category {return false}
      if _knownRevision != other._knownRevision {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._task = _task
      clone._category = _category
      clone._knownRevision = _knownRevision
      return clone
    }
  }

  private var _storage = _StorageClass()


  public enum Task: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case add // = 0
    case update // = 1
    case delete // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .add
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .add
      case 1: self = .update
      case 2: self = .delete
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "add": self = .add
      case "update": self = .update
      case "delete": self = .delete
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "ADD": self = .add
      case "UPDATE": self = .update
      case "DELETE": self = .delete
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "ADD": self = .add
      case "UPDATE": self = .update
      case "DELETE": self = .delete
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .add: return 0
        case .update: return 1
        case .delete: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .add: return "\"ADD\""
        case .update: return "\"UPDATE\""
        case .delete: return "\"DELETE\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .add: return ".add"
        case .update: return ".update"
        case .delete: return ".delete"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public var task: Apipb_CategoryReq.Task {
    get {return _storage._task}
    set {_uniqueStorage()._task = newValue}
  }

  public var category: Apipb_GameCategory {
    get {return _storage._category ?? Apipb_GameCategory()}
    set {_uniqueStorage()._category = newValue}
  }
  public var hasCategory: Bool {
    return _storage._category != nil
  }
  public mutating func clearCategory() {
    return _storage._category = nil
  }

  public var knownRevision: Int32 {
    get {return _storage._knownRevision}
    set {_uniqueStorage()._knownRevision = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_CategoryReq) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_CategoryListReq: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_CategoryListReq"}
  public var protoMessageName: String {return "CategoryListReq"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames = FieldNameMap()


  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
  }

  public func _protoc_generated_isEqualTo(other: Apipb_CategoryListReq) -> Bool {
    return true
  }
}

public struct Apipb_CategoryList: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_CategoryList"}
  public var protoMessageName: String {return "CategoryList"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "categories", swift: "categories"),
  ]


  public var categories: [Apipb_GameCategory] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Apipb_GameCategory.self, value: &categories)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !categories.isEmpty {
      try visitor.visitRepeatedMessageField(value: categories, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_CategoryList) -> Bool {
    if categories != other.categories {return false}
    return true
  }
}

public struct Apipb_GetAllGamesReq: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GetAllGamesReq"}
  public var protoMessageName: String {return "GetAllGamesReq"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "games", swift: "games"),
    2: .same(proto: "language", swift: "language"),
  ]


  ///   Games that user wants the data of, if it is empty returns all games
  public var games: [Apipb_GameAndVersion] = []

  ///   Language filters games. If language field is empty than returns games with all languages.
  public var language: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Apipb_GameAndVersion.self, value: &games)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &language)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !games.isEmpty {
      try visitor.visitRepeatedMessageField(value: games, fieldNumber: 1)
    }
    if language != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: language, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GetAllGamesReq) -> Bool {
    if games != other.games {return false}
    if language != other.language {return false}
    return true
  }
}

public struct Apipb_GetAllGamesRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GetAllGamesRes"}
  public var protoMessageName: String {return "GetAllGamesRes"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "games", swift: "games"),
  ]


  public var games: [Apipb_GameRelease] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Apipb_GameRelease.self, value: &games)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !games.isEmpty {
      try visitor.visitRepeatedMessageField(value: games, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GetAllGamesRes) -> Bool {
    if games != other.games {return false}
    return true
  }
}
