/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: registry.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

fileprivate let _protobuf_package = "apipb"

public struct Apipb_AllGameReleases: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AllGameReleases"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_id"),
    2: .same(proto: "releases"),
  ]

  public var gameId: String = ""

  public var releases: [Apipb_AllGameReleases.MiniRelease] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct MiniRelease: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = Apipb_AllGameReleases.protoMessageName + ".MiniRelease"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      1: .same(proto: "version"),
      2: .standard(proto: "released_at"),
      3: .standard(proto: "release_state"),
    ]

    public var version: String = ""

    public var releasedAt: Int64 = 0

    public var releaseState: Apipb_ReleaseState = Apipb_ReleaseState.created

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &version)
        case 2: try decoder.decodeSingularInt64Field(value: &releasedAt)
        case 3: try decoder.decodeSingularEnumField(value: &releaseState)
        default: break
        }
      }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !version.isEmpty {
        try visitor.visitSingularStringField(value: version, fieldNumber: 1)
      }
      if releasedAt != 0 {
        try visitor.visitSingularInt64Field(value: releasedAt, fieldNumber: 2)
      }
      if releaseState != Apipb_ReleaseState.created {
        try visitor.visitSingularEnumField(value: releaseState, fieldNumber: 3)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    public func _protobuf_generated_isEqualTo(other: Apipb_AllGameReleases.MiniRelease) -> Bool {
      if version != other.version {return false}
      if releasedAt != other.releasedAt {return false}
      if releaseState != other.releaseState {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &gameId)
      case 2: try decoder.decodeRepeatedMessageField(value: &releases)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !gameId.isEmpty {
      try visitor.visitSingularStringField(value: gameId, fieldNumber: 1)
    }
    if !releases.isEmpty {
      try visitor.visitRepeatedMessageField(value: releases, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_AllGameReleases) -> Bool {
    if gameId != other.gameId {return false}
    if releases != other.releases {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GameCategoryLocale: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameCategoryLocale"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "language"),
    2: .same(proto: "title"),
    3: .same(proto: "image"),
  ]

  public var language: String = ""

  public var title: String = ""

  public var image: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &language)
      case 2: try decoder.decodeSingularStringField(value: &title)
      case 3: try decoder.decodeSingularStringField(value: &image)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !language.isEmpty {
      try visitor.visitSingularStringField(value: language, fieldNumber: 1)
    }
    if !title.isEmpty {
      try visitor.visitSingularStringField(value: title, fieldNumber: 2)
    }
    if !image.isEmpty {
      try visitor.visitSingularStringField(value: image, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GameCategoryLocale) -> Bool {
    if language != other.language {return false}
    if title != other.title {return false}
    if image != other.image {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GameCategory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameCategory"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "locales"),
    3: .same(proto: "revision"),
    4: .same(proto: "labels"),
  ]

  public var name: String = ""

  public var locales: [Apipb_GameCategoryLocale] = []

  public var revision: Int32 = 0

  public var labels: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &name)
      case 2: try decoder.decodeRepeatedMessageField(value: &locales)
      case 3: try decoder.decodeSingularInt32Field(value: &revision)
      case 4: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &labels)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !name.isEmpty {
      try visitor.visitSingularStringField(value: name, fieldNumber: 1)
    }
    if !locales.isEmpty {
      try visitor.visitRepeatedMessageField(value: locales, fieldNumber: 2)
    }
    if revision != 0 {
      try visitor.visitSingularInt32Field(value: revision, fieldNumber: 3)
    }
    if !labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: labels, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GameCategory) -> Bool {
    if name != other.name {return false}
    if locales != other.locales {return false}
    if revision != other.revision {return false}
    if labels != other.labels {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_CategoryReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategoryReq"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "task"),
    2: .same(proto: "category"),
    3: .standard(proto: "known_revision"),
  ]

  private class _StorageClass {
    var _task: Apipb_CategoryReq.Task = Apipb_CategoryReq.Task.add
    var _category: Apipb_GameCategory? = nil
    var _knownRevision: Int32 = 0

    init() {}

    init(copying source: _StorageClass) {
      _task = source._task
      _category = source._category
      _knownRevision = source._knownRevision
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var task: Apipb_CategoryReq.Task {
    get {return _storage._task}
    set {_uniqueStorage()._task = newValue}
  }

  public var category: Apipb_GameCategory {
    get {return _storage._category ?? Apipb_GameCategory()}
    set {_uniqueStorage()._category = newValue}
  }
  public var hasCategory: Bool {
    return _storage._category != nil
  }
  public mutating func clearCategory() {
    return _storage._category = nil
  }

  public var knownRevision: Int32 {
    get {return _storage._knownRevision}
    set {_uniqueStorage()._knownRevision = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Task: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case add // = 0
    case update // = 1
    case delete // = 2
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "ADD"),
      1: .same(proto: "UPDATE"),
      2: .same(proto: "DELETE"),
    ]

    public init() {
      self = .add
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .add
      case 1: self = .update
      case 2: self = .delete
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .add: return 0
      case .update: return 1
      case .delete: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._task)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._category)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._knownRevision)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._task != Apipb_CategoryReq.Task.add {
        try visitor.visitSingularEnumField(value: _storage._task, fieldNumber: 1)
      }
      if let v = _storage._category {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._knownRevision != 0 {
        try visitor.visitSingularInt32Field(value: _storage._knownRevision, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_CategoryReq) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._task != other_storage._task {return false}
        if _storage._category != other_storage._category {return false}
        if _storage._knownRevision != other_storage._knownRevision {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_CategoryListReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategoryListReq"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_CategoryListReq) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_CategoryList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CategoryList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "categories"),
  ]

  public var categories: [Apipb_GameCategory] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &categories)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !categories.isEmpty {
      try visitor.visitRepeatedMessageField(value: categories, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_CategoryList) -> Bool {
    if categories != other.categories {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GetAllGamesReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAllGamesReq"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "games"),
    2: .same(proto: "language"),
  ]

  ///   Games that user wants the data of, if it is empty returns all games
  public var games: [Apipb_GameAndVersion] = []

  ///   Language filters games. If language field is empty than returns games with all languages.
  public var language: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &games)
      case 2: try decoder.decodeSingularStringField(value: &language)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !games.isEmpty {
      try visitor.visitRepeatedMessageField(value: games, fieldNumber: 1)
    }
    if !language.isEmpty {
      try visitor.visitSingularStringField(value: language, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GetAllGamesReq) -> Bool {
    if games != other.games {return false}
    if language != other.language {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GetAllGamesRes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAllGamesRes"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "games"),
  ]

  public var games: [Apipb_GameRelease] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &games)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !games.isEmpty {
      try visitor.visitRepeatedMessageField(value: games, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GetAllGamesRes) -> Bool {
    if games != other.games {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
