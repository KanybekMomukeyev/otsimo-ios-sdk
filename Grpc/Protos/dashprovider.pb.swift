/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: dashprovider.proto
 *
 */

import Foundation
import SwiftProtobuf


public struct Otsimo_ProviderGetRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Otsimo_ProviderGetRequest"}
  public var protoMessageName: String {return "ProviderGetRequest"}
  public var protoPackageName: String {return "otsimo"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "request", swift: "request"),
    2: .unique(proto: "user_groups", json: "userGroups", swift: "userGroups"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Otsimo_ProviderGetRequest
    var _request: Otsimo_DashboardGetRequest? = nil
    var _userGroups: [String] = []

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Otsimo_DashboardGetRequest.self, value: &_request)
      case 2: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_userGroups)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_userGroups.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _userGroups, fieldNumber: 2)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _request != other._request {return false}
      if _userGroups != other._userGroups {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._request = _request
      clone._userGroups = _userGroups
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var request: Otsimo_DashboardGetRequest {
    get {return _storage._request ?? Otsimo_DashboardGetRequest()}
    set {_uniqueStorage()._request = newValue}
  }
  public var hasRequest: Bool {
    return _storage._request != nil
  }
  public mutating func clearRequest() {
    return _storage._request = nil
  }

  public var userGroups: [String] {
    get {return _storage._userGroups}
    set {_uniqueStorage()._userGroups = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_ProviderGetRequest) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Otsimo_ProviderItem: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Otsimo_ProviderItem"}
  public var protoMessageName: String {return "ProviderItem"}
  public var protoPackageName: String {return "otsimo"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "cacheable", swift: "cacheable"),
    2: .same(proto: "ttl", swift: "ttl"),
    4: .same(proto: "item", swift: "item"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Otsimo_ProviderItem
    var _cacheable: Bool = false
    var _ttl: Int64 = 0
    var _item: Otsimo_Card? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_cacheable)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_ttl)
      case 4: try setter.decodeSingularMessageField(fieldType: Otsimo_Card.self, value: &_item)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _cacheable != false {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: _cacheable, fieldNumber: 1)
      }
      if _ttl != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _ttl, fieldNumber: 2)
      }
      if let v = _item {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _cacheable != other._cacheable {return false}
      if _ttl != other._ttl {return false}
      if _item != other._item {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._cacheable = _cacheable
      clone._ttl = _ttl
      clone._item = _item
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var cacheable: Bool {
    get {return _storage._cacheable}
    set {_uniqueStorage()._cacheable = newValue}
  }

  public var ttl: Int64 {
    get {return _storage._ttl}
    set {_uniqueStorage()._ttl = newValue}
  }

  public var item: Otsimo_Card {
    get {return _storage._item ?? Otsimo_Card()}
    set {_uniqueStorage()._item = newValue}
  }
  public var hasItem: Bool {
    return _storage._item != nil
  }
  public mutating func clearItem() {
    return _storage._item = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_ProviderItem) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Otsimo_ProviderItems: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Otsimo_ProviderItems"}
  public var protoMessageName: String {return "ProviderItems"}
  public var protoPackageName: String {return "otsimo"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "profile_id", json: "profileId", swift: "profileId"),
    2: .unique(proto: "child_id", json: "childId", swift: "childId"),
    3: .unique(proto: "created_at", json: "createdAt", swift: "createdAt"),
    4: .same(proto: "cacheable", swift: "cacheable"),
    5: .same(proto: "ttl", swift: "ttl"),
    8: .same(proto: "items", swift: "items"),
  ]


  ///  ProfileId
  public var profileId: String = ""

  ///  ChildId
  public var childId: String = ""

  ///  CreatedAt
  public var createdAt: Int64 = 0

  ///  Cacheable
  public var cacheable: Bool = false

  ///  TTL is titme to live duration
  public var ttl: Int64 = 0

  ///  Items
  public var items: [Otsimo_ProviderItem] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &profileId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &childId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &createdAt)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &cacheable)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &ttl)
    case 8: try setter.decodeRepeatedMessageField(fieldType: Otsimo_ProviderItem.self, value: &items)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if profileId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: profileId, fieldNumber: 1)
    }
    if childId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: childId, fieldNumber: 2)
    }
    if createdAt != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: createdAt, fieldNumber: 3)
    }
    if cacheable != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: cacheable, fieldNumber: 4)
    }
    if ttl != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: ttl, fieldNumber: 5)
    }
    if !items.isEmpty {
      try visitor.visitRepeatedMessageField(value: items, fieldNumber: 8)
    }
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_ProviderItems) -> Bool {
    if profileId != other.profileId {return false}
    if childId != other.childId {return false}
    if createdAt != other.createdAt {return false}
    if cacheable != other.cacheable {return false}
    if ttl != other.ttl {return false}
    if items != other.items {return false}
    return true
  }
}

///  todo
public struct Otsimo_ProviderInfoRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Otsimo_ProviderInfoRequest"}
  public var protoMessageName: String {return "ProviderInfoRequest"}
  public var protoPackageName: String {return "otsimo"}
  public static let _protobuf_fieldNames = FieldNameMap()


  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_ProviderInfoRequest) -> Bool {
    return true
  }
}

public struct Otsimo_ProviderInfo: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Otsimo_ProviderInfo"}
  public var protoMessageName: String {return "ProviderInfo"}
  public var protoPackageName: String {return "otsimo"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "serves_for", json: "servesFor", swift: "servesFor"),
  ]


  public var servesFor: [String] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &servesFor)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !servesFor.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: servesFor, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_ProviderInfo) -> Bool {
    if servesFor != other.servesFor {return false}
    return true
  }
}
