/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: simplyanalysis.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

fileprivate let _protobuf_package = "apipb"

public enum Apipb_DataInterval: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  public typealias RawValue = Int
  case hourly // = 0
  case daily // = 1
  case UNRECOGNIZED(Int)

  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HOURLY"),
    1: .same(proto: "DAILY"),
  ]

  public init() {
    self = .hourly
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .hourly
    case 1: self = .daily
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .hourly: return 0
    case .daily: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public struct Apipb_GamePlayingRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GamePlayingRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "games"),
    2: .same(proto: "from"),
    3: .same(proto: "to"),
    4: .same(proto: "interval"),
  ]

  public var games: [String] = []

  ///  From is the unix seconds time
  public var from: Int64 = 0

  ///  To is the unix seconds time
  public var to: Int64 = 0

  public var interval: Apipb_DataInterval = Apipb_DataInterval.hourly

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &games)
      case 2: try decoder.decodeSingularInt64Field(value: &from)
      case 3: try decoder.decodeSingularInt64Field(value: &to)
      case 4: try decoder.decodeSingularEnumField(value: &interval)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !games.isEmpty {
      try visitor.visitRepeatedStringField(value: games, fieldNumber: 1)
    }
    if from != 0 {
      try visitor.visitSingularInt64Field(value: from, fieldNumber: 2)
    }
    if to != 0 {
      try visitor.visitSingularInt64Field(value: to, fieldNumber: 3)
    }
    if interval != Apipb_DataInterval.hourly {
      try visitor.visitSingularEnumField(value: interval, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GamePlayingRequest) -> Bool {
    if games != other.games {return false}
    if from != other.from {return false}
    if to != other.to {return false}
    if interval != other.interval {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GamePlayingReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GamePlayingReply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  private class _StorageClass {
    var _data: Apipb_DataSet? = nil

    init() {}

    init(copying source: _StorageClass) {
      _data = source._data
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var data: Apipb_DataSet {
    get {return _storage._data ?? Apipb_DataSet()}
    set {_uniqueStorage()._data = newValue}
  }
  public var hasData: Bool {
    return _storage._data != nil
  }
  public mutating func clearData() {
    return _storage._data = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GamePlayingReply) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._data != other_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
