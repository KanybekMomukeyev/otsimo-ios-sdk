/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: discovery.proto
 *
 */

import Foundation
import SwiftProtobuf


public struct Apipb_OtsimoServices: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_OtsimoServices"}
  public var protoMessageName: String {return "OtsimoServices"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "environment", swift: "environment"),
    2: .same(proto: "issuer", swift: "issuer"),
    3: .unique(proto: "is_production", json: "isProduction", swift: "isProduction"),
    4: .unique(proto: "use_tls", json: "useTls", swift: "useTls"),
    5: .unique(proto: "registry_grpc", json: "registryGrpc", swift: "registryGrpc"),
    6: .unique(proto: "listener_grpc", json: "listenerGrpc", swift: "listenerGrpc"),
    7: .unique(proto: "watch_grpc", json: "watchGrpc", swift: "watchGrpc"),
    8: .unique(proto: "catalog_grpc", json: "catalogGrpc", swift: "catalogGrpc"),
    9: .unique(proto: "content_grpc", json: "contentGrpc", swift: "contentGrpc"),
    10: .unique(proto: "dashboard_grpc", json: "dashboardGrpc", swift: "dashboardGrpc"),
    11: .unique(proto: "api_grpc", json: "apiGrpc", swift: "apiGrpc"),
    12: .unique(proto: "game_content", json: "gameContent", swift: "gameContent"),
    13: .same(proto: "accounts", swift: "accounts"),
    14: .unique(proto: "analytics_grpc", json: "analyticsGrpc", swift: "analyticsGrpc"),
    20: .same(proto: "services", swift: "services"),
    21: .unique(proto: "game_storage_providers", json: "gameStorageProviders", swift: "gameStorageProviders"),
    22: .unique(proto: "self_learning_configs", json: "selfLearningConfigs", swift: "selfLearningConfigs"),
    23: .same(proto: "configs", swift: "configs"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_OtsimoServices
    var _environment: String = ""
    var _issuer: String = ""
    var _isProduction: Bool = false
    var _useTls: Bool = false
    var _registryGrpc: String = ""
    var _listenerGrpc: String = ""
    var _watchGrpc: String = ""
    var _catalogGrpc: String = ""
    var _contentGrpc: String = ""
    var _dashboardGrpc: String = ""
    var _apiGrpc: String = ""
    var _gameContent: String = ""
    var _accounts: String = ""
    var _analyticsGrpc: String = ""
    var _services: Dictionary<String,String> = [:]
    var _gameStorageProviders: Dictionary<String,String> = [:]
    var _selfLearningConfigs: Dictionary<String,Apipb_SelfLearningConfig> = [:]
    var _configs: Dictionary<String,String> = [:]

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_environment)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_issuer)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_isProduction)
      case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_useTls)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_registryGrpc)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_listenerGrpc)
      case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_watchGrpc)
      case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_catalogGrpc)
      case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_contentGrpc)
      case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_dashboardGrpc)
      case 11: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_apiGrpc)
      case 12: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_gameContent)
      case 13: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_accounts)
      case 14: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_analyticsGrpc)
      case 20: try setter.decodeMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_services)
      case 21: try setter.decodeMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_gameStorageProviders)
      case 22: try setter.decodeMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,Apipb_SelfLearningConfig>.self, value: &_selfLearningConfigs)
      case 23: try setter.decodeMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_configs)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _environment != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _environment, fieldNumber: 1)
      }
      if _issuer != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _issuer, fieldNumber: 2)
      }
      if _isProduction != false {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: _isProduction, fieldNumber: 3)
      }
      if _useTls != false {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: _useTls, fieldNumber: 4)
      }
      if _registryGrpc != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _registryGrpc, fieldNumber: 5)
      }
      if _listenerGrpc != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _listenerGrpc, fieldNumber: 6)
      }
      if _watchGrpc != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _watchGrpc, fieldNumber: 7)
      }
      if _catalogGrpc != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _catalogGrpc, fieldNumber: 8)
      }
      if _contentGrpc != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _contentGrpc, fieldNumber: 9)
      }
      if _dashboardGrpc != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _dashboardGrpc, fieldNumber: 10)
      }
      if _apiGrpc != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _apiGrpc, fieldNumber: 11)
      }
      if _gameContent != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _gameContent, fieldNumber: 12)
      }
      if _accounts != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _accounts, fieldNumber: 13)
      }
      if _analyticsGrpc != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _analyticsGrpc, fieldNumber: 14)
      }
      if !_services.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _services, fieldNumber: 20)
      }
      if !_gameStorageProviders.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _gameStorageProviders, fieldNumber: 21)
      }
      if !_selfLearningConfigs.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,Apipb_SelfLearningConfig>.self, value: _selfLearningConfigs, fieldNumber: 22)
      }
      if !_configs.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _configs, fieldNumber: 23)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _environment != other._environment {return false}
      if _issuer != other._issuer {return false}
      if _isProduction != other._isProduction {return false}
      if _useTls != other._useTls {return false}
      if _registryGrpc != other._registryGrpc {return false}
      if _listenerGrpc != other._listenerGrpc {return false}
      if _watchGrpc != other._watchGrpc {return false}
      if _catalogGrpc != other._catalogGrpc {return false}
      if _contentGrpc != other._contentGrpc {return false}
      if _dashboardGrpc != other._dashboardGrpc {return false}
      if _apiGrpc != other._apiGrpc {return false}
      if _gameContent != other._gameContent {return false}
      if _accounts != other._accounts {return false}
      if _analyticsGrpc != other._analyticsGrpc {return false}
      if _services != other._services {return false}
      if _gameStorageProviders != other._gameStorageProviders {return false}
      if _selfLearningConfigs != other._selfLearningConfigs {return false}
      if _configs != other._configs {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._environment = _environment
      clone._issuer = _issuer
      clone._isProduction = _isProduction
      clone._useTls = _useTls
      clone._registryGrpc = _registryGrpc
      clone._listenerGrpc = _listenerGrpc
      clone._watchGrpc = _watchGrpc
      clone._catalogGrpc = _catalogGrpc
      clone._contentGrpc = _contentGrpc
      clone._dashboardGrpc = _dashboardGrpc
      clone._apiGrpc = _apiGrpc
      clone._gameContent = _gameContent
      clone._accounts = _accounts
      clone._analyticsGrpc = _analyticsGrpc
      clone._services = _services
      clone._gameStorageProviders = _gameStorageProviders
      clone._selfLearningConfigs = _selfLearningConfigs
      clone._configs = _configs
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var environment: String {
    get {return _storage._environment}
    set {_uniqueStorage()._environment = newValue}
  }

  public var issuer: String {
    get {return _storage._issuer}
    set {_uniqueStorage()._issuer = newValue}
  }

  public var isProduction: Bool {
    get {return _storage._isProduction}
    set {_uniqueStorage()._isProduction = newValue}
  }

  public var useTls: Bool {
    get {return _storage._useTls}
    set {_uniqueStorage()._useTls = newValue}
  }

  public var registryGrpc: String {
    get {return _storage._registryGrpc}
    set {_uniqueStorage()._registryGrpc = newValue}
  }

  public var listenerGrpc: String {
    get {return _storage._listenerGrpc}
    set {_uniqueStorage()._listenerGrpc = newValue}
  }

  public var watchGrpc: String {
    get {return _storage._watchGrpc}
    set {_uniqueStorage()._watchGrpc = newValue}
  }

  public var catalogGrpc: String {
    get {return _storage._catalogGrpc}
    set {_uniqueStorage()._catalogGrpc = newValue}
  }

  public var contentGrpc: String {
    get {return _storage._contentGrpc}
    set {_uniqueStorage()._contentGrpc = newValue}
  }

  public var dashboardGrpc: String {
    get {return _storage._dashboardGrpc}
    set {_uniqueStorage()._dashboardGrpc = newValue}
  }

  public var apiGrpc: String {
    get {return _storage._apiGrpc}
    set {_uniqueStorage()._apiGrpc = newValue}
  }

  ///  GameContent is registry service http url
  public var gameContent: String {
    get {return _storage._gameContent}
    set {_uniqueStorage()._gameContent = newValue}
  }

  public var accounts: String {
    get {return _storage._accounts}
    set {_uniqueStorage()._accounts = newValue}
  }

  public var analyticsGrpc: String {
    get {return _storage._analyticsGrpc}
    set {_uniqueStorage()._analyticsGrpc = newValue}
  }

  public var services: Dictionary<String,String> {
    get {return _storage._services}
    set {_uniqueStorage()._services = newValue}
  }

  public var gameStorageProviders: Dictionary<String,String> {
    get {return _storage._gameStorageProviders}
    set {_uniqueStorage()._gameStorageProviders = newValue}
  }

  public var selfLearningConfigs: Dictionary<String,Apipb_SelfLearningConfig> {
    get {return _storage._selfLearningConfigs}
    set {_uniqueStorage()._selfLearningConfigs = newValue}
  }

  public var configs: Dictionary<String,String> {
    get {return _storage._configs}
    set {_uniqueStorage()._configs = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_OtsimoServices) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_DiscoveryRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_DiscoveryRequest"}
  public var protoMessageName: String {return "DiscoveryRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "environment", swift: "environment"),
    2: .unique(proto: "sdk_version", json: "sdkVersion", swift: "sdkVersion"),
    3: .unique(proto: "os_name", json: "osName", swift: "osName"),
    4: .unique(proto: "country_code", json: "countryCode", swift: "countryCode"),
    5: .unique(proto: "app_bundle_id", json: "appBundleId", swift: "appBundleId"),
    6: .unique(proto: "app_bundle_version", json: "appBundleVersion", swift: "appBundleVersion"),
  ]


  public var environment: String = ""

  public var sdkVersion: String = ""

  public var osName: String = ""

  public var countryCode: String = ""

  public var appBundleId: String = ""

  public var appBundleVersion: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &environment)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &sdkVersion)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &osName)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &countryCode)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &appBundleId)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &appBundleVersion)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if environment != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: environment, fieldNumber: 1)
    }
    if sdkVersion != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: sdkVersion, fieldNumber: 2)
    }
    if osName != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: osName, fieldNumber: 3)
    }
    if countryCode != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: countryCode, fieldNumber: 4)
    }
    if appBundleId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: appBundleId, fieldNumber: 5)
    }
    if appBundleVersion != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: appBundleVersion, fieldNumber: 6)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_DiscoveryRequest) -> Bool {
    if environment != other.environment {return false}
    if sdkVersion != other.sdkVersion {return false}
    if osName != other.osName {return false}
    if countryCode != other.countryCode {return false}
    if appBundleId != other.appBundleId {return false}
    if appBundleVersion != other.appBundleVersion {return false}
    return true
  }
}

public struct Apipb_SelfLearningSegment: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_SelfLearningSegment"}
  public var protoMessageName: String {return "SelfLearningSegment"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "title", swift: "title"),
    2: .unique(proto: "base_query", json: "baseQuery", swift: "baseQuery"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_SelfLearningSegment
    var _title: String = ""
    var _baseQuery: Apipb_ContentListRequest? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_title)
      case 2: try setter.decodeSingularMessageField(fieldType: Apipb_ContentListRequest.self, value: &_baseQuery)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _title != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _title, fieldNumber: 1)
      }
      if let v = _baseQuery {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _title != other._title {return false}
      if _baseQuery != other._baseQuery {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._title = _title
      clone._baseQuery = _baseQuery
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var baseQuery: Apipb_ContentListRequest {
    get {return _storage._baseQuery ?? Apipb_ContentListRequest()}
    set {_uniqueStorage()._baseQuery = newValue}
  }
  public var hasBaseQuery: Bool {
    return _storage._baseQuery != nil
  }
  public mutating func clearBaseQuery() {
    return _storage._baseQuery = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_SelfLearningSegment) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_SelfLearningConfig: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_SelfLearningConfig"}
  public var protoMessageName: String {return "SelfLearningConfig"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "language", swift: "language"),
    2: .same(proto: "segments", swift: "segments"),
  ]


  public var language: String = ""

  public var segments: [Apipb_SelfLearningSegment] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &language)
    case 2: try setter.decodeRepeatedMessageField(fieldType: Apipb_SelfLearningSegment.self, value: &segments)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if language != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: language, fieldNumber: 1)
    }
    if !segments.isEmpty {
      try visitor.visitRepeatedMessageField(value: segments, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_SelfLearningConfig) -> Bool {
    if language != other.language {return false}
    if segments != other.segments {return false}
    return true
  }
}
