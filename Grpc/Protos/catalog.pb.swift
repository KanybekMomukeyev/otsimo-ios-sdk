/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: catalog.proto
 *
 */

import Foundation
import SwiftProtobuf


public enum Apipb_CatalogCategory: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case none // = 0
  case featured // = 1
  case new // = 2
  case recommendation // = 3
  case popular // = 4
  case recentlyUpdated // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .featured
    case 2: self = .new
    case 3: self = .recommendation
    case 4: self = .popular
    case 5: self = .recentlyUpdated
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "none": self = .none
    case "featured": self = .featured
    case "new": self = .new
    case "recommendation": self = .recommendation
    case "popular": self = .popular
    case "recentlyUpdated": self = .recentlyUpdated
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "NONE": self = .none
    case "FEATURED": self = .featured
    case "NEW": self = .new
    case "RECOMMENDATION": self = .recommendation
    case "POPULAR": self = .popular
    case "RECENTLY_UPDATED": self = .recentlyUpdated
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "NONE": self = .none
    case "FEATURED": self = .featured
    case "NEW": self = .new
    case "RECOMMENDATION": self = .recommendation
    case "POPULAR": self = .popular
    case "RECENTLY_UPDATED": self = .recentlyUpdated
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .none: return 0
      case .featured: return 1
      case .new: return 2
      case .recommendation: return 3
      case .popular: return 4
      case .recentlyUpdated: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .none: return "\"NONE\""
      case .featured: return "\"FEATURED\""
      case .new: return "\"NEW\""
      case .recommendation: return "\"RECOMMENDATION\""
      case .popular: return "\"POPULAR\""
      case .recentlyUpdated: return "\"RECENTLY_UPDATED\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .none: return ".none"
      case .featured: return ".featured"
      case .new: return ".new"
      case .recommendation: return ".recommendation"
      case .popular: return ".popular"
      case .recentlyUpdated: return ".recentlyUpdated"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

public enum Apipb_CatalogStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case draft // = 0
  case approved // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .draft
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .draft
    case 1: self = .approved
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "draft": self = .draft
    case "approved": self = .approved
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "DRAFT": self = .draft
    case "APPROVED": self = .approved
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "DRAFT": self = .draft
    case "APPROVED": self = .approved
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .draft: return 0
      case .approved: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .draft: return "\"DRAFT\""
      case .approved: return "\"APPROVED\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .draft: return ".draft"
      case .approved: return ".approved"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

public struct Apipb_CatalogItem: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_CatalogItem"}
  public var protoMessageName: String {return "CatalogItem"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "game_id", json: "gameId", swift: "gameId"),
    2: .same(proto: "category", swift: "category"),
    3: .same(proto: "index", swift: "index"),
  ]


  public var gameId: String = ""

  public var category: Apipb_CatalogCategory = Apipb_CatalogCategory.none

  public var index: Int32 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &gameId)
    case 2: try setter.decodeSingularField(fieldType: Apipb_CatalogCategory.self, value: &category)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &index)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if gameId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: gameId, fieldNumber: 1)
    }
    if category != Apipb_CatalogCategory.none {
      try visitor.visitSingularField(fieldType: Apipb_CatalogCategory.self, value: category, fieldNumber: 2)
    }
    if index != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: index, fieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_CatalogItem) -> Bool {
    if gameId != other.gameId {return false}
    if category != other.category {return false}
    if index != other.index {return false}
    return true
  }
}

public struct Apipb_Catalog: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_Catalog"}
  public var protoMessageName: String {return "Catalog"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "title", swift: "title"),
    2: .unique(proto: "created_at", json: "createdAt", swift: "createdAt"),
    3: .unique(proto: "visible_at", json: "visibleAt", swift: "visibleAt"),
    4: .unique(proto: "expires_at", json: "expiresAt", swift: "expiresAt"),
    5: .same(proto: "status", swift: "status"),
    9: .same(proto: "items", swift: "items"),
  ]


  public var title: String = ""

  public var createdAt: Int64 = 0

  public var visibleAt: Int64 = 0

  public var expiresAt: Int64 = 0

  public var status: Apipb_CatalogStatus = Apipb_CatalogStatus.draft

  public var items: [Apipb_CatalogItem] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &title)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &createdAt)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &visibleAt)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &expiresAt)
    case 5: try setter.decodeSingularField(fieldType: Apipb_CatalogStatus.self, value: &status)
    case 9: try setter.decodeRepeatedMessageField(fieldType: Apipb_CatalogItem.self, value: &items)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if title != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: title, fieldNumber: 1)
    }
    if createdAt != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: createdAt, fieldNumber: 2)
    }
    if visibleAt != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: visibleAt, fieldNumber: 3)
    }
    if expiresAt != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: expiresAt, fieldNumber: 4)
    }
    if status != Apipb_CatalogStatus.draft {
      try visitor.visitSingularField(fieldType: Apipb_CatalogStatus.self, value: status, fieldNumber: 5)
    }
    if !items.isEmpty {
      try visitor.visitRepeatedMessageField(value: items, fieldNumber: 9)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_Catalog) -> Bool {
    if title != other.title {return false}
    if createdAt != other.createdAt {return false}
    if visibleAt != other.visibleAt {return false}
    if expiresAt != other.expiresAt {return false}
    if status != other.status {return false}
    if items != other.items {return false}
    return true
  }
}

///  Request-Response
public struct Apipb_CatalogPullRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_CatalogPullRequest"}
  public var protoMessageName: String {return "CatalogPullRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "profile_id", json: "profileId", swift: "profileId"),
    2: .unique(proto: "client_version", json: "clientVersion", swift: "clientVersion"),
  ]


  public var profileId: String = ""

  public var clientVersion: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &profileId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &clientVersion)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if profileId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: profileId, fieldNumber: 1)
    }
    if clientVersion != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: clientVersion, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_CatalogPullRequest) -> Bool {
    if profileId != other.profileId {return false}
    if clientVersion != other.clientVersion {return false}
    return true
  }
}

public struct Apipb_CatalogListRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_CatalogListRequest"}
  public var protoMessageName: String {return "CatalogListRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "status", swift: "status"),
    2: .unique(proto: "hide_expired", json: "hideExpired", swift: "hideExpired"),
    3: .same(proto: "limit", swift: "limit"),
    4: .same(proto: "time", swift: "time"),
    5: .same(proto: "offset", swift: "offset"),
  ]


  public enum ListStatus: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case both // = 0
    case onlyDraft // = 1
    case onlyApproved // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .both
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .both
      case 1: self = .onlyDraft
      case 2: self = .onlyApproved
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "both": self = .both
      case "onlyDraft": self = .onlyDraft
      case "onlyApproved": self = .onlyApproved
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "BOTH": self = .both
      case "ONLY_DRAFT": self = .onlyDraft
      case "ONLY_APPROVED": self = .onlyApproved
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "BOTH": self = .both
      case "ONLY_DRAFT": self = .onlyDraft
      case "ONLY_APPROVED": self = .onlyApproved
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .both: return 0
        case .onlyDraft: return 1
        case .onlyApproved: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .both: return "\"BOTH\""
        case .onlyDraft: return "\"ONLY_DRAFT\""
        case .onlyApproved: return "\"ONLY_APPROVED\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .both: return ".both"
        case .onlyDraft: return ".onlyDraft"
        case .onlyApproved: return ".onlyApproved"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public var status: Apipb_CatalogListRequest.ListStatus = Apipb_CatalogListRequest.ListStatus.both

  public var hideExpired: Bool = false

  public var limit: Int32 = 0

  public var time: Int64 = 0

  public var offset: Int32 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: Apipb_CatalogListRequest.ListStatus.self, value: &status)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &hideExpired)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &limit)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &time)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &offset)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if status != Apipb_CatalogListRequest.ListStatus.both {
      try visitor.visitSingularField(fieldType: Apipb_CatalogListRequest.ListStatus.self, value: status, fieldNumber: 1)
    }
    if hideExpired != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: hideExpired, fieldNumber: 2)
    }
    if limit != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: limit, fieldNumber: 3)
    }
    if time != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: time, fieldNumber: 4)
    }
    if offset != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: offset, fieldNumber: 5)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_CatalogListRequest) -> Bool {
    if status != other.status {return false}
    if hideExpired != other.hideExpired {return false}
    if limit != other.limit {return false}
    if time != other.time {return false}
    if offset != other.offset {return false}
    return true
  }
}

public struct Apipb_CatalogListResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_CatalogListResponse"}
  public var protoMessageName: String {return "CatalogListResponse"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "catalogs", swift: "catalogs"),
  ]


  public var catalogs: [Apipb_Catalog] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Apipb_Catalog.self, value: &catalogs)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !catalogs.isEmpty {
      try visitor.visitRepeatedMessageField(value: catalogs, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_CatalogListResponse) -> Bool {
    if catalogs != other.catalogs {return false}
    return true
  }
}

public struct Apipb_CatalogApproveRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_CatalogApproveRequest"}
  public var protoMessageName: String {return "CatalogApproveRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "title", swift: "title"),
  ]


  public var title: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &title)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if title != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: title, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_CatalogApproveRequest) -> Bool {
    if title != other.title {return false}
    return true
  }
}
