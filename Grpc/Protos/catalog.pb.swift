/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: catalog.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

fileprivate let _protobuf_package = "apipb"

public enum Apipb_CatalogCategory: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  public typealias RawValue = Int
  case none // = 0
  case featured // = 1
  case new // = 2
  case recommendation // = 3
  case popular // = 4
  case recentlyUpdated // = 5
  case UNRECOGNIZED(Int)

  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "FEATURED"),
    2: .same(proto: "NEW"),
    3: .same(proto: "RECOMMENDATION"),
    4: .same(proto: "POPULAR"),
    5: .same(proto: "RECENTLY_UPDATED"),
  ]

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .featured
    case 2: self = .new
    case 3: self = .recommendation
    case 4: self = .popular
    case 5: self = .recentlyUpdated
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .none: return 0
    case .featured: return 1
    case .new: return 2
    case .recommendation: return 3
    case .popular: return 4
    case .recentlyUpdated: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum Apipb_CatalogStatus: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  public typealias RawValue = Int
  case draft // = 0
  case approved // = 1
  case UNRECOGNIZED(Int)

  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DRAFT"),
    1: .same(proto: "APPROVED"),
  ]

  public init() {
    self = .draft
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .draft
    case 1: self = .approved
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .draft: return 0
    case .approved: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public struct Apipb_CatalogItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CatalogItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_id"),
    2: .same(proto: "category"),
    3: .same(proto: "index"),
  ]

  public var gameId: String = ""

  public var category: Apipb_CatalogCategory = Apipb_CatalogCategory.none

  public var index: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &gameId)
      case 2: try decoder.decodeSingularEnumField(value: &category)
      case 3: try decoder.decodeSingularInt32Field(value: &index)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !gameId.isEmpty {
      try visitor.visitSingularStringField(value: gameId, fieldNumber: 1)
    }
    if category != Apipb_CatalogCategory.none {
      try visitor.visitSingularEnumField(value: category, fieldNumber: 2)
    }
    if index != 0 {
      try visitor.visitSingularInt32Field(value: index, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_CatalogItem) -> Bool {
    if gameId != other.gameId {return false}
    if category != other.category {return false}
    if index != other.index {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_Catalog: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Catalog"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .standard(proto: "created_at"),
    3: .standard(proto: "visible_at"),
    4: .standard(proto: "expires_at"),
    5: .same(proto: "status"),
    9: .same(proto: "items"),
  ]

  public var title: String = ""

  public var createdAt: Int64 = 0

  public var visibleAt: Int64 = 0

  public var expiresAt: Int64 = 0

  public var status: Apipb_CatalogStatus = Apipb_CatalogStatus.draft

  public var items: [Apipb_CatalogItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &title)
      case 2: try decoder.decodeSingularInt64Field(value: &createdAt)
      case 3: try decoder.decodeSingularInt64Field(value: &visibleAt)
      case 4: try decoder.decodeSingularInt64Field(value: &expiresAt)
      case 5: try decoder.decodeSingularEnumField(value: &status)
      case 9: try decoder.decodeRepeatedMessageField(value: &items)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !title.isEmpty {
      try visitor.visitSingularStringField(value: title, fieldNumber: 1)
    }
    if createdAt != 0 {
      try visitor.visitSingularInt64Field(value: createdAt, fieldNumber: 2)
    }
    if visibleAt != 0 {
      try visitor.visitSingularInt64Field(value: visibleAt, fieldNumber: 3)
    }
    if expiresAt != 0 {
      try visitor.visitSingularInt64Field(value: expiresAt, fieldNumber: 4)
    }
    if status != Apipb_CatalogStatus.draft {
      try visitor.visitSingularEnumField(value: status, fieldNumber: 5)
    }
    if !items.isEmpty {
      try visitor.visitRepeatedMessageField(value: items, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_Catalog) -> Bool {
    if title != other.title {return false}
    if createdAt != other.createdAt {return false}
    if visibleAt != other.visibleAt {return false}
    if expiresAt != other.expiresAt {return false}
    if status != other.status {return false}
    if items != other.items {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///  Request-Response
public struct Apipb_CatalogPullRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CatalogPullRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "profile_id"),
    2: .standard(proto: "client_version"),
  ]

  public var profileId: String = ""

  public var clientVersion: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &profileId)
      case 2: try decoder.decodeSingularStringField(value: &clientVersion)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !profileId.isEmpty {
      try visitor.visitSingularStringField(value: profileId, fieldNumber: 1)
    }
    if !clientVersion.isEmpty {
      try visitor.visitSingularStringField(value: clientVersion, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_CatalogPullRequest) -> Bool {
    if profileId != other.profileId {return false}
    if clientVersion != other.clientVersion {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_CatalogListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CatalogListRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "hide_expired"),
    3: .same(proto: "limit"),
    4: .same(proto: "time"),
    5: .same(proto: "offset"),
  ]

  public var status: Apipb_CatalogListRequest.ListStatus = Apipb_CatalogListRequest.ListStatus.both

  public var hideExpired: Bool = false

  public var limit: Int32 = 0

  public var time: Int64 = 0

  public var offset: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum ListStatus: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case both // = 0
    case onlyDraft // = 1
    case onlyApproved // = 2
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "BOTH"),
      1: .same(proto: "ONLY_DRAFT"),
      2: .same(proto: "ONLY_APPROVED"),
    ]

    public init() {
      self = .both
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .both
      case 1: self = .onlyDraft
      case 2: self = .onlyApproved
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .both: return 0
      case .onlyDraft: return 1
      case .onlyApproved: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &status)
      case 2: try decoder.decodeSingularBoolField(value: &hideExpired)
      case 3: try decoder.decodeSingularInt32Field(value: &limit)
      case 4: try decoder.decodeSingularInt64Field(value: &time)
      case 5: try decoder.decodeSingularInt32Field(value: &offset)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if status != Apipb_CatalogListRequest.ListStatus.both {
      try visitor.visitSingularEnumField(value: status, fieldNumber: 1)
    }
    if hideExpired != false {
      try visitor.visitSingularBoolField(value: hideExpired, fieldNumber: 2)
    }
    if limit != 0 {
      try visitor.visitSingularInt32Field(value: limit, fieldNumber: 3)
    }
    if time != 0 {
      try visitor.visitSingularInt64Field(value: time, fieldNumber: 4)
    }
    if offset != 0 {
      try visitor.visitSingularInt32Field(value: offset, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_CatalogListRequest) -> Bool {
    if status != other.status {return false}
    if hideExpired != other.hideExpired {return false}
    if limit != other.limit {return false}
    if time != other.time {return false}
    if offset != other.offset {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_CatalogListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CatalogListResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "catalogs"),
  ]

  public var catalogs: [Apipb_Catalog] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &catalogs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !catalogs.isEmpty {
      try visitor.visitRepeatedMessageField(value: catalogs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_CatalogListResponse) -> Bool {
    if catalogs != other.catalogs {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_CatalogApproveRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CatalogApproveRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
  ]

  public var title: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &title)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !title.isEmpty {
      try visitor.visitSingularStringField(value: title, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_CatalogApproveRequest) -> Bool {
    if title != other.title {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
