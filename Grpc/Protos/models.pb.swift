/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: models.proto
 *
 */

import Foundation
import SwiftProtobuf


public enum Apipb_Gender: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case male // = 1
  case female // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .male
    case 2: self = .female
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "unknown": self = .unknown
    case "male": self = .male
    case "female": self = .female
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "UNKNOWN": self = .unknown
    case "MALE": self = .male
    case "FEMALE": self = .female
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "UNKNOWN": self = .unknown
    case "MALE": self = .male
    case "FEMALE": self = .female
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .unknown: return 0
      case .male: return 1
      case .female: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .unknown: return "\"UNKNOWN\""
      case .male: return "\"MALE\""
      case .female: return "\"FEMALE\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .unknown: return ".unknown"
      case .male: return ".male"
      case .female: return ".female"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

public enum Apipb_ReleaseState: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case created // = 0
  case development // = 1
  case waiting // = 2
  case rejected // = 3
  case validated // = 4
  case production // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .created
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .created
    case 1: self = .development
    case 2: self = .waiting
    case 3: self = .rejected
    case 4: self = .validated
    case 5: self = .production
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "created": self = .created
    case "development": self = .development
    case "waiting": self = .waiting
    case "rejected": self = .rejected
    case "validated": self = .validated
    case "production": self = .production
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "CREATED": self = .created
    case "DEVELOPMENT": self = .development
    case "WAITING": self = .waiting
    case "REJECTED": self = .rejected
    case "VALIDATED": self = .validated
    case "PRODUCTION": self = .production
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "CREATED": self = .created
    case "DEVELOPMENT": self = .development
    case "WAITING": self = .waiting
    case "REJECTED": self = .rejected
    case "VALIDATED": self = .validated
    case "PRODUCTION": self = .production
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .created: return 0
      case .development: return 1
      case .waiting: return 2
      case .rejected: return 3
      case .validated: return 4
      case .production: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .created: return "\"CREATED\""
      case .development: return "\"DEVELOPMENT\""
      case .waiting: return "\"WAITING\""
      case .rejected: return "\"REJECTED\""
      case .validated: return "\"VALIDATED\""
      case .production: return "\"PRODUCTION\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .created: return ".created"
      case .development: return ".development"
      case .waiting: return ".waiting"
      case .rejected: return ".rejected"
      case .validated: return ".validated"
      case .production: return ".production"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

//  Data models

public struct Apipb_Address: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_Address"}
  public var protoMessageName: String {return "Address"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "street_address", json: "streetAddress", swift: "streetAddress"),
    2: .same(proto: "city", swift: "city"),
    3: .same(proto: "state", swift: "state"),
    4: .unique(proto: "zip_code", json: "zipCode", swift: "zipCode"),
    5: .unique(proto: "country_code", json: "countryCode", swift: "countryCode"),
  ]


  public var streetAddress: String = ""

  public var city: String = ""

  public var state: String = ""

  public var zipCode: String = ""

  public var countryCode: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &streetAddress)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &city)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &state)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &zipCode)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &countryCode)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if streetAddress != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: streetAddress, fieldNumber: 1)
    }
    if city != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: city, fieldNumber: 2)
    }
    if state != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: state, fieldNumber: 3)
    }
    if zipCode != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: zipCode, fieldNumber: 4)
    }
    if countryCode != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: countryCode, fieldNumber: 5)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_Address) -> Bool {
    if streetAddress != other.streetAddress {return false}
    if city != other.city {return false}
    if state != other.state {return false}
    if zipCode != other.zipCode {return false}
    if countryCode != other.countryCode {return false}
    return true
  }
}

public struct Apipb_Profile: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_Profile"}
  public var protoMessageName: String {return "Profile"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "email", swift: "email"),
    3: .unique(proto: "first_name", json: "firstName", swift: "firstName"),
    4: .unique(proto: "last_name", json: "lastName", swift: "lastName"),
    5: .same(proto: "language", swift: "language"),
    6: .unique(proto: "mobile_phone", json: "mobilePhone", swift: "mobilePhone"),
    7: .same(proto: "address", swift: "address"),
    8: .unique(proto: "created_at", json: "createdAt", swift: "createdAt"),
    9: .unique(proto: "last_updated", json: "lastUpdated", swift: "lastUpdated"),
    10: .same(proto: "locale", swift: "locale"),
    11: .same(proto: "timezone", swift: "timezone"),
    12: .same(proto: "country", swift: "country"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_Profile
    var _id: String = ""
    var _email: String = ""
    var _firstName: String = ""
    var _lastName: String = ""
    var _language: String = ""
    var _mobilePhone: String = ""
    var _address: Apipb_Address? = nil
    var _createdAt: Int64 = 0
    var _lastUpdated: Int64 = 0
    var _locale: String = ""
    var _timezone: Int32 = 0
    var _country: String = ""

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_id)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_email)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_firstName)
      case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_lastName)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_language)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_mobilePhone)
      case 7: try setter.decodeSingularMessageField(fieldType: Apipb_Address.self, value: &_address)
      case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_createdAt)
      case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_lastUpdated)
      case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_locale)
      case 11: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_timezone)
      case 12: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_country)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _id != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _id, fieldNumber: 1)
      }
      if _email != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _email, fieldNumber: 2)
      }
      if _firstName != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _firstName, fieldNumber: 3)
      }
      if _lastName != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _lastName, fieldNumber: 4)
      }
      if _language != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _language, fieldNumber: 5)
      }
      if _mobilePhone != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _mobilePhone, fieldNumber: 6)
      }
      if let v = _address {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if _createdAt != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _createdAt, fieldNumber: 8)
      }
      if _lastUpdated != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _lastUpdated, fieldNumber: 9)
      }
      if _locale != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _locale, fieldNumber: 10)
      }
      if _timezone != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _timezone, fieldNumber: 11)
      }
      if _country != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _country, fieldNumber: 12)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _id != other._id {return false}
      if _email != other._email {return false}
      if _firstName != other._firstName {return false}
      if _lastName != other._lastName {return false}
      if _language != other._language {return false}
      if _mobilePhone != other._mobilePhone {return false}
      if _address != other._address {return false}
      if _createdAt != other._createdAt {return false}
      if _lastUpdated != other._lastUpdated {return false}
      if _locale != other._locale {return false}
      if _timezone != other._timezone {return false}
      if _country != other._country {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._id = _id
      clone._email = _email
      clone._firstName = _firstName
      clone._lastName = _lastName
      clone._language = _language
      clone._mobilePhone = _mobilePhone
      clone._address = _address
      clone._createdAt = _createdAt
      clone._lastUpdated = _lastUpdated
      clone._locale = _locale
      clone._timezone = _timezone
      clone._country = _country
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var email: String {
    get {return _storage._email}
    set {_uniqueStorage()._email = newValue}
  }

  public var firstName: String {
    get {return _storage._firstName}
    set {_uniqueStorage()._firstName = newValue}
  }

  public var lastName: String {
    get {return _storage._lastName}
    set {_uniqueStorage()._lastName = newValue}
  }

  public var language: String {
    get {return _storage._language}
    set {_uniqueStorage()._language = newValue}
  }

  public var mobilePhone: String {
    get {return _storage._mobilePhone}
    set {_uniqueStorage()._mobilePhone = newValue}
  }

  public var address: Apipb_Address {
    get {return _storage._address ?? Apipb_Address()}
    set {_uniqueStorage()._address = newValue}
  }
  public var hasAddress: Bool {
    return _storage._address != nil
  }
  public mutating func clearAddress() {
    return _storage._address = nil
  }

  public var createdAt: Int64 {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  public var lastUpdated: Int64 {
    get {return _storage._lastUpdated}
    set {_uniqueStorage()._lastUpdated = newValue}
  }

  public var locale: String {
    get {return _storage._locale}
    set {_uniqueStorage()._locale = newValue}
  }

  public var timezone: Int32 {
    get {return _storage._timezone}
    set {_uniqueStorage()._timezone = newValue}
  }

  public var country: String {
    get {return _storage._country}
    set {_uniqueStorage()._country = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_Profile) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_ChildGameEntry: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_ChildGameEntry"}
  public var protoMessageName: String {return "ChildGameEntry"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "active", swift: "active"),
    3: .unique(proto: "dashboard_index", json: "dashboardIndex", swift: "dashboardIndex"),
    4: .same(proto: "settings", swift: "settings"),
    5: .unique(proto: "added_at", json: "addedAt", swift: "addedAt"),
    6: .unique(proto: "activation_changed_at", json: "activationChangedAt", swift: "activationChangedAt"),
    7: .unique(proto: "updated_at", json: "updatedAt", swift: "updatedAt"),
    8: .unique(proto: "local_settings", json: "localSettings", swift: "localSettings"),
    9: .unique(proto: "local_settings_version", json: "localSettingsVersion", swift: "localSettingsVersion"),
  ]


  public var id: String = ""

  public var active: Bool = false

  public var dashboardIndex: Int32 = 0

  public var settings: Data = Data()

  public var addedAt: Int64 = 0

  public var activationChangedAt: Int64 = 0

  public var updatedAt: Int64 = 0

  public var localSettings: Data = Data()

  public var localSettingsVersion: Int64 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &id)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &active)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &dashboardIndex)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &settings)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &addedAt)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &activationChangedAt)
    case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &updatedAt)
    case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &localSettings)
    case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &localSettingsVersion)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: id, fieldNumber: 1)
    }
    if active != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: active, fieldNumber: 2)
    }
    if dashboardIndex != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: dashboardIndex, fieldNumber: 3)
    }
    if settings != Data() {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: settings, fieldNumber: 4)
    }
    if addedAt != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: addedAt, fieldNumber: 5)
    }
    if activationChangedAt != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: activationChangedAt, fieldNumber: 6)
    }
    if updatedAt != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: updatedAt, fieldNumber: 7)
    }
    if localSettings != Data() {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: localSettings, fieldNumber: 8)
    }
    if localSettingsVersion != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: localSettingsVersion, fieldNumber: 9)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_ChildGameEntry) -> Bool {
    if id != other.id {return false}
    if active != other.active {return false}
    if dashboardIndex != other.dashboardIndex {return false}
    if settings != other.settings {return false}
    if addedAt != other.addedAt {return false}
    if activationChangedAt != other.activationChangedAt {return false}
    if updatedAt != other.updatedAt {return false}
    if localSettings != other.localSettings {return false}
    if localSettingsVersion != other.localSettingsVersion {return false}
    return true
  }
}

public struct Apipb_Child: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_Child"}
  public var protoMessageName: String {return "Child"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .unique(proto: "parent_id", json: "parentId", swift: "parentId"),
    3: .unique(proto: "first_name", json: "firstName", swift: "firstName"),
    4: .unique(proto: "last_name", json: "lastName", swift: "lastName"),
    5: .unique(proto: "birth_day", json: "birthDay", swift: "birthDay"),
    7: .same(proto: "gender", swift: "gender"),
    8: .same(proto: "language", swift: "language"),
    9: .same(proto: "games", swift: "games"),
    10: .same(proto: "active", swift: "active"),
    11: .unique(proto: "logged_in", json: "loggedIn", swift: "loggedIn"),
    12: .unique(proto: "sounds_enabled", json: "soundsEnabled", swift: "soundsEnabled"),
    13: .same(proto: "locale", swift: "locale"),
    15: .unique(proto: "created_at", json: "createdAt", swift: "createdAt"),
    16: .unique(proto: "last_updated", json: "lastUpdated", swift: "lastUpdated"),
    17: .unique(proto: "child_info", json: "childInfo", swift: "childInfo"),
  ]


  public var id: String = ""

  public var parentId: String = ""

  public var firstName: String = ""

  public var lastName: String = ""

  public var birthDay: Int64 = 0

  public var gender: Apipb_Gender = Apipb_Gender.unknown

  public var language: String = ""

  public var games: [Apipb_ChildGameEntry] = []

  public var active: Bool = false

  public var loggedIn: Bool = false

  public var soundsEnabled: Bool = false

  public var locale: String = ""

  public var createdAt: Int64 = 0

  public var lastUpdated: Int64 = 0

  public var childInfo: Dictionary<String,String> = [:]

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &id)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &parentId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &firstName)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &lastName)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &birthDay)
    case 7: try setter.decodeSingularField(fieldType: Apipb_Gender.self, value: &gender)
    case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &language)
    case 9: try setter.decodeRepeatedMessageField(fieldType: Apipb_ChildGameEntry.self, value: &games)
    case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &active)
    case 11: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &loggedIn)
    case 12: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &soundsEnabled)
    case 13: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &locale)
    case 15: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &createdAt)
    case 16: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &lastUpdated)
    case 17: try setter.decodeMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &childInfo)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: id, fieldNumber: 1)
    }
    if parentId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: parentId, fieldNumber: 2)
    }
    if firstName != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: firstName, fieldNumber: 3)
    }
    if lastName != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: lastName, fieldNumber: 4)
    }
    if birthDay != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: birthDay, fieldNumber: 5)
    }
    if gender != Apipb_Gender.unknown {
      try visitor.visitSingularField(fieldType: Apipb_Gender.self, value: gender, fieldNumber: 7)
    }
    if language != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: language, fieldNumber: 8)
    }
    if !games.isEmpty {
      try visitor.visitRepeatedMessageField(value: games, fieldNumber: 9)
    }
    if active != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: active, fieldNumber: 10)
    }
    if loggedIn != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: loggedIn, fieldNumber: 11)
    }
    if soundsEnabled != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: soundsEnabled, fieldNumber: 12)
    }
    if locale != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: locale, fieldNumber: 13)
    }
    if createdAt != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: createdAt, fieldNumber: 15)
    }
    if lastUpdated != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: lastUpdated, fieldNumber: 16)
    }
    if !childInfo.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: childInfo, fieldNumber: 17)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_Child) -> Bool {
    if id != other.id {return false}
    if parentId != other.parentId {return false}
    if firstName != other.firstName {return false}
    if lastName != other.lastName {return false}
    if birthDay != other.birthDay {return false}
    if gender != other.gender {return false}
    if language != other.language {return false}
    if games != other.games {return false}
    if active != other.active {return false}
    if loggedIn != other.loggedIn {return false}
    if soundsEnabled != other.soundsEnabled {return false}
    if locale != other.locale {return false}
    if createdAt != other.createdAt {return false}
    if lastUpdated != other.lastUpdated {return false}
    if childInfo != other.childInfo {return false}
    return true
  }
}

public struct Apipb_Author: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_Author"}
  public var protoMessageName: String {return "Author"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "name", swift: "name"),
    2: .same(proto: "email", swift: "email"),
  ]


  public var name: String = ""

  public var email: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &name)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &email)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if name != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: name, fieldNumber: 1)
    }
    if email != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: email, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_Author) -> Bool {
    if name != other.name {return false}
    if email != other.email {return false}
    return true
  }
}

public struct Apipb_GameMetadata: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GameMetadata"}
  public var protoMessageName: String {return "GameMetadata"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "language", swift: "language"),
    2: .unique(proto: "visible_name", json: "visibleName", swift: "visibleName"),
    3: .same(proto: "summary", swift: "summary"),
    4: .same(proto: "description", swift: "description_p"),
    5: .same(proto: "logo", swift: "logo"),
    6: .same(proto: "icon", swift: "icon"),
    7: .same(proto: "keywords", swift: "keywords"),
    8: .same(proto: "images", swift: "images"),
    9: .unique(proto: "info_slug", json: "infoSlug", swift: "infoSlug"),
    10: .same(proto: "assets", swift: "assets"),
  ]


  public var language: String = ""

  ///   Visible Name 
  public var visibleName: String = ""

  ///   Summary is summary of game 
  public var summary: String = ""

  ///   Description 
  public var description_p: String = ""

  ///   Logo is a rectangle image 
  public var logo: String = ""

  ///   Icon is a square image
  public var icon: String = ""

  ///   Keywords     
  public var keywords: [String] = []

  ///   Images are image files that show on market
  public var images: [String] = []

  ///   InfoSlug is the id of the content which describes how to play this game
  public var infoSlug: String = ""

  ///  Assets are asset folders or paths for this language
  public var assets: [String] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &language)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &visibleName)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &summary)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &description_p)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &logo)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &icon)
    case 7: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &keywords)
    case 8: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &images)
    case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &infoSlug)
    case 10: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &assets)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if language != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: language, fieldNumber: 1)
    }
    if visibleName != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: visibleName, fieldNumber: 2)
    }
    if summary != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: summary, fieldNumber: 3)
    }
    if description_p != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: description_p, fieldNumber: 4)
    }
    if logo != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: logo, fieldNumber: 5)
    }
    if icon != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: icon, fieldNumber: 6)
    }
    if !keywords.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: keywords, fieldNumber: 7)
    }
    if !images.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: images, fieldNumber: 8)
    }
    if infoSlug != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: infoSlug, fieldNumber: 9)
    }
    if !assets.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: assets, fieldNumber: 10)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GameMetadata) -> Bool {
    if language != other.language {return false}
    if visibleName != other.visibleName {return false}
    if summary != other.summary {return false}
    if description_p != other.description_p {return false}
    if logo != other.logo {return false}
    if icon != other.icon {return false}
    if keywords != other.keywords {return false}
    if images != other.images {return false}
    if infoSlug != other.infoSlug {return false}
    if assets != other.assets {return false}
    return true
  }
}

public struct Apipb_GameManifest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GameManifest"}
  public var protoMessageName: String {return "GameManifest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "unique_name", json: "uniqueName", swift: "uniqueName"),
    2: .same(proto: "licence", swift: "licence"),
    3: .same(proto: "languages", swift: "languages"),
    4: .same(proto: "homepage", swift: "homepage"),
    5: .same(proto: "main", swift: "main"),
    6: .same(proto: "version", swift: "version"),
    7: .same(proto: "authors", swift: "authors"),
    8: .same(proto: "repository", swift: "repository"),
    9: .unique(proto: "supported_orientations", json: "supportedOrientations", swift: "supportedOrientations"),
    13: .same(proto: "metadata", swift: "metadata"),
    14: .same(proto: "exclude", swift: "exclude"),
    15: .same(proto: "settings", swift: "settings"),
    16: .unique(proto: "kv_path", json: "kvPath", swift: "kvPath"),
    17: .unique(proto: "developer_name", json: "developerName", swift: "developerName"),
    18: .unique(proto: "default_language", json: "defaultLanguage", swift: "defaultLanguage"),
    19: .unique(proto: "loading_color", json: "loadingColor", swift: "loadingColor"),
    20: .same(proto: "capabilities", swift: "capabilities"),
    21: .unique(proto: "ab_test", json: "abTest", swift: "abTest"),
    22: .same(proto: "labels", swift: "labels"),
    23: .unique(proto: "manifest_version", json: "manifestVersion", swift: "manifestVersion"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_GameManifest
    var _uniqueName: String = ""
    var _licence: String = ""
    var _languages: [String] = []
    var _homepage: String = ""
    var _main: String = ""
    var _version: String = ""
    var _authors: [Apipb_Author] = []
    var _repository: String = ""
    var _supportedOrientations: [String] = []
    var _metadata: [Apipb_GameMetadata] = []
    var _exclude: [String] = []
    var _settings: String = ""
    var _kvPath: String = ""
    var _developerName: String = ""
    var _defaultLanguage: String = ""
    var _loadingColor: String = ""
    var _capabilities: [String] = []
    var _abTest: String = ""
    var _labels: Dictionary<String,String> = [:]
    var _manifestVersion: Int32 = 0

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_uniqueName)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_licence)
      case 3: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_languages)
      case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_homepage)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_main)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_version)
      case 7: try setter.decodeRepeatedMessageField(fieldType: Apipb_Author.self, value: &_authors)
      case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_repository)
      case 9: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_supportedOrientations)
      case 13: try setter.decodeRepeatedMessageField(fieldType: Apipb_GameMetadata.self, value: &_metadata)
      case 14: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_exclude)
      case 15: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_settings)
      case 16: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_kvPath)
      case 17: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_developerName)
      case 18: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_defaultLanguage)
      case 19: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_loadingColor)
      case 20: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_capabilities)
      case 21: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_abTest)
      case 22: try setter.decodeMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_labels)
      case 23: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_manifestVersion)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _uniqueName != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _uniqueName, fieldNumber: 1)
      }
      if _licence != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _licence, fieldNumber: 2)
      }
      if !_languages.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _languages, fieldNumber: 3)
      }
      if _homepage != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _homepage, fieldNumber: 4)
      }
      if _main != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _main, fieldNumber: 5)
      }
      if _version != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _version, fieldNumber: 6)
      }
      if !_authors.isEmpty {
        try visitor.visitRepeatedMessageField(value: _authors, fieldNumber: 7)
      }
      if _repository != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _repository, fieldNumber: 8)
      }
      if !_supportedOrientations.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _supportedOrientations, fieldNumber: 9)
      }
      if !_metadata.isEmpty {
        try visitor.visitRepeatedMessageField(value: _metadata, fieldNumber: 13)
      }
      if !_exclude.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _exclude, fieldNumber: 14)
      }
      if _settings != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _settings, fieldNumber: 15)
      }
      if _kvPath != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _kvPath, fieldNumber: 16)
      }
      if _developerName != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _developerName, fieldNumber: 17)
      }
      if _defaultLanguage != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _defaultLanguage, fieldNumber: 18)
      }
      if _loadingColor != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _loadingColor, fieldNumber: 19)
      }
      if !_capabilities.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _capabilities, fieldNumber: 20)
      }
      if _abTest != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _abTest, fieldNumber: 21)
      }
      if !_labels.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _labels, fieldNumber: 22)
      }
      if _manifestVersion != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _manifestVersion, fieldNumber: 23)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _uniqueName != other._uniqueName {return false}
      if _licence != other._licence {return false}
      if _languages != other._languages {return false}
      if _homepage != other._homepage {return false}
      if _main != other._main {return false}
      if _version != other._version {return false}
      if _authors != other._authors {return false}
      if _repository != other._repository {return false}
      if _supportedOrientations != other._supportedOrientations {return false}
      if _metadata != other._metadata {return false}
      if _exclude != other._exclude {return false}
      if _settings != other._settings {return false}
      if _kvPath != other._kvPath {return false}
      if _developerName != other._developerName {return false}
      if _defaultLanguage != other._defaultLanguage {return false}
      if _loadingColor != other._loadingColor {return false}
      if _capabilities != other._capabilities {return false}
      if _abTest != other._abTest {return false}
      if _labels != other._labels {return false}
      if _manifestVersion != other._manifestVersion {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._uniqueName = _uniqueName
      clone._licence = _licence
      clone._languages = _languages
      clone._homepage = _homepage
      clone._main = _main
      clone._version = _version
      clone._authors = _authors
      clone._repository = _repository
      clone._supportedOrientations = _supportedOrientations
      clone._metadata = _metadata
      clone._exclude = _exclude
      clone._settings = _settings
      clone._kvPath = _kvPath
      clone._developerName = _developerName
      clone._defaultLanguage = _defaultLanguage
      clone._loadingColor = _loadingColor
      clone._capabilities = _capabilities
      clone._abTest = _abTest
      clone._labels = _labels
      clone._manifestVersion = _manifestVersion
      return clone
    }
  }

  private var _storage = _StorageClass()


  ///   Unique Name of game
  public var uniqueName: String {
    get {return _storage._uniqueName}
    set {_uniqueStorage()._uniqueName = newValue}
  }

  ///   Licence 
  public var licence: String {
    get {return _storage._licence}
    set {_uniqueStorage()._licence = newValue}
  }

  ///  Languages
  public var languages: [String] {
    get {return _storage._languages}
    set {_uniqueStorage()._languages = newValue}
  }

  ///   Homepage is the website of game
  public var homepage: String {
    get {return _storage._homepage}
    set {_uniqueStorage()._homepage = newValue}
  }

  ///   Main points to index.html file
  public var main: String {
    get {return _storage._main}
    set {_uniqueStorage()._main = newValue}
  }

  ///   Version is current version for using on manifest file
  public var version: String {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  ///   Authors is for using at manifest file
  public var authors: [Apipb_Author] {
    get {return _storage._authors}
    set {_uniqueStorage()._authors = newValue}
  }

  ///   Repository 
  public var repository: String {
    get {return _storage._repository}
    set {_uniqueStorage()._repository = newValue}
  }

  ///  SupportedOrientations are the orientations that can be used for this app
  public var supportedOrientations: [String] {
    get {return _storage._supportedOrientations}
    set {_uniqueStorage()._supportedOrientations = newValue}
  }

  ///  Metadata information for each languages
  public var metadata: [Apipb_GameMetadata] {
    get {return _storage._metadata}
    set {_uniqueStorage()._metadata = newValue}
  }

  ///  Exclude directories when building
  public var exclude: [String] {
    get {return _storage._exclude}
    set {_uniqueStorage()._exclude = newValue}
  }

  ///  Settings.json path
  public var settings: String {
    get {return _storage._settings}
    set {_uniqueStorage()._settings = newValue}
  }

  ///  KV directory path
  public var kvPath: String {
    get {return _storage._kvPath}
    set {_uniqueStorage()._kvPath = newValue}
  }

  ///  DeveloperName is the visible developer name
  public var developerName: String {
    get {return _storage._developerName}
    set {_uniqueStorage()._developerName = newValue}
  }

  ///  DefaultLanguage
  public var defaultLanguage: String {
    get {return _storage._defaultLanguage}
    set {_uniqueStorage()._defaultLanguage = newValue}
  }

  ///  Loading Background Color of the Game
  public var loadingColor: String {
    get {return _storage._loadingColor}
    set {_uniqueStorage()._loadingColor = newValue}
  }

  ///  Capabilities are required host app features. The most basic capability is 'sandbox'.  
  public var capabilities: [String] {
    get {return _storage._capabilities}
    set {_uniqueStorage()._capabilities = newValue}
  }

  ///  AbTest determines whether or not this version is for ab testing
  public var abTest: String {
    get {return _storage._abTest}
    set {_uniqueStorage()._abTest = newValue}
  }

  ///  Labels are string key value pairs
  public var labels: Dictionary<String,String> {
    get {return _storage._labels}
    set {_uniqueStorage()._labels = newValue}
  }

  ///  ManifestVersion 
  public var manifestVersion: Int32 {
    get {return _storage._manifestVersion}
    set {_uniqueStorage()._manifestVersion = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GameManifest) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_Game: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_Game"}
  public var protoMessageName: String {return "Game"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .unique(proto: "unique_name", json: "uniqueName", swift: "uniqueName"),
    3: .unique(proto: "owner_id", json: "ownerId", swift: "ownerId"),
    4: .unique(proto: "production_version", json: "productionVersion", swift: "productionVersion"),
    5: .unique(proto: "is_on_production", json: "isOnProduction", swift: "isOnProduction"),
    6: .unique(proto: "created_at", json: "createdAt", swift: "createdAt"),
    7: .unique(proto: "last_updated", json: "lastUpdated", swift: "lastUpdated"),
    8: .same(proto: "labels", swift: "labels"),
  ]


  public var id: String = ""

  public var uniqueName: String = ""

  public var ownerId: String = ""

  public var productionVersion: String = ""

  public var isOnProduction: Bool = false

  public var createdAt: Int64 = 0

  public var lastUpdated: Int64 = 0

  public var labels: Dictionary<String,String> = [:]

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &id)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &uniqueName)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &ownerId)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &productionVersion)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isOnProduction)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &createdAt)
    case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &lastUpdated)
    case 8: try setter.decodeMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &labels)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: id, fieldNumber: 1)
    }
    if uniqueName != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: uniqueName, fieldNumber: 2)
    }
    if ownerId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: ownerId, fieldNumber: 3)
    }
    if productionVersion != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: productionVersion, fieldNumber: 4)
    }
    if isOnProduction != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isOnProduction, fieldNumber: 5)
    }
    if createdAt != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: createdAt, fieldNumber: 6)
    }
    if lastUpdated != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: lastUpdated, fieldNumber: 7)
    }
    if !labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: labels, fieldNumber: 8)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_Game) -> Bool {
    if id != other.id {return false}
    if uniqueName != other.uniqueName {return false}
    if ownerId != other.ownerId {return false}
    if productionVersion != other.productionVersion {return false}
    if isOnProduction != other.isOnProduction {return false}
    if createdAt != other.createdAt {return false}
    if lastUpdated != other.lastUpdated {return false}
    if labels != other.labels {return false}
    return true
  }
}

public struct Apipb_GameRelease: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GameRelease"}
  public var protoMessageName: String {return "GameRelease"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "release_id", json: "releaseId", swift: "releaseId"),
    2: .unique(proto: "game_id", json: "gameId", swift: "gameId"),
    3: .same(proto: "version", swift: "version"),
    4: .unique(proto: "game_manifest", json: "gameManifest", swift: "gameManifest"),
    5: .unique(proto: "released_at", json: "releasedAt", swift: "releasedAt"),
    6: .unique(proto: "released_by", json: "releasedBy", swift: "releasedBy"),
    7: .unique(proto: "release_state", json: "releaseState", swift: "releaseState"),
    8: .unique(proto: "validated_by", json: "validatedBy", swift: "validatedBy"),
    9: .unique(proto: "validated_at", json: "validatedAt", swift: "validatedAt"),
    10: .unique(proto: "int_version", json: "intVersion", swift: "intVersion"),
    11: .same(proto: "storage", swift: "storage"),
    12: .unique(proto: "archive_format", json: "archiveFormat", swift: "archiveFormat"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_GameRelease
    var _releaseId: String = ""
    var _gameId: String = ""
    var _version: String = ""
    var _gameManifest: Apipb_GameManifest? = nil
    var _releasedAt: Int64 = 0
    var _releasedBy: String = ""
    var _releaseState: Apipb_ReleaseState = Apipb_ReleaseState.created
    var _validatedBy: String = ""
    var _validatedAt: Int64 = 0
    var _intVersion: Int64 = 0
    var _storage: String = ""
    var _archiveFormat: String = ""

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_releaseId)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_gameId)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_version)
      case 4: try setter.decodeSingularMessageField(fieldType: Apipb_GameManifest.self, value: &_gameManifest)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_releasedAt)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_releasedBy)
      case 7: try setter.decodeSingularField(fieldType: Apipb_ReleaseState.self, value: &_releaseState)
      case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_validatedBy)
      case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_validatedAt)
      case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_intVersion)
      case 11: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_storage)
      case 12: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_archiveFormat)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _releaseId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _releaseId, fieldNumber: 1)
      }
      if _gameId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _gameId, fieldNumber: 2)
      }
      if _version != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _version, fieldNumber: 3)
      }
      if let v = _gameManifest {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _releasedAt != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _releasedAt, fieldNumber: 5)
      }
      if _releasedBy != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _releasedBy, fieldNumber: 6)
      }
      if _releaseState != Apipb_ReleaseState.created {
        try visitor.visitSingularField(fieldType: Apipb_ReleaseState.self, value: _releaseState, fieldNumber: 7)
      }
      if _validatedBy != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _validatedBy, fieldNumber: 8)
      }
      if _validatedAt != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _validatedAt, fieldNumber: 9)
      }
      if _intVersion != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _intVersion, fieldNumber: 10)
      }
      if _storage != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _storage, fieldNumber: 11)
      }
      if _archiveFormat != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _archiveFormat, fieldNumber: 12)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _releaseId != other._releaseId {return false}
      if _gameId != other._gameId {return false}
      if _version != other._version {return false}
      if _gameManifest != other._gameManifest {return false}
      if _releasedAt != other._releasedAt {return false}
      if _releasedBy != other._releasedBy {return false}
      if _releaseState != other._releaseState {return false}
      if _validatedBy != other._validatedBy {return false}
      if _validatedAt != other._validatedAt {return false}
      if _intVersion != other._intVersion {return false}
      if _storage != other._storage {return false}
      if _archiveFormat != other._archiveFormat {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._releaseId = _releaseId
      clone._gameId = _gameId
      clone._version = _version
      clone._gameManifest = _gameManifest
      clone._releasedAt = _releasedAt
      clone._releasedBy = _releasedBy
      clone._releaseState = _releaseState
      clone._validatedBy = _validatedBy
      clone._validatedAt = _validatedAt
      clone._intVersion = _intVersion
      clone._storage = _storage
      clone._archiveFormat = _archiveFormat
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var releaseId: String {
    get {return _storage._releaseId}
    set {_uniqueStorage()._releaseId = newValue}
  }

  public var gameId: String {
    get {return _storage._gameId}
    set {_uniqueStorage()._gameId = newValue}
  }

  public var version: String {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  public var gameManifest: Apipb_GameManifest {
    get {return _storage._gameManifest ?? Apipb_GameManifest()}
    set {_uniqueStorage()._gameManifest = newValue}
  }
  public var hasGameManifest: Bool {
    return _storage._gameManifest != nil
  }
  public mutating func clearGameManifest() {
    return _storage._gameManifest = nil
  }

  public var releasedAt: Int64 {
    get {return _storage._releasedAt}
    set {_uniqueStorage()._releasedAt = newValue}
  }

  public var releasedBy: String {
    get {return _storage._releasedBy}
    set {_uniqueStorage()._releasedBy = newValue}
  }

  public var releaseState: Apipb_ReleaseState {
    get {return _storage._releaseState}
    set {_uniqueStorage()._releaseState = newValue}
  }

  public var validatedBy: String {
    get {return _storage._validatedBy}
    set {_uniqueStorage()._validatedBy = newValue}
  }

  public var validatedAt: Int64 {
    get {return _storage._validatedAt}
    set {_uniqueStorage()._validatedAt = newValue}
  }

  public var intVersion: Int64 {
    get {return _storage._intVersion}
    set {_uniqueStorage()._intVersion = newValue}
  }

  public var storage: String {
    get {return _storage._storage}
    set {_uniqueStorage()._storage = newValue}
  }

  public var archiveFormat: String {
    get {return _storage._archiveFormat}
    set {_uniqueStorage()._archiveFormat = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GameRelease) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_UploadToken: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_UploadToken"}
  public var protoMessageName: String {return "UploadToken"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "token", swift: "token"),
    2: .unique(proto: "expires_at", json: "expiresAt", swift: "expiresAt"),
    3: .unique(proto: "user_id", json: "userId", swift: "userId"),
    4: .unique(proto: "game_id", json: "gameId", swift: "gameId"),
    5: .unique(proto: "new_version", json: "newVersion", swift: "newVersion"),
    6: .unique(proto: "upload_to", json: "uploadTo", swift: "uploadTo"),
  ]


  public var token: String = ""

  public var expiresAt: Int64 = 0

  public var userId: String = ""

  public var gameId: String = ""

  public var newVersion: String = ""

  public var uploadTo: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &token)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &expiresAt)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &userId)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &gameId)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &newVersion)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &uploadTo)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if token != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: token, fieldNumber: 1)
    }
    if expiresAt != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: expiresAt, fieldNumber: 2)
    }
    if userId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: userId, fieldNumber: 3)
    }
    if gameId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: gameId, fieldNumber: 4)
    }
    if newVersion != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: newVersion, fieldNumber: 5)
    }
    if uploadTo != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: uploadTo, fieldNumber: 6)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_UploadToken) -> Bool {
    if token != other.token {return false}
    if expiresAt != other.expiresAt {return false}
    if userId != other.userId {return false}
    if gameId != other.gameId {return false}
    if newVersion != other.newVersion {return false}
    if uploadTo != other.uploadTo {return false}
    return true
  }
}
