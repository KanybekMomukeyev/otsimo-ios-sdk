/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: models.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

fileprivate let _protobuf_package = "apipb"

public enum Apipb_Gender: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  public typealias RawValue = Int
  case unknown // = 0
  case male // = 1
  case female // = 2
  case UNRECOGNIZED(Int)

  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "MALE"),
    2: .same(proto: "FEMALE"),
  ]

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .male
    case 2: self = .female
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .male: return 1
    case .female: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum Apipb_ReleaseState: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  public typealias RawValue = Int
  case created // = 0
  case development // = 1
  case waiting // = 2
  case rejected // = 3
  case validated // = 4
  case production // = 5
  case UNRECOGNIZED(Int)

  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CREATED"),
    1: .same(proto: "DEVELOPMENT"),
    2: .same(proto: "WAITING"),
    3: .same(proto: "REJECTED"),
    4: .same(proto: "VALIDATED"),
    5: .same(proto: "PRODUCTION"),
  ]

  public init() {
    self = .created
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .created
    case 1: self = .development
    case 2: self = .waiting
    case 3: self = .rejected
    case 4: self = .validated
    case 5: self = .production
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .created: return 0
    case .development: return 1
    case .waiting: return 2
    case .rejected: return 3
    case .validated: return 4
    case .production: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public struct Apipb_Address: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Address"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "street_address"),
    2: .same(proto: "city"),
    3: .same(proto: "state"),
    4: .standard(proto: "zip_code"),
    5: .standard(proto: "country_code"),
  ]

  public var streetAddress: String = ""

  public var city: String = ""

  public var state: String = ""

  public var zipCode: String = ""

  public var countryCode: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &streetAddress)
      case 2: try decoder.decodeSingularStringField(value: &city)
      case 3: try decoder.decodeSingularStringField(value: &state)
      case 4: try decoder.decodeSingularStringField(value: &zipCode)
      case 5: try decoder.decodeSingularStringField(value: &countryCode)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !streetAddress.isEmpty {
      try visitor.visitSingularStringField(value: streetAddress, fieldNumber: 1)
    }
    if !city.isEmpty {
      try visitor.visitSingularStringField(value: city, fieldNumber: 2)
    }
    if !state.isEmpty {
      try visitor.visitSingularStringField(value: state, fieldNumber: 3)
    }
    if !zipCode.isEmpty {
      try visitor.visitSingularStringField(value: zipCode, fieldNumber: 4)
    }
    if !countryCode.isEmpty {
      try visitor.visitSingularStringField(value: countryCode, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_Address) -> Bool {
    if streetAddress != other.streetAddress {return false}
    if city != other.city {return false}
    if state != other.state {return false}
    if zipCode != other.zipCode {return false}
    if countryCode != other.countryCode {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_Profile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Profile"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "email"),
    3: .standard(proto: "first_name"),
    4: .standard(proto: "last_name"),
    5: .same(proto: "language"),
    6: .standard(proto: "mobile_phone"),
    7: .same(proto: "address"),
    8: .standard(proto: "created_at"),
    9: .standard(proto: "last_updated"),
    10: .same(proto: "locale"),
    11: .same(proto: "timezone"),
    12: .same(proto: "country"),
    13: .same(proto: "labels"),
  ]

  private class _StorageClass {
    var _id: String = ""
    var _email: String = ""
    var _firstName: String = ""
    var _lastName: String = ""
    var _language: String = ""
    var _mobilePhone: String = ""
    var _address: Apipb_Address? = nil
    var _createdAt: Int64 = 0
    var _lastUpdated: Int64 = 0
    var _locale: String = ""
    var _timezone: Int32 = 0
    var _country: String = ""
    var _labels: Dictionary<String,String> = [:]

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _email = source._email
      _firstName = source._firstName
      _lastName = source._lastName
      _language = source._language
      _mobilePhone = source._mobilePhone
      _address = source._address
      _createdAt = source._createdAt
      _lastUpdated = source._lastUpdated
      _locale = source._locale
      _timezone = source._timezone
      _country = source._country
      _labels = source._labels
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var email: String {
    get {return _storage._email}
    set {_uniqueStorage()._email = newValue}
  }

  public var firstName: String {
    get {return _storage._firstName}
    set {_uniqueStorage()._firstName = newValue}
  }

  public var lastName: String {
    get {return _storage._lastName}
    set {_uniqueStorage()._lastName = newValue}
  }

  public var language: String {
    get {return _storage._language}
    set {_uniqueStorage()._language = newValue}
  }

  public var mobilePhone: String {
    get {return _storage._mobilePhone}
    set {_uniqueStorage()._mobilePhone = newValue}
  }

  public var address: Apipb_Address {
    get {return _storage._address ?? Apipb_Address()}
    set {_uniqueStorage()._address = newValue}
  }
  public var hasAddress: Bool {
    return _storage._address != nil
  }
  public mutating func clearAddress() {
    return _storage._address = nil
  }

  public var createdAt: Int64 {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  public var lastUpdated: Int64 {
    get {return _storage._lastUpdated}
    set {_uniqueStorage()._lastUpdated = newValue}
  }

  public var locale: String {
    get {return _storage._locale}
    set {_uniqueStorage()._locale = newValue}
  }

  public var timezone: Int32 {
    get {return _storage._timezone}
    set {_uniqueStorage()._timezone = newValue}
  }

  public var country: String {
    get {return _storage._country}
    set {_uniqueStorage()._country = newValue}
  }

  public var labels: Dictionary<String,String> {
    get {return _storage._labels}
    set {_uniqueStorage()._labels = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._email)
        case 3: try decoder.decodeSingularStringField(value: &_storage._firstName)
        case 4: try decoder.decodeSingularStringField(value: &_storage._lastName)
        case 5: try decoder.decodeSingularStringField(value: &_storage._language)
        case 6: try decoder.decodeSingularStringField(value: &_storage._mobilePhone)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._address)
        case 8: try decoder.decodeSingularInt64Field(value: &_storage._createdAt)
        case 9: try decoder.decodeSingularInt64Field(value: &_storage._lastUpdated)
        case 10: try decoder.decodeSingularStringField(value: &_storage._locale)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._timezone)
        case 12: try decoder.decodeSingularStringField(value: &_storage._country)
        case 13: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._labels)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._email.isEmpty {
        try visitor.visitSingularStringField(value: _storage._email, fieldNumber: 2)
      }
      if !_storage._firstName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._firstName, fieldNumber: 3)
      }
      if !_storage._lastName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lastName, fieldNumber: 4)
      }
      if !_storage._language.isEmpty {
        try visitor.visitSingularStringField(value: _storage._language, fieldNumber: 5)
      }
      if !_storage._mobilePhone.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mobilePhone, fieldNumber: 6)
      }
      if let v = _storage._address {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if _storage._createdAt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createdAt, fieldNumber: 8)
      }
      if _storage._lastUpdated != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lastUpdated, fieldNumber: 9)
      }
      if !_storage._locale.isEmpty {
        try visitor.visitSingularStringField(value: _storage._locale, fieldNumber: 10)
      }
      if _storage._timezone != 0 {
        try visitor.visitSingularInt32Field(value: _storage._timezone, fieldNumber: 11)
      }
      if !_storage._country.isEmpty {
        try visitor.visitSingularStringField(value: _storage._country, fieldNumber: 12)
      }
      if !_storage._labels.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._labels, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_Profile) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._email != other_storage._email {return false}
        if _storage._firstName != other_storage._firstName {return false}
        if _storage._lastName != other_storage._lastName {return false}
        if _storage._language != other_storage._language {return false}
        if _storage._mobilePhone != other_storage._mobilePhone {return false}
        if _storage._address != other_storage._address {return false}
        if _storage._createdAt != other_storage._createdAt {return false}
        if _storage._lastUpdated != other_storage._lastUpdated {return false}
        if _storage._locale != other_storage._locale {return false}
        if _storage._timezone != other_storage._timezone {return false}
        if _storage._country != other_storage._country {return false}
        if _storage._labels != other_storage._labels {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_ChildGameEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChildGameEntry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "active"),
    3: .standard(proto: "dashboard_index"),
    4: .same(proto: "settings"),
    5: .standard(proto: "added_at"),
    6: .standard(proto: "activation_changed_at"),
    7: .standard(proto: "updated_at"),
    8: .standard(proto: "local_settings"),
    9: .standard(proto: "local_settings_version"),
  ]

  public var id: String = ""

  public var active: Bool = false

  public var dashboardIndex: Int32 = 0

  public var settings: Data = Data()

  public var addedAt: Int64 = 0

  public var activationChangedAt: Int64 = 0

  public var updatedAt: Int64 = 0

  public var localSettings: Data = Data()

  public var localSettingsVersion: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &id)
      case 2: try decoder.decodeSingularBoolField(value: &active)
      case 3: try decoder.decodeSingularInt32Field(value: &dashboardIndex)
      case 4: try decoder.decodeSingularBytesField(value: &settings)
      case 5: try decoder.decodeSingularInt64Field(value: &addedAt)
      case 6: try decoder.decodeSingularInt64Field(value: &activationChangedAt)
      case 7: try decoder.decodeSingularInt64Field(value: &updatedAt)
      case 8: try decoder.decodeSingularBytesField(value: &localSettings)
      case 9: try decoder.decodeSingularInt64Field(value: &localSettingsVersion)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !id.isEmpty {
      try visitor.visitSingularStringField(value: id, fieldNumber: 1)
    }
    if active != false {
      try visitor.visitSingularBoolField(value: active, fieldNumber: 2)
    }
    if dashboardIndex != 0 {
      try visitor.visitSingularInt32Field(value: dashboardIndex, fieldNumber: 3)
    }
    if !settings.isEmpty {
      try visitor.visitSingularBytesField(value: settings, fieldNumber: 4)
    }
    if addedAt != 0 {
      try visitor.visitSingularInt64Field(value: addedAt, fieldNumber: 5)
    }
    if activationChangedAt != 0 {
      try visitor.visitSingularInt64Field(value: activationChangedAt, fieldNumber: 6)
    }
    if updatedAt != 0 {
      try visitor.visitSingularInt64Field(value: updatedAt, fieldNumber: 7)
    }
    if !localSettings.isEmpty {
      try visitor.visitSingularBytesField(value: localSettings, fieldNumber: 8)
    }
    if localSettingsVersion != 0 {
      try visitor.visitSingularInt64Field(value: localSettingsVersion, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_ChildGameEntry) -> Bool {
    if id != other.id {return false}
    if active != other.active {return false}
    if dashboardIndex != other.dashboardIndex {return false}
    if settings != other.settings {return false}
    if addedAt != other.addedAt {return false}
    if activationChangedAt != other.activationChangedAt {return false}
    if updatedAt != other.updatedAt {return false}
    if localSettings != other.localSettings {return false}
    if localSettingsVersion != other.localSettingsVersion {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_Child: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Child"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "parent_id"),
    3: .standard(proto: "first_name"),
    4: .standard(proto: "last_name"),
    5: .standard(proto: "birth_day"),
    7: .same(proto: "gender"),
    8: .same(proto: "language"),
    9: .same(proto: "games"),
    10: .same(proto: "active"),
    11: .standard(proto: "logged_in"),
    12: .standard(proto: "sounds_enabled"),
    13: .same(proto: "locale"),
    15: .standard(proto: "created_at"),
    16: .standard(proto: "last_updated"),
    17: .standard(proto: "child_info"),
  ]

  public var id: String = ""

  public var parentId: String = ""

  public var firstName: String = ""

  public var lastName: String = ""

  public var birthDay: Int64 = 0

  public var gender: Apipb_Gender = Apipb_Gender.unknown

  public var language: String = ""

  public var games: [Apipb_ChildGameEntry] = []

  public var active: Bool = false

  public var loggedIn: Bool = false

  public var soundsEnabled: Bool = false

  public var locale: String = ""

  public var createdAt: Int64 = 0

  public var lastUpdated: Int64 = 0

  public var childInfo: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &id)
      case 2: try decoder.decodeSingularStringField(value: &parentId)
      case 3: try decoder.decodeSingularStringField(value: &firstName)
      case 4: try decoder.decodeSingularStringField(value: &lastName)
      case 5: try decoder.decodeSingularInt64Field(value: &birthDay)
      case 7: try decoder.decodeSingularEnumField(value: &gender)
      case 8: try decoder.decodeSingularStringField(value: &language)
      case 9: try decoder.decodeRepeatedMessageField(value: &games)
      case 10: try decoder.decodeSingularBoolField(value: &active)
      case 11: try decoder.decodeSingularBoolField(value: &loggedIn)
      case 12: try decoder.decodeSingularBoolField(value: &soundsEnabled)
      case 13: try decoder.decodeSingularStringField(value: &locale)
      case 15: try decoder.decodeSingularInt64Field(value: &createdAt)
      case 16: try decoder.decodeSingularInt64Field(value: &lastUpdated)
      case 17: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &childInfo)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !id.isEmpty {
      try visitor.visitSingularStringField(value: id, fieldNumber: 1)
    }
    if !parentId.isEmpty {
      try visitor.visitSingularStringField(value: parentId, fieldNumber: 2)
    }
    if !firstName.isEmpty {
      try visitor.visitSingularStringField(value: firstName, fieldNumber: 3)
    }
    if !lastName.isEmpty {
      try visitor.visitSingularStringField(value: lastName, fieldNumber: 4)
    }
    if birthDay != 0 {
      try visitor.visitSingularInt64Field(value: birthDay, fieldNumber: 5)
    }
    if gender != Apipb_Gender.unknown {
      try visitor.visitSingularEnumField(value: gender, fieldNumber: 7)
    }
    if !language.isEmpty {
      try visitor.visitSingularStringField(value: language, fieldNumber: 8)
    }
    if !games.isEmpty {
      try visitor.visitRepeatedMessageField(value: games, fieldNumber: 9)
    }
    if active != false {
      try visitor.visitSingularBoolField(value: active, fieldNumber: 10)
    }
    if loggedIn != false {
      try visitor.visitSingularBoolField(value: loggedIn, fieldNumber: 11)
    }
    if soundsEnabled != false {
      try visitor.visitSingularBoolField(value: soundsEnabled, fieldNumber: 12)
    }
    if !locale.isEmpty {
      try visitor.visitSingularStringField(value: locale, fieldNumber: 13)
    }
    if createdAt != 0 {
      try visitor.visitSingularInt64Field(value: createdAt, fieldNumber: 15)
    }
    if lastUpdated != 0 {
      try visitor.visitSingularInt64Field(value: lastUpdated, fieldNumber: 16)
    }
    if !childInfo.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: childInfo, fieldNumber: 17)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_Child) -> Bool {
    if id != other.id {return false}
    if parentId != other.parentId {return false}
    if firstName != other.firstName {return false}
    if lastName != other.lastName {return false}
    if birthDay != other.birthDay {return false}
    if gender != other.gender {return false}
    if language != other.language {return false}
    if games != other.games {return false}
    if active != other.active {return false}
    if loggedIn != other.loggedIn {return false}
    if soundsEnabled != other.soundsEnabled {return false}
    if locale != other.locale {return false}
    if createdAt != other.createdAt {return false}
    if lastUpdated != other.lastUpdated {return false}
    if childInfo != other.childInfo {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_Author: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Author"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "email"),
  ]

  public var name: String = ""

  public var email: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &name)
      case 2: try decoder.decodeSingularStringField(value: &email)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !name.isEmpty {
      try visitor.visitSingularStringField(value: name, fieldNumber: 1)
    }
    if !email.isEmpty {
      try visitor.visitSingularStringField(value: email, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_Author) -> Bool {
    if name != other.name {return false}
    if email != other.email {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GameMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "language"),
    2: .standard(proto: "visible_name"),
    3: .same(proto: "summary"),
    4: .same(proto: "description"),
    5: .same(proto: "logo"),
    6: .same(proto: "icon"),
    7: .same(proto: "keywords"),
    8: .same(proto: "images"),
    9: .standard(proto: "info_slug"),
    10: .same(proto: "assets"),
  ]

  public var language: String = ""

  ///   Visible Name 
  public var visibleName: String = ""

  ///   Summary is summary of game 
  public var summary: String = ""

  ///   Description 
  public var description_p: String = ""

  ///   Logo is a rectangle image 
  public var logo: String = ""

  ///   Icon is a square image
  public var icon: String = ""

  ///   Keywords     
  public var keywords: [String] = []

  ///   Images are image files that show on market
  public var images: [String] = []

  ///   InfoSlug is the id of the content which describes how to play this game
  public var infoSlug: String = ""

  ///  Assets are asset folders or paths for this language
  public var assets: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &language)
      case 2: try decoder.decodeSingularStringField(value: &visibleName)
      case 3: try decoder.decodeSingularStringField(value: &summary)
      case 4: try decoder.decodeSingularStringField(value: &description_p)
      case 5: try decoder.decodeSingularStringField(value: &logo)
      case 6: try decoder.decodeSingularStringField(value: &icon)
      case 7: try decoder.decodeRepeatedStringField(value: &keywords)
      case 8: try decoder.decodeRepeatedStringField(value: &images)
      case 9: try decoder.decodeSingularStringField(value: &infoSlug)
      case 10: try decoder.decodeRepeatedStringField(value: &assets)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !language.isEmpty {
      try visitor.visitSingularStringField(value: language, fieldNumber: 1)
    }
    if !visibleName.isEmpty {
      try visitor.visitSingularStringField(value: visibleName, fieldNumber: 2)
    }
    if !summary.isEmpty {
      try visitor.visitSingularStringField(value: summary, fieldNumber: 3)
    }
    if !description_p.isEmpty {
      try visitor.visitSingularStringField(value: description_p, fieldNumber: 4)
    }
    if !logo.isEmpty {
      try visitor.visitSingularStringField(value: logo, fieldNumber: 5)
    }
    if !icon.isEmpty {
      try visitor.visitSingularStringField(value: icon, fieldNumber: 6)
    }
    if !keywords.isEmpty {
      try visitor.visitRepeatedStringField(value: keywords, fieldNumber: 7)
    }
    if !images.isEmpty {
      try visitor.visitRepeatedStringField(value: images, fieldNumber: 8)
    }
    if !infoSlug.isEmpty {
      try visitor.visitSingularStringField(value: infoSlug, fieldNumber: 9)
    }
    if !assets.isEmpty {
      try visitor.visitRepeatedStringField(value: assets, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GameMetadata) -> Bool {
    if language != other.language {return false}
    if visibleName != other.visibleName {return false}
    if summary != other.summary {return false}
    if description_p != other.description_p {return false}
    if logo != other.logo {return false}
    if icon != other.icon {return false}
    if keywords != other.keywords {return false}
    if images != other.images {return false}
    if infoSlug != other.infoSlug {return false}
    if assets != other.assets {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GameManifest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameManifest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unique_name"),
    2: .same(proto: "licence"),
    3: .same(proto: "languages"),
    4: .same(proto: "homepage"),
    5: .same(proto: "main"),
    6: .same(proto: "version"),
    7: .same(proto: "authors"),
    8: .same(proto: "repository"),
    9: .standard(proto: "supported_orientations"),
    13: .same(proto: "metadata"),
    14: .same(proto: "exclude"),
    15: .same(proto: "settings"),
    16: .standard(proto: "kv_path"),
    17: .standard(proto: "developer_name"),
    18: .standard(proto: "default_language"),
    19: .standard(proto: "loading_color"),
    20: .same(proto: "capabilities"),
    21: .standard(proto: "ab_test"),
    22: .same(proto: "labels"),
    23: .standard(proto: "manifest_version"),
  ]

  private class _StorageClass {
    var _uniqueName: String = ""
    var _licence: String = ""
    var _languages: [String] = []
    var _homepage: String = ""
    var _main: String = ""
    var _version: String = ""
    var _authors: [Apipb_Author] = []
    var _repository: String = ""
    var _supportedOrientations: [String] = []
    var _metadata: [Apipb_GameMetadata] = []
    var _exclude: [String] = []
    var _settings: String = ""
    var _kvPath: String = ""
    var _developerName: String = ""
    var _defaultLanguage: String = ""
    var _loadingColor: String = ""
    var _capabilities: [String] = []
    var _abTest: String = ""
    var _labels: Dictionary<String,String> = [:]
    var _manifestVersion: Int32 = 0

    init() {}

    init(copying source: _StorageClass) {
      _uniqueName = source._uniqueName
      _licence = source._licence
      _languages = source._languages
      _homepage = source._homepage
      _main = source._main
      _version = source._version
      _authors = source._authors
      _repository = source._repository
      _supportedOrientations = source._supportedOrientations
      _metadata = source._metadata
      _exclude = source._exclude
      _settings = source._settings
      _kvPath = source._kvPath
      _developerName = source._developerName
      _defaultLanguage = source._defaultLanguage
      _loadingColor = source._loadingColor
      _capabilities = source._capabilities
      _abTest = source._abTest
      _labels = source._labels
      _manifestVersion = source._manifestVersion
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  ///   Unique Name of game
  public var uniqueName: String {
    get {return _storage._uniqueName}
    set {_uniqueStorage()._uniqueName = newValue}
  }

  ///   Licence 
  public var licence: String {
    get {return _storage._licence}
    set {_uniqueStorage()._licence = newValue}
  }

  ///  Languages
  public var languages: [String] {
    get {return _storage._languages}
    set {_uniqueStorage()._languages = newValue}
  }

  ///   Homepage is the website of game
  public var homepage: String {
    get {return _storage._homepage}
    set {_uniqueStorage()._homepage = newValue}
  }

  ///   Main points to index.html file
  public var main: String {
    get {return _storage._main}
    set {_uniqueStorage()._main = newValue}
  }

  ///   Version is current version for using on manifest file
  public var version: String {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  ///   Authors is for using at manifest file
  public var authors: [Apipb_Author] {
    get {return _storage._authors}
    set {_uniqueStorage()._authors = newValue}
  }

  ///   Repository 
  public var repository: String {
    get {return _storage._repository}
    set {_uniqueStorage()._repository = newValue}
  }

  ///  SupportedOrientations are the orientations that can be used for this app
  public var supportedOrientations: [String] {
    get {return _storage._supportedOrientations}
    set {_uniqueStorage()._supportedOrientations = newValue}
  }

  ///  Metadata information for each languages
  public var metadata: [Apipb_GameMetadata] {
    get {return _storage._metadata}
    set {_uniqueStorage()._metadata = newValue}
  }

  ///  Exclude directories when building
  public var exclude: [String] {
    get {return _storage._exclude}
    set {_uniqueStorage()._exclude = newValue}
  }

  ///  Settings.json path
  public var settings: String {
    get {return _storage._settings}
    set {_uniqueStorage()._settings = newValue}
  }

  ///  KV directory path
  public var kvPath: String {
    get {return _storage._kvPath}
    set {_uniqueStorage()._kvPath = newValue}
  }

  ///  DeveloperName is the visible developer name
  public var developerName: String {
    get {return _storage._developerName}
    set {_uniqueStorage()._developerName = newValue}
  }

  ///  DefaultLanguage
  public var defaultLanguage: String {
    get {return _storage._defaultLanguage}
    set {_uniqueStorage()._defaultLanguage = newValue}
  }

  ///  Loading Background Color of the Game
  public var loadingColor: String {
    get {return _storage._loadingColor}
    set {_uniqueStorage()._loadingColor = newValue}
  }

  ///  Capabilities are required host app features. The most basic capability is 'sandbox'.  
  public var capabilities: [String] {
    get {return _storage._capabilities}
    set {_uniqueStorage()._capabilities = newValue}
  }

  ///  AbTest determines whether or not this version is for ab testing
  public var abTest: String {
    get {return _storage._abTest}
    set {_uniqueStorage()._abTest = newValue}
  }

  ///  Labels are string key value pairs
  public var labels: Dictionary<String,String> {
    get {return _storage._labels}
    set {_uniqueStorage()._labels = newValue}
  }

  ///  ManifestVersion 
  public var manifestVersion: Int32 {
    get {return _storage._manifestVersion}
    set {_uniqueStorage()._manifestVersion = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._uniqueName)
        case 2: try decoder.decodeSingularStringField(value: &_storage._licence)
        case 3: try decoder.decodeRepeatedStringField(value: &_storage._languages)
        case 4: try decoder.decodeSingularStringField(value: &_storage._homepage)
        case 5: try decoder.decodeSingularStringField(value: &_storage._main)
        case 6: try decoder.decodeSingularStringField(value: &_storage._version)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._authors)
        case 8: try decoder.decodeSingularStringField(value: &_storage._repository)
        case 9: try decoder.decodeRepeatedStringField(value: &_storage._supportedOrientations)
        case 13: try decoder.decodeRepeatedMessageField(value: &_storage._metadata)
        case 14: try decoder.decodeRepeatedStringField(value: &_storage._exclude)
        case 15: try decoder.decodeSingularStringField(value: &_storage._settings)
        case 16: try decoder.decodeSingularStringField(value: &_storage._kvPath)
        case 17: try decoder.decodeSingularStringField(value: &_storage._developerName)
        case 18: try decoder.decodeSingularStringField(value: &_storage._defaultLanguage)
        case 19: try decoder.decodeSingularStringField(value: &_storage._loadingColor)
        case 20: try decoder.decodeRepeatedStringField(value: &_storage._capabilities)
        case 21: try decoder.decodeSingularStringField(value: &_storage._abTest)
        case 22: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._labels)
        case 23: try decoder.decodeSingularInt32Field(value: &_storage._manifestVersion)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._uniqueName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uniqueName, fieldNumber: 1)
      }
      if !_storage._licence.isEmpty {
        try visitor.visitSingularStringField(value: _storage._licence, fieldNumber: 2)
      }
      if !_storage._languages.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._languages, fieldNumber: 3)
      }
      if !_storage._homepage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._homepage, fieldNumber: 4)
      }
      if !_storage._main.isEmpty {
        try visitor.visitSingularStringField(value: _storage._main, fieldNumber: 5)
      }
      if !_storage._version.isEmpty {
        try visitor.visitSingularStringField(value: _storage._version, fieldNumber: 6)
      }
      if !_storage._authors.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._authors, fieldNumber: 7)
      }
      if !_storage._repository.isEmpty {
        try visitor.visitSingularStringField(value: _storage._repository, fieldNumber: 8)
      }
      if !_storage._supportedOrientations.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._supportedOrientations, fieldNumber: 9)
      }
      if !_storage._metadata.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._metadata, fieldNumber: 13)
      }
      if !_storage._exclude.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._exclude, fieldNumber: 14)
      }
      if !_storage._settings.isEmpty {
        try visitor.visitSingularStringField(value: _storage._settings, fieldNumber: 15)
      }
      if !_storage._kvPath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._kvPath, fieldNumber: 16)
      }
      if !_storage._developerName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._developerName, fieldNumber: 17)
      }
      if !_storage._defaultLanguage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._defaultLanguage, fieldNumber: 18)
      }
      if !_storage._loadingColor.isEmpty {
        try visitor.visitSingularStringField(value: _storage._loadingColor, fieldNumber: 19)
      }
      if !_storage._capabilities.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._capabilities, fieldNumber: 20)
      }
      if !_storage._abTest.isEmpty {
        try visitor.visitSingularStringField(value: _storage._abTest, fieldNumber: 21)
      }
      if !_storage._labels.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._labels, fieldNumber: 22)
      }
      if _storage._manifestVersion != 0 {
        try visitor.visitSingularInt32Field(value: _storage._manifestVersion, fieldNumber: 23)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GameManifest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._uniqueName != other_storage._uniqueName {return false}
        if _storage._licence != other_storage._licence {return false}
        if _storage._languages != other_storage._languages {return false}
        if _storage._homepage != other_storage._homepage {return false}
        if _storage._main != other_storage._main {return false}
        if _storage._version != other_storage._version {return false}
        if _storage._authors != other_storage._authors {return false}
        if _storage._repository != other_storage._repository {return false}
        if _storage._supportedOrientations != other_storage._supportedOrientations {return false}
        if _storage._metadata != other_storage._metadata {return false}
        if _storage._exclude != other_storage._exclude {return false}
        if _storage._settings != other_storage._settings {return false}
        if _storage._kvPath != other_storage._kvPath {return false}
        if _storage._developerName != other_storage._developerName {return false}
        if _storage._defaultLanguage != other_storage._defaultLanguage {return false}
        if _storage._loadingColor != other_storage._loadingColor {return false}
        if _storage._capabilities != other_storage._capabilities {return false}
        if _storage._abTest != other_storage._abTest {return false}
        if _storage._labels != other_storage._labels {return false}
        if _storage._manifestVersion != other_storage._manifestVersion {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_Game: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Game"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "unique_name"),
    3: .standard(proto: "owner_id"),
    4: .standard(proto: "production_version"),
    5: .standard(proto: "is_on_production"),
    6: .standard(proto: "created_at"),
    7: .standard(proto: "last_updated"),
    8: .same(proto: "labels"),
  ]

  public var id: String = ""

  public var uniqueName: String = ""

  public var ownerId: String = ""

  public var productionVersion: String = ""

  public var isOnProduction: Bool = false

  public var createdAt: Int64 = 0

  public var lastUpdated: Int64 = 0

  public var labels: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &id)
      case 2: try decoder.decodeSingularStringField(value: &uniqueName)
      case 3: try decoder.decodeSingularStringField(value: &ownerId)
      case 4: try decoder.decodeSingularStringField(value: &productionVersion)
      case 5: try decoder.decodeSingularBoolField(value: &isOnProduction)
      case 6: try decoder.decodeSingularInt64Field(value: &createdAt)
      case 7: try decoder.decodeSingularInt64Field(value: &lastUpdated)
      case 8: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &labels)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !id.isEmpty {
      try visitor.visitSingularStringField(value: id, fieldNumber: 1)
    }
    if !uniqueName.isEmpty {
      try visitor.visitSingularStringField(value: uniqueName, fieldNumber: 2)
    }
    if !ownerId.isEmpty {
      try visitor.visitSingularStringField(value: ownerId, fieldNumber: 3)
    }
    if !productionVersion.isEmpty {
      try visitor.visitSingularStringField(value: productionVersion, fieldNumber: 4)
    }
    if isOnProduction != false {
      try visitor.visitSingularBoolField(value: isOnProduction, fieldNumber: 5)
    }
    if createdAt != 0 {
      try visitor.visitSingularInt64Field(value: createdAt, fieldNumber: 6)
    }
    if lastUpdated != 0 {
      try visitor.visitSingularInt64Field(value: lastUpdated, fieldNumber: 7)
    }
    if !labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: labels, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_Game) -> Bool {
    if id != other.id {return false}
    if uniqueName != other.uniqueName {return false}
    if ownerId != other.ownerId {return false}
    if productionVersion != other.productionVersion {return false}
    if isOnProduction != other.isOnProduction {return false}
    if createdAt != other.createdAt {return false}
    if lastUpdated != other.lastUpdated {return false}
    if labels != other.labels {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GameRelease: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameRelease"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "release_id"),
    2: .standard(proto: "game_id"),
    3: .same(proto: "version"),
    4: .standard(proto: "game_manifest"),
    5: .standard(proto: "released_at"),
    6: .standard(proto: "released_by"),
    7: .standard(proto: "release_state"),
    8: .standard(proto: "validated_by"),
    9: .standard(proto: "validated_at"),
    10: .standard(proto: "int_version"),
    11: .same(proto: "storage"),
    12: .standard(proto: "archive_format"),
  ]

  private class _StorageClass {
    var _releaseId: String = ""
    var _gameId: String = ""
    var _version: String = ""
    var _gameManifest: Apipb_GameManifest? = nil
    var _releasedAt: Int64 = 0
    var _releasedBy: String = ""
    var _releaseState: Apipb_ReleaseState = Apipb_ReleaseState.created
    var _validatedBy: String = ""
    var _validatedAt: Int64 = 0
    var _intVersion: Int64 = 0
    var _storage: String = ""
    var _archiveFormat: String = ""

    init() {}

    init(copying source: _StorageClass) {
      _releaseId = source._releaseId
      _gameId = source._gameId
      _version = source._version
      _gameManifest = source._gameManifest
      _releasedAt = source._releasedAt
      _releasedBy = source._releasedBy
      _releaseState = source._releaseState
      _validatedBy = source._validatedBy
      _validatedAt = source._validatedAt
      _intVersion = source._intVersion
      _storage = source._storage
      _archiveFormat = source._archiveFormat
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var releaseId: String {
    get {return _storage._releaseId}
    set {_uniqueStorage()._releaseId = newValue}
  }

  public var gameId: String {
    get {return _storage._gameId}
    set {_uniqueStorage()._gameId = newValue}
  }

  public var version: String {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  public var gameManifest: Apipb_GameManifest {
    get {return _storage._gameManifest ?? Apipb_GameManifest()}
    set {_uniqueStorage()._gameManifest = newValue}
  }
  public var hasGameManifest: Bool {
    return _storage._gameManifest != nil
  }
  public mutating func clearGameManifest() {
    return _storage._gameManifest = nil
  }

  public var releasedAt: Int64 {
    get {return _storage._releasedAt}
    set {_uniqueStorage()._releasedAt = newValue}
  }

  public var releasedBy: String {
    get {return _storage._releasedBy}
    set {_uniqueStorage()._releasedBy = newValue}
  }

  public var releaseState: Apipb_ReleaseState {
    get {return _storage._releaseState}
    set {_uniqueStorage()._releaseState = newValue}
  }

  public var validatedBy: String {
    get {return _storage._validatedBy}
    set {_uniqueStorage()._validatedBy = newValue}
  }

  public var validatedAt: Int64 {
    get {return _storage._validatedAt}
    set {_uniqueStorage()._validatedAt = newValue}
  }

  public var intVersion: Int64 {
    get {return _storage._intVersion}
    set {_uniqueStorage()._intVersion = newValue}
  }

  public var storage: String {
    get {return _storage._storage}
    set {_uniqueStorage()._storage = newValue}
  }

  public var archiveFormat: String {
    get {return _storage._archiveFormat}
    set {_uniqueStorage()._archiveFormat = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._releaseId)
        case 2: try decoder.decodeSingularStringField(value: &_storage._gameId)
        case 3: try decoder.decodeSingularStringField(value: &_storage._version)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._gameManifest)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._releasedAt)
        case 6: try decoder.decodeSingularStringField(value: &_storage._releasedBy)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._releaseState)
        case 8: try decoder.decodeSingularStringField(value: &_storage._validatedBy)
        case 9: try decoder.decodeSingularInt64Field(value: &_storage._validatedAt)
        case 10: try decoder.decodeSingularInt64Field(value: &_storage._intVersion)
        case 11: try decoder.decodeSingularStringField(value: &_storage._storage)
        case 12: try decoder.decodeSingularStringField(value: &_storage._archiveFormat)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._releaseId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._releaseId, fieldNumber: 1)
      }
      if !_storage._gameId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gameId, fieldNumber: 2)
      }
      if !_storage._version.isEmpty {
        try visitor.visitSingularStringField(value: _storage._version, fieldNumber: 3)
      }
      if let v = _storage._gameManifest {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._releasedAt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._releasedAt, fieldNumber: 5)
      }
      if !_storage._releasedBy.isEmpty {
        try visitor.visitSingularStringField(value: _storage._releasedBy, fieldNumber: 6)
      }
      if _storage._releaseState != Apipb_ReleaseState.created {
        try visitor.visitSingularEnumField(value: _storage._releaseState, fieldNumber: 7)
      }
      if !_storage._validatedBy.isEmpty {
        try visitor.visitSingularStringField(value: _storage._validatedBy, fieldNumber: 8)
      }
      if _storage._validatedAt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._validatedAt, fieldNumber: 9)
      }
      if _storage._intVersion != 0 {
        try visitor.visitSingularInt64Field(value: _storage._intVersion, fieldNumber: 10)
      }
      if !_storage._storage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._storage, fieldNumber: 11)
      }
      if !_storage._archiveFormat.isEmpty {
        try visitor.visitSingularStringField(value: _storage._archiveFormat, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GameRelease) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._releaseId != other_storage._releaseId {return false}
        if _storage._gameId != other_storage._gameId {return false}
        if _storage._version != other_storage._version {return false}
        if _storage._gameManifest != other_storage._gameManifest {return false}
        if _storage._releasedAt != other_storage._releasedAt {return false}
        if _storage._releasedBy != other_storage._releasedBy {return false}
        if _storage._releaseState != other_storage._releaseState {return false}
        if _storage._validatedBy != other_storage._validatedBy {return false}
        if _storage._validatedAt != other_storage._validatedAt {return false}
        if _storage._intVersion != other_storage._intVersion {return false}
        if _storage._storage != other_storage._storage {return false}
        if _storage._archiveFormat != other_storage._archiveFormat {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_UploadToken: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UploadToken"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .standard(proto: "expires_at"),
    3: .standard(proto: "user_id"),
    4: .standard(proto: "game_id"),
    5: .standard(proto: "new_version"),
    6: .standard(proto: "upload_to"),
  ]

  public var token: String = ""

  public var expiresAt: Int64 = 0

  public var userId: String = ""

  public var gameId: String = ""

  public var newVersion: String = ""

  public var uploadTo: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &token)
      case 2: try decoder.decodeSingularInt64Field(value: &expiresAt)
      case 3: try decoder.decodeSingularStringField(value: &userId)
      case 4: try decoder.decodeSingularStringField(value: &gameId)
      case 5: try decoder.decodeSingularStringField(value: &newVersion)
      case 6: try decoder.decodeSingularStringField(value: &uploadTo)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !token.isEmpty {
      try visitor.visitSingularStringField(value: token, fieldNumber: 1)
    }
    if expiresAt != 0 {
      try visitor.visitSingularInt64Field(value: expiresAt, fieldNumber: 2)
    }
    if !userId.isEmpty {
      try visitor.visitSingularStringField(value: userId, fieldNumber: 3)
    }
    if !gameId.isEmpty {
      try visitor.visitSingularStringField(value: gameId, fieldNumber: 4)
    }
    if !newVersion.isEmpty {
      try visitor.visitSingularStringField(value: newVersion, fieldNumber: 5)
    }
    if !uploadTo.isEmpty {
      try visitor.visitSingularStringField(value: uploadTo, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_UploadToken) -> Bool {
    if token != other.token {return false}
    if expiresAt != other.expiresAt {return false}
    if userId != other.userId {return false}
    if gameId != other.gameId {return false}
    if newVersion != other.newVersion {return false}
    if uploadTo != other.uploadTo {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
