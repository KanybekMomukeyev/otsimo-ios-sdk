/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: messages.proto
 *
 */

import Foundation
import SwiftProtobuf


//  Request and Responses

public enum Apipb_RequestReleaseState: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case productionState // = 0
  case allStates // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .productionState
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .productionState
    case 1: self = .allStates
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "productionState": self = .productionState
    case "allStates": self = .allStates
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "PRODUCTION_STATE": self = .productionState
    case "ALL_STATES": self = .allStates
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "PRODUCTION_STATE": self = .productionState
    case "ALL_STATES": self = .allStates
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .productionState: return 0
      case .allStates: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .productionState: return "\"PRODUCTION_STATE\""
      case .allStates: return "\"ALL_STATES\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .productionState: return ".productionState"
      case .allStates: return ".allStates"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

///   A label selector operator is the set of operators that can be used in
///   a label selector requirement.
public enum Apipb_LabelSelectorOperator: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case `in` // = 0
  case notIn // = 1
  case exists // = 2
  case doesNotExist // = 3
  case gt // = 4
  case lt // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .`in`
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .`in`
    case 1: self = .notIn
    case 2: self = .exists
    case 3: self = .doesNotExist
    case 4: self = .gt
    case 5: self = .lt
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "in": self = .`in`
    case "notIn": self = .notIn
    case "exists": self = .exists
    case "doesNotExist": self = .doesNotExist
    case "gt": self = .gt
    case "lt": self = .lt
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "In": self = .`in`
    case "NotIn": self = .notIn
    case "Exists": self = .exists
    case "DoesNotExist": self = .doesNotExist
    case "Gt": self = .gt
    case "Lt": self = .lt
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "In": self = .`in`
    case "NotIn": self = .notIn
    case "Exists": self = .exists
    case "DoesNotExist": self = .doesNotExist
    case "Gt": self = .gt
    case "Lt": self = .lt
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .`in`: return 0
      case .notIn: return 1
      case .exists: return 2
      case .doesNotExist: return 3
      case .gt: return 4
      case .lt: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .`in`: return "\"In\""
      case .notIn: return "\"NotIn\""
      case .exists: return "\"Exists\""
      case .doesNotExist: return "\"DoesNotExist\""
      case .gt: return "\"Gt\""
      case .lt: return "\"Lt\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .`in`: return ".in"
      case .notIn: return ".notIn"
      case .exists: return ".exists"
      case .doesNotExist: return ".doesNotExist"
      case .gt: return ".gt"
      case .lt: return ".lt"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

public struct Apipb_GetProfileRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GetProfileRequest"}
  public var protoMessageName: String {return "GetProfileRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "email", swift: "email"),
  ]


  public var id: String = ""

  public var email: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &id)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &email)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: id, fieldNumber: 1)
    }
    if email != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: email, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GetProfileRequest) -> Bool {
    if id != other.id {return false}
    if email != other.email {return false}
    return true
  }
}

public struct Apipb_GetChildRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GetChildRequest"}
  public var protoMessageName: String {return "GetChildRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "child_id", json: "childId", swift: "childId"),
  ]


  public var childId: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &childId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if childId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: childId, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GetChildRequest) -> Bool {
    if childId != other.childId {return false}
    return true
  }
}

public struct Apipb_GetChildrenFromProfileRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GetChildrenFromProfileRequest"}
  public var protoMessageName: String {return "GetChildrenFromProfileRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "profile_id", json: "profileId", swift: "profileId"),
  ]


  public var profileId: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &profileId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if profileId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: profileId, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GetChildrenFromProfileRequest) -> Bool {
    if profileId != other.profileId {return false}
    return true
  }
}

public struct Apipb_ChangeChildActivationRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_ChangeChildActivationRequest"}
  public var protoMessageName: String {return "ChangeChildActivationRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "child_id", json: "childId", swift: "childId"),
    2: .same(proto: "active", swift: "active"),
  ]


  public var childId: String = ""

  public var active: Bool = false

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &childId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &active)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if childId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: childId, fieldNumber: 1)
    }
    if active != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: active, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_ChangeChildActivationRequest) -> Bool {
    if childId != other.childId {return false}
    if active != other.active {return false}
    return true
  }
}

public struct Apipb_GetChildrenFromProfileResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GetChildrenFromProfileResponse"}
  public var protoMessageName: String {return "GetChildrenFromProfileResponse"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "children", swift: "children"),
  ]


  public var children: [Apipb_Child] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Apipb_Child.self, value: &children)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !children.isEmpty {
      try visitor.visitRepeatedMessageField(value: children, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GetChildrenFromProfileResponse) -> Bool {
    if children != other.children {return false}
    return true
  }
}

public struct Apipb_GetGameReleaseRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GetGameReleaseRequest"}
  public var protoMessageName: String {return "GetGameReleaseRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "game_id", json: "gameId", swift: "gameId"),
    2: .same(proto: "version", swift: "version"),
    3: .same(proto: "state", swift: "state"),
  ]


  public var gameId: String = ""

  ///  whether version or state must be entered
  public var version: String = ""

  ///  default value is production 
  public var state: Apipb_RequestReleaseState = Apipb_RequestReleaseState.productionState

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &gameId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &version)
    case 3: try setter.decodeSingularField(fieldType: Apipb_RequestReleaseState.self, value: &state)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if gameId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: gameId, fieldNumber: 1)
    }
    if version != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: version, fieldNumber: 2)
    }
    if state != Apipb_RequestReleaseState.productionState {
      try visitor.visitSingularField(fieldType: Apipb_RequestReleaseState.self, value: state, fieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GetGameReleaseRequest) -> Bool {
    if gameId != other.gameId {return false}
    if version != other.version {return false}
    if state != other.state {return false}
    return true
  }
}

public struct Apipb_SoundEnableRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_SoundEnableRequest"}
  public var protoMessageName: String {return "SoundEnableRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "child_id", json: "childId", swift: "childId"),
    2: .unique(proto: "profile_id", json: "profileId", swift: "profileId"),
    3: .same(proto: "enable", swift: "enable"),
  ]


  public var childId: String = ""

  public var profileId: String = ""

  public var enable: Bool = false

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &childId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &profileId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &enable)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if childId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: childId, fieldNumber: 1)
    }
    if profileId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: profileId, fieldNumber: 2)
    }
    if enable != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: enable, fieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_SoundEnableRequest) -> Bool {
    if childId != other.childId {return false}
    if profileId != other.profileId {return false}
    if enable != other.enable {return false}
    return true
  }
}

public struct Apipb_GameEntryRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GameEntryRequest"}
  public var protoMessageName: String {return "GameEntryRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "child_id", json: "childId", swift: "childId"),
    2: .unique(proto: "game_id", json: "gameId", swift: "gameId"),
    3: .same(proto: "type", swift: "type"),
    4: .same(proto: "settings", swift: "settings"),
    5: .same(proto: "index", swift: "index"),
  ]


  public enum RequestType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case add // = 0
    case activate // = 1
    case deactivate // = 2
    case settings // = 3
    case index // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .add
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .add
      case 1: self = .activate
      case 2: self = .deactivate
      case 3: self = .settings
      case 4: self = .index
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "add": self = .add
      case "activate": self = .activate
      case "deactivate": self = .deactivate
      case "settings": self = .settings
      case "index": self = .index
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "ADD": self = .add
      case "ACTIVATE": self = .activate
      case "DEACTIVATE": self = .deactivate
      case "SETTINGS": self = .settings
      case "INDEX": self = .index
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "ADD": self = .add
      case "ACTIVATE": self = .activate
      case "DEACTIVATE": self = .deactivate
      case "SETTINGS": self = .settings
      case "INDEX": self = .index
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .add: return 0
        case .activate: return 1
        case .deactivate: return 2
        case .settings: return 3
        case .index: return 4
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .add: return "\"ADD\""
        case .activate: return "\"ACTIVATE\""
        case .deactivate: return "\"DEACTIVATE\""
        case .settings: return "\"SETTINGS\""
        case .index: return "\"INDEX\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .add: return ".add"
        case .activate: return ".activate"
        case .deactivate: return ".deactivate"
        case .settings: return ".settings"
        case .index: return ".index"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public var childId: String = ""

  public var gameId: String = ""

  public var type: Apipb_GameEntryRequest.RequestType = Apipb_GameEntryRequest.RequestType.add

  public var settings: Data = Data()

  public var index: Int32 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &childId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &gameId)
    case 3: try setter.decodeSingularField(fieldType: Apipb_GameEntryRequest.RequestType.self, value: &type)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &settings)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &index)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if childId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: childId, fieldNumber: 1)
    }
    if gameId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: gameId, fieldNumber: 2)
    }
    if type != Apipb_GameEntryRequest.RequestType.add {
      try visitor.visitSingularField(fieldType: Apipb_GameEntryRequest.RequestType.self, value: type, fieldNumber: 3)
    }
    if settings != Data() {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: settings, fieldNumber: 4)
    }
    if index != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: index, fieldNumber: 5)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GameEntryRequest) -> Bool {
    if childId != other.childId {return false}
    if gameId != other.gameId {return false}
    if type != other.type {return false}
    if settings != other.settings {return false}
    if index != other.index {return false}
    return true
  }
}

public struct Apipb_PublishResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_PublishResponse"}
  public var protoMessageName: String {return "PublishResponse"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "type", swift: "type"),
    2: .same(proto: "message", swift: "message"),
    3: .same(proto: "token", swift: "token"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_PublishResponse
    var _type: Int32 = 0
    var _message: String = ""
    var _token: Apipb_UploadToken? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_type)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_message)
      case 3: try setter.decodeSingularMessageField(fieldType: Apipb_UploadToken.self, value: &_token)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _type != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _type, fieldNumber: 1)
      }
      if _message != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _message, fieldNumber: 2)
      }
      if let v = _token {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _type != other._type {return false}
      if _message != other._message {return false}
      if _token != other._token {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._type = _type
      clone._message = _message
      clone._token = _token
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var type: Int32 {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var message: String {
    get {return _storage._message}
    set {_uniqueStorage()._message = newValue}
  }

  public var token: Apipb_UploadToken {
    get {return _storage._token ?? Apipb_UploadToken()}
    set {_uniqueStorage()._token = newValue}
  }
  public var hasToken: Bool {
    return _storage._token != nil
  }
  public mutating func clearToken() {
    return _storage._token = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_PublishResponse) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_ValidateRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_ValidateRequest"}
  public var protoMessageName: String {return "ValidateRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "game_id", json: "gameId", swift: "gameId"),
    2: .unique(proto: "game_version", json: "gameVersion", swift: "gameVersion"),
    3: .unique(proto: "new_state", json: "newState", swift: "newState"),
  ]


  public var gameId: String = ""

  public var gameVersion: String = ""

  ///  only admins can change to validated state, and only developers can change to others
  public var newState: Apipb_ReleaseState = Apipb_ReleaseState.created

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &gameId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &gameVersion)
    case 3: try setter.decodeSingularField(fieldType: Apipb_ReleaseState.self, value: &newState)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if gameId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: gameId, fieldNumber: 1)
    }
    if gameVersion != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: gameVersion, fieldNumber: 2)
    }
    if newState != Apipb_ReleaseState.created {
      try visitor.visitSingularField(fieldType: Apipb_ReleaseState.self, value: newState, fieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_ValidateRequest) -> Bool {
    if gameId != other.gameId {return false}
    if gameVersion != other.gameVersion {return false}
    if newState != other.newState {return false}
    return true
  }
}

public struct Apipb_UpdateIndecesRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_UpdateIndecesRequest"}
  public var protoMessageName: String {return "UpdateIndecesRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "profile_id", json: "profileId", swift: "profileId"),
    2: .unique(proto: "child_id", json: "childId", swift: "childId"),
    3: .unique(proto: "game_ids", json: "gameIds", swift: "gameIds"),
  ]


  public var profileId: String = ""

  public var childId: String = ""

  public var gameIds: [String] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &profileId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &childId)
    case 3: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &gameIds)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if profileId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: profileId, fieldNumber: 1)
    }
    if childId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: childId, fieldNumber: 2)
    }
    if !gameIds.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: gameIds, fieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_UpdateIndecesRequest) -> Bool {
    if profileId != other.profileId {return false}
    if childId != other.childId {return false}
    if gameIds != other.gameIds {return false}
    return true
  }
}

///  Get game by game_id or unique_name
public struct Apipb_GetGameRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GetGameRequest"}
  public var protoMessageName: String {return "GetGameRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "unique_name", json: "uniqueName", swift: "uniqueName"),
    2: .unique(proto: "game_id", json: "gameId", swift: "gameId"),
  ]


  public var uniqueName: String = ""

  public var gameId: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &uniqueName)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &gameId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if uniqueName != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: uniqueName, fieldNumber: 1)
    }
    if gameId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: gameId, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GetGameRequest) -> Bool {
    if uniqueName != other.uniqueName {return false}
    if gameId != other.gameId {return false}
    return true
  }
}

public struct Apipb_ListGamesRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_ListGamesRequest"}
  public var protoMessageName: String {return "ListGamesRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "release_state", json: "releaseState", swift: "releaseState"),
    2: .same(proto: "limit", swift: "limit"),
    3: .same(proto: "offset", swift: "offset"),
    4: .same(proto: "language", swift: "language"),
  ]


  public enum InnerState: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case any // = 0
    case created // = 1
    case development // = 2
    case waiting // = 3
    case rejected // = 4
    case validated // = 5
    case production // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .any
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .any
      case 1: self = .created
      case 2: self = .development
      case 3: self = .waiting
      case 4: self = .rejected
      case 5: self = .validated
      case 6: self = .production
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "any": self = .any
      case "created": self = .created
      case "development": self = .development
      case "waiting": self = .waiting
      case "rejected": self = .rejected
      case "validated": self = .validated
      case "production": self = .production
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "ANY": self = .any
      case "CREATED": self = .created
      case "DEVELOPMENT": self = .development
      case "WAITING": self = .waiting
      case "REJECTED": self = .rejected
      case "VALIDATED": self = .validated
      case "PRODUCTION": self = .production
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "ANY": self = .any
      case "CREATED": self = .created
      case "DEVELOPMENT": self = .development
      case "WAITING": self = .waiting
      case "REJECTED": self = .rejected
      case "VALIDATED": self = .validated
      case "PRODUCTION": self = .production
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .any: return 0
        case .created: return 1
        case .development: return 2
        case .waiting: return 3
        case .rejected: return 4
        case .validated: return 5
        case .production: return 6
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .any: return "\"ANY\""
        case .created: return "\"CREATED\""
        case .development: return "\"DEVELOPMENT\""
        case .waiting: return "\"WAITING\""
        case .rejected: return "\"REJECTED\""
        case .validated: return "\"VALIDATED\""
        case .production: return "\"PRODUCTION\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .any: return ".any"
        case .created: return ".created"
        case .development: return ".development"
        case .waiting: return ".waiting"
        case .rejected: return ".rejected"
        case .validated: return ".validated"
        case .production: return ".production"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public var releaseState: Apipb_ListGamesRequest.InnerState = Apipb_ListGamesRequest.InnerState.any

  public var limit: Int32 = 0

  public var offset: Int32 = 0

  public var language: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: Apipb_ListGamesRequest.InnerState.self, value: &releaseState)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &limit)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &offset)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &language)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if releaseState != Apipb_ListGamesRequest.InnerState.any {
      try visitor.visitSingularField(fieldType: Apipb_ListGamesRequest.InnerState.self, value: releaseState, fieldNumber: 1)
    }
    if limit != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: limit, fieldNumber: 2)
    }
    if offset != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: offset, fieldNumber: 3)
    }
    if language != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: language, fieldNumber: 4)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_ListGamesRequest) -> Bool {
    if releaseState != other.releaseState {return false}
    if limit != other.limit {return false}
    if offset != other.offset {return false}
    if language != other.language {return false}
    return true
  }
}

public struct Apipb_ListItem: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_ListItem"}
  public var protoMessageName: String {return "ListItem"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "game_id", json: "gameId", swift: "gameId"),
    2: .unique(proto: "unique_name", json: "uniqueName", swift: "uniqueName"),
    3: .unique(proto: "latest_version", json: "latestVersion", swift: "latestVersion"),
    4: .unique(proto: "latest_state", json: "latestState", swift: "latestState"),
    5: .unique(proto: "production_version", json: "productionVersion", swift: "productionVersion"),
    6: .same(proto: "storage", swift: "storage"),
    7: .unique(proto: "archive_format", json: "archiveFormat", swift: "archiveFormat"),
    8: .unique(proto: "released_at", json: "releasedAt", swift: "releasedAt"),
    9: .same(proto: "languages", swift: "languages"),
  ]


  public var gameId: String = ""

  public var uniqueName: String = ""

  public var latestVersion: String = ""

  public var latestState: Apipb_ReleaseState = Apipb_ReleaseState.created

  public var productionVersion: String = ""

  public var storage: String = ""

  public var archiveFormat: String = ""

  public var releasedAt: Int64 = 0

  public var languages: [String] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &gameId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &uniqueName)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &latestVersion)
    case 4: try setter.decodeSingularField(fieldType: Apipb_ReleaseState.self, value: &latestState)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &productionVersion)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &storage)
    case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &archiveFormat)
    case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &releasedAt)
    case 9: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &languages)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if gameId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: gameId, fieldNumber: 1)
    }
    if uniqueName != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: uniqueName, fieldNumber: 2)
    }
    if latestVersion != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: latestVersion, fieldNumber: 3)
    }
    if latestState != Apipb_ReleaseState.created {
      try visitor.visitSingularField(fieldType: Apipb_ReleaseState.self, value: latestState, fieldNumber: 4)
    }
    if productionVersion != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: productionVersion, fieldNumber: 5)
    }
    if storage != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: storage, fieldNumber: 6)
    }
    if archiveFormat != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: archiveFormat, fieldNumber: 7)
    }
    if releasedAt != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: releasedAt, fieldNumber: 8)
    }
    if !languages.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: languages, fieldNumber: 9)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_ListItem) -> Bool {
    if gameId != other.gameId {return false}
    if uniqueName != other.uniqueName {return false}
    if latestVersion != other.latestVersion {return false}
    if latestState != other.latestState {return false}
    if productionVersion != other.productionVersion {return false}
    if storage != other.storage {return false}
    if archiveFormat != other.archiveFormat {return false}
    if releasedAt != other.releasedAt {return false}
    if languages != other.languages {return false}
    return true
  }
}

public struct Apipb_ListItemWithTests: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_ListItemWithTests"}
  public var protoMessageName: String {return "ListItemWithTests"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "game_id", json: "gameId", swift: "gameId"),
    2: .unique(proto: "unique_name", json: "uniqueName", swift: "uniqueName"),
    3: .unique(proto: "testing_version", json: "testingVersion", swift: "testingVersion"),
    4: .same(proto: "groups", swift: "groups"),
  ]


  public struct TestGroup: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "Apipb_ListItemWithTests.TestGroup"}
    public var protoMessageName: String {return "TestGroup"}
    public var protoPackageName: String {return "apipb"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      1: .same(proto: "name", swift: "name"),
      2: .same(proto: "weight", swift: "weight"),
      3: .unique(proto: "latest_version", json: "latestVersion", swift: "latestVersion"),
      4: .unique(proto: "latest_state", json: "latestState", swift: "latestState"),
      5: .unique(proto: "production_version", json: "productionVersion", swift: "productionVersion"),
      6: .same(proto: "storage", swift: "storage"),
      7: .unique(proto: "archive_format", json: "archiveFormat", swift: "archiveFormat"),
      8: .unique(proto: "released_at", json: "releasedAt", swift: "releasedAt"),
      9: .same(proto: "languages", swift: "languages"),
    ]


    public var name: String = ""

    public var weight: Int32 = 0

    public var latestVersion: String = ""

    public var latestState: Apipb_ReleaseState = Apipb_ReleaseState.created

    public var productionVersion: String = ""

    public var storage: String = ""

    public var archiveFormat: String = ""

    public var releasedAt: Int64 = 0

    public var languages: [String] = []

    public init() {}

    public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &name)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &weight)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &latestVersion)
      case 4: try setter.decodeSingularField(fieldType: Apipb_ReleaseState.self, value: &latestState)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &productionVersion)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &storage)
      case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &archiveFormat)
      case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &releasedAt)
      case 9: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &languages)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
      if name != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: name, fieldNumber: 1)
      }
      if weight != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: weight, fieldNumber: 2)
      }
      if latestVersion != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: latestVersion, fieldNumber: 3)
      }
      if latestState != Apipb_ReleaseState.created {
        try visitor.visitSingularField(fieldType: Apipb_ReleaseState.self, value: latestState, fieldNumber: 4)
      }
      if productionVersion != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: productionVersion, fieldNumber: 5)
      }
      if storage != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: storage, fieldNumber: 6)
      }
      if archiveFormat != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: archiveFormat, fieldNumber: 7)
      }
      if releasedAt != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: releasedAt, fieldNumber: 8)
      }
      if !languages.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: languages, fieldNumber: 9)
      }
    }

    public func _protoc_generated_isEqualTo(other: Apipb_ListItemWithTests.TestGroup) -> Bool {
      if name != other.name {return false}
      if weight != other.weight {return false}
      if latestVersion != other.latestVersion {return false}
      if latestState != other.latestState {return false}
      if productionVersion != other.productionVersion {return false}
      if storage != other.storage {return false}
      if archiveFormat != other.archiveFormat {return false}
      if releasedAt != other.releasedAt {return false}
      if languages != other.languages {return false}
      return true
    }
  }

  public var gameId: String = ""

  public var uniqueName: String = ""

  public var testingVersion: Int32 = 0

  public var groups: [Apipb_ListItemWithTests.TestGroup] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &gameId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &uniqueName)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &testingVersion)
    case 4: try setter.decodeRepeatedMessageField(fieldType: Apipb_ListItemWithTests.TestGroup.self, value: &groups)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if gameId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: gameId, fieldNumber: 1)
    }
    if uniqueName != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: uniqueName, fieldNumber: 2)
    }
    if testingVersion != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: testingVersion, fieldNumber: 3)
    }
    if !groups.isEmpty {
      try visitor.visitRepeatedMessageField(value: groups, fieldNumber: 4)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_ListItemWithTests) -> Bool {
    if gameId != other.gameId {return false}
    if uniqueName != other.uniqueName {return false}
    if testingVersion != other.testingVersion {return false}
    if groups != other.groups {return false}
    return true
  }
}

public struct Apipb_GetLatestVersionsRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GetLatestVersionsRequest"}
  public var protoMessageName: String {return "GetLatestVersionsRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "state", swift: "state"),
    2: .unique(proto: "game_ids", json: "gameIds", swift: "gameIds"),
  ]


  ///  Default State is PRODUCTION
  public var state: Apipb_RequestReleaseState = Apipb_RequestReleaseState.productionState

  public var gameIds: [String] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: Apipb_RequestReleaseState.self, value: &state)
    case 2: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &gameIds)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if state != Apipb_RequestReleaseState.productionState {
      try visitor.visitSingularField(fieldType: Apipb_RequestReleaseState.self, value: state, fieldNumber: 1)
    }
    if !gameIds.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: gameIds, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GetLatestVersionsRequest) -> Bool {
    if state != other.state {return false}
    if gameIds != other.gameIds {return false}
    return true
  }
}

public struct Apipb_GameAndVersion: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GameAndVersion"}
  public var protoMessageName: String {return "GameAndVersion"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "game_id", json: "gameId", swift: "gameId"),
    2: .same(proto: "version", swift: "version"),
    3: .unique(proto: "tarball_url", json: "tarballUrl", swift: "tarballURL"),
  ]


  public var gameId: String = ""

  public var version: String = ""

  public var tarballURL: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &gameId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &version)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &tarballURL)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if gameId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: gameId, fieldNumber: 1)
    }
    if version != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: version, fieldNumber: 2)
    }
    if tarballURL != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: tarballURL, fieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GameAndVersion) -> Bool {
    if gameId != other.gameId {return false}
    if version != other.version {return false}
    if tarballURL != other.tarballURL {return false}
    return true
  }
}

public struct Apipb_GameVersionsResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GameVersionsResponse"}
  public var protoMessageName: String {return "GameVersionsResponse"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "results", swift: "results"),
  ]


  public var results: [Apipb_GameAndVersion] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Apipb_GameAndVersion.self, value: &results)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !results.isEmpty {
      try visitor.visitRepeatedMessageField(value: results, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GameVersionsResponse) -> Bool {
    if results != other.results {return false}
    return true
  }
}

///  Search Service
public struct Apipb_IndexRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_IndexRequest"}
  public var protoMessageName: String {return "IndexRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames = FieldNameMap()


  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
  }

  public func _protoc_generated_isEqualTo(other: Apipb_IndexRequest) -> Bool {
    return true
  }
}

public struct Apipb_SearchResult: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_SearchResult"}
  public var protoMessageName: String {return "SearchResult"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "game_id", json: "gameId", swift: "gameId"),
    2: .same(proto: "score", swift: "score"),
  ]


  public var gameId: String = ""

  public var score: Double = 0

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &gameId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: &score)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if gameId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: gameId, fieldNumber: 1)
    }
    if score != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: score, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_SearchResult) -> Bool {
    if gameId != other.gameId {return false}
    if score != other.score {return false}
    return true
  }
}

public struct Apipb_SearchRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_SearchRequest"}
  public var protoMessageName: String {return "SearchRequest"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "query", swift: "query"),
    2: .same(proto: "state", swift: "state"),
  ]


  public var query: String = ""

  ///  Default State is PRODUCTION    
  public var state: Apipb_RequestReleaseState = Apipb_RequestReleaseState.productionState

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &query)
    case 2: try setter.decodeSingularField(fieldType: Apipb_RequestReleaseState.self, value: &state)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if query != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: query, fieldNumber: 1)
    }
    if state != Apipb_RequestReleaseState.productionState {
      try visitor.visitSingularField(fieldType: Apipb_RequestReleaseState.self, value: state, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_SearchRequest) -> Bool {
    if query != other.query {return false}
    if state != other.state {return false}
    return true
  }
}

public struct Apipb_SearchResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_SearchResponse"}
  public var protoMessageName: String {return "SearchResponse"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "type", swift: "type"),
    2: .same(proto: "results", swift: "results"),
  ]


  public var type: Int32 = 0

  public var results: [Apipb_SearchResult] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &type)
    case 2: try setter.decodeRepeatedMessageField(fieldType: Apipb_SearchResult.self, value: &results)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if type != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: type, fieldNumber: 1)
    }
    if !results.isEmpty {
      try visitor.visitRepeatedMessageField(value: results, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_SearchResponse) -> Bool {
    if type != other.type {return false}
    if results != other.results {return false}
    return true
  }
}

///   Common
public struct Apipb_Response: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_Response"}
  public var protoMessageName: String {return "Response"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "type", swift: "type"),
    2: .same(proto: "message", swift: "message"),
  ]


  public var type: Int32 = 0

  public var message: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &type)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &message)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if type != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: type, fieldNumber: 1)
    }
    if message != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: message, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_Response) -> Bool {
    if type != other.type {return false}
    if message != other.message {return false}
    return true
  }
}

///   A label selector requirement is a selector that contains values, a key, and an operator
///   that relates the key and values.
public struct Apipb_LabelSelectorRequirement: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_LabelSelectorRequirement"}
  public var protoMessageName: String {return "LabelSelectorRequirement"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "key", swift: "key"),
    2: .same(proto: "operator", swift: "operator_p"),
    3: .same(proto: "values", swift: "values"),
  ]


  ///   key is the label key that the selector applies to.
  public var key: String = ""

  ///   operator represents a key's relationship to a set of values.
  ///   Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
  public var operator_p: Apipb_LabelSelectorOperator = Apipb_LabelSelectorOperator.`in`

  ///   values is an array of string values. If the operator is In or NotIn,
  ///   the values array must be non-empty. If the operator is Exists or DoesNotExist,
  ///   the values array must be empty. If the operator is Gt or Lt, the values
  ///   array must have a single element, which will be interpreted as an integer.
  public var values: [String] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &key)
    case 2: try setter.decodeSingularField(fieldType: Apipb_LabelSelectorOperator.self, value: &operator_p)
    case 3: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &values)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if key != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: key, fieldNumber: 1)
    }
    if operator_p != Apipb_LabelSelectorOperator.`in` {
      try visitor.visitSingularField(fieldType: Apipb_LabelSelectorOperator.self, value: operator_p, fieldNumber: 2)
    }
    if !values.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: values, fieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_LabelSelectorRequirement) -> Bool {
    if key != other.key {return false}
    if operator_p != other.operator_p {return false}
    if values != other.values {return false}
    return true
  }
}

///   An empty label selector term matches all objects. A null label selector term
///   matches no objects.
public struct Apipb_LabelSelectorTerm: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_LabelSelectorTerm"}
  public var protoMessageName: String {return "LabelSelectorTerm"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "expressions", swift: "expressions"),
  ]


  ///   expressions is a list of label selector requirements. The requirements are ANDed.
  public var expressions: [Apipb_LabelSelectorRequirement] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Apipb_LabelSelectorRequirement.self, value: &expressions)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !expressions.isEmpty {
      try visitor.visitRepeatedMessageField(value: expressions, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_LabelSelectorTerm) -> Bool {
    if expressions != other.expressions {return false}
    return true
  }
}

///   A label selector represents the union of the results of one or more label queries
///   over a set of labels; that is, it represents the OR of the selectors represented
///   by the labelSelectorTerms.
public struct Apipb_LabelSelector: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_LabelSelector"}
  public var protoMessageName: String {return "LabelSelector"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "terms", swift: "terms"),
  ]


  ///   terms is a list of label selector terms. The terms are ORed.
  public var terms: [Apipb_LabelSelectorTerm] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Apipb_LabelSelectorTerm.self, value: &terms)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !terms.isEmpty {
      try visitor.visitRepeatedMessageField(value: terms, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_LabelSelector) -> Bool {
    if terms != other.terms {return false}
    return true
  }
}
