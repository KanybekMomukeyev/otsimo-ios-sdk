/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: messages.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

fileprivate let _protobuf_package = "apipb"

public enum Apipb_RequestReleaseState: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  public typealias RawValue = Int
  case productionState // = 0
  case allStates // = 1
  case UNRECOGNIZED(Int)

  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRODUCTION_STATE"),
    1: .same(proto: "ALL_STATES"),
  ]

  public init() {
    self = .productionState
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .productionState
    case 1: self = .allStates
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .productionState: return 0
    case .allStates: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

///   A label selector operator is the set of operators that can be used in
///   a label selector requirement.
public enum Apipb_LabelSelectorOperator: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  public typealias RawValue = Int
  case `in` // = 0
  case notIn // = 1
  case exists // = 2
  case doesNotExist // = 3
  case gt // = 4
  case lt // = 5
  case UNRECOGNIZED(Int)

  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "In"),
    1: .same(proto: "NotIn"),
    2: .same(proto: "Exists"),
    3: .same(proto: "DoesNotExist"),
    4: .same(proto: "Gt"),
    5: .same(proto: "Lt"),
  ]

  public init() {
    self = .`in`
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .`in`
    case 1: self = .notIn
    case 2: self = .exists
    case 3: self = .doesNotExist
    case 4: self = .gt
    case 5: self = .lt
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .`in`: return 0
    case .notIn: return 1
    case .exists: return 2
    case .doesNotExist: return 3
    case .gt: return 4
    case .lt: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public struct Apipb_GetProfileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetProfileRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "email"),
  ]

  public var id: String = ""

  public var email: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &id)
      case 2: try decoder.decodeSingularStringField(value: &email)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !id.isEmpty {
      try visitor.visitSingularStringField(value: id, fieldNumber: 1)
    }
    if !email.isEmpty {
      try visitor.visitSingularStringField(value: email, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GetProfileRequest) -> Bool {
    if id != other.id {return false}
    if email != other.email {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GetChildRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetChildRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "child_id"),
  ]

  public var childId: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &childId)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !childId.isEmpty {
      try visitor.visitSingularStringField(value: childId, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GetChildRequest) -> Bool {
    if childId != other.childId {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GetChildrenFromProfileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetChildrenFromProfileRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "profile_id"),
  ]

  public var profileId: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &profileId)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !profileId.isEmpty {
      try visitor.visitSingularStringField(value: profileId, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GetChildrenFromProfileRequest) -> Bool {
    if profileId != other.profileId {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_ChangeChildActivationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChangeChildActivationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "child_id"),
    2: .same(proto: "active"),
  ]

  public var childId: String = ""

  public var active: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &childId)
      case 2: try decoder.decodeSingularBoolField(value: &active)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !childId.isEmpty {
      try visitor.visitSingularStringField(value: childId, fieldNumber: 1)
    }
    if active != false {
      try visitor.visitSingularBoolField(value: active, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_ChangeChildActivationRequest) -> Bool {
    if childId != other.childId {return false}
    if active != other.active {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GetChildrenFromProfileResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetChildrenFromProfileResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "children"),
  ]

  public var children: [Apipb_Child] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &children)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !children.isEmpty {
      try visitor.visitRepeatedMessageField(value: children, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GetChildrenFromProfileResponse) -> Bool {
    if children != other.children {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GetGameReleaseRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetGameReleaseRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_id"),
    2: .same(proto: "version"),
    3: .same(proto: "state"),
  ]

  public var gameId: String = ""

  ///  whether version or state must be entered
  public var version: String = ""

  ///  default value is production 
  public var state: Apipb_RequestReleaseState = Apipb_RequestReleaseState.productionState

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &gameId)
      case 2: try decoder.decodeSingularStringField(value: &version)
      case 3: try decoder.decodeSingularEnumField(value: &state)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !gameId.isEmpty {
      try visitor.visitSingularStringField(value: gameId, fieldNumber: 1)
    }
    if !version.isEmpty {
      try visitor.visitSingularStringField(value: version, fieldNumber: 2)
    }
    if state != Apipb_RequestReleaseState.productionState {
      try visitor.visitSingularEnumField(value: state, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GetGameReleaseRequest) -> Bool {
    if gameId != other.gameId {return false}
    if version != other.version {return false}
    if state != other.state {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_SoundEnableRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SoundEnableRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "child_id"),
    2: .standard(proto: "profile_id"),
    3: .same(proto: "enable"),
  ]

  public var childId: String = ""

  public var profileId: String = ""

  public var enable: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &childId)
      case 2: try decoder.decodeSingularStringField(value: &profileId)
      case 3: try decoder.decodeSingularBoolField(value: &enable)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !childId.isEmpty {
      try visitor.visitSingularStringField(value: childId, fieldNumber: 1)
    }
    if !profileId.isEmpty {
      try visitor.visitSingularStringField(value: profileId, fieldNumber: 2)
    }
    if enable != false {
      try visitor.visitSingularBoolField(value: enable, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_SoundEnableRequest) -> Bool {
    if childId != other.childId {return false}
    if profileId != other.profileId {return false}
    if enable != other.enable {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GameEntryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameEntryRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "child_id"),
    2: .standard(proto: "game_id"),
    3: .same(proto: "type"),
    4: .same(proto: "settings"),
    5: .same(proto: "index"),
  ]

  public var childId: String = ""

  public var gameId: String = ""

  public var type: Apipb_GameEntryRequest.RequestType = Apipb_GameEntryRequest.RequestType.add

  public var settings: Data = Data()

  public var index: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum RequestType: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case add // = 0
    case activate // = 1
    case deactivate // = 2
    case settings // = 3
    case index // = 4
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "ADD"),
      1: .same(proto: "ACTIVATE"),
      2: .same(proto: "DEACTIVATE"),
      3: .same(proto: "SETTINGS"),
      4: .same(proto: "INDEX"),
    ]

    public init() {
      self = .add
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .add
      case 1: self = .activate
      case 2: self = .deactivate
      case 3: self = .settings
      case 4: self = .index
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .add: return 0
      case .activate: return 1
      case .deactivate: return 2
      case .settings: return 3
      case .index: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &childId)
      case 2: try decoder.decodeSingularStringField(value: &gameId)
      case 3: try decoder.decodeSingularEnumField(value: &type)
      case 4: try decoder.decodeSingularBytesField(value: &settings)
      case 5: try decoder.decodeSingularInt32Field(value: &index)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !childId.isEmpty {
      try visitor.visitSingularStringField(value: childId, fieldNumber: 1)
    }
    if !gameId.isEmpty {
      try visitor.visitSingularStringField(value: gameId, fieldNumber: 2)
    }
    if type != Apipb_GameEntryRequest.RequestType.add {
      try visitor.visitSingularEnumField(value: type, fieldNumber: 3)
    }
    if !settings.isEmpty {
      try visitor.visitSingularBytesField(value: settings, fieldNumber: 4)
    }
    if index != 0 {
      try visitor.visitSingularInt32Field(value: index, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GameEntryRequest) -> Bool {
    if childId != other.childId {return false}
    if gameId != other.gameId {return false}
    if type != other.type {return false}
    if settings != other.settings {return false}
    if index != other.index {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_PublishResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PublishResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "message"),
    3: .same(proto: "token"),
  ]

  private class _StorageClass {
    var _type: Int32 = 0
    var _message: String = ""
    var _token: Apipb_UploadToken? = nil

    init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _message = source._message
      _token = source._token
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var type: Int32 {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var message: String {
    get {return _storage._message}
    set {_uniqueStorage()._message = newValue}
  }

  public var token: Apipb_UploadToken {
    get {return _storage._token ?? Apipb_UploadToken()}
    set {_uniqueStorage()._token = newValue}
  }
  public var hasToken: Bool {
    return _storage._token != nil
  }
  public mutating func clearToken() {
    return _storage._token = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._type)
        case 2: try decoder.decodeSingularStringField(value: &_storage._message)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._token)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type != 0 {
        try visitor.visitSingularInt32Field(value: _storage._type, fieldNumber: 1)
      }
      if !_storage._message.isEmpty {
        try visitor.visitSingularStringField(value: _storage._message, fieldNumber: 2)
      }
      if let v = _storage._token {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_PublishResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._type != other_storage._type {return false}
        if _storage._message != other_storage._message {return false}
        if _storage._token != other_storage._token {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_ValidateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ValidateRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_id"),
    2: .standard(proto: "game_version"),
    3: .standard(proto: "new_state"),
  ]

  public var gameId: String = ""

  public var gameVersion: String = ""

  ///  only admins can change to validated state, and only developers can change to others
  public var newState: Apipb_ReleaseState = Apipb_ReleaseState.created

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &gameId)
      case 2: try decoder.decodeSingularStringField(value: &gameVersion)
      case 3: try decoder.decodeSingularEnumField(value: &newState)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !gameId.isEmpty {
      try visitor.visitSingularStringField(value: gameId, fieldNumber: 1)
    }
    if !gameVersion.isEmpty {
      try visitor.visitSingularStringField(value: gameVersion, fieldNumber: 2)
    }
    if newState != Apipb_ReleaseState.created {
      try visitor.visitSingularEnumField(value: newState, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_ValidateRequest) -> Bool {
    if gameId != other.gameId {return false}
    if gameVersion != other.gameVersion {return false}
    if newState != other.newState {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_UpdateIndecesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateIndecesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "profile_id"),
    2: .standard(proto: "child_id"),
    3: .standard(proto: "game_ids"),
  ]

  public var profileId: String = ""

  public var childId: String = ""

  public var gameIds: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &profileId)
      case 2: try decoder.decodeSingularStringField(value: &childId)
      case 3: try decoder.decodeRepeatedStringField(value: &gameIds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !profileId.isEmpty {
      try visitor.visitSingularStringField(value: profileId, fieldNumber: 1)
    }
    if !childId.isEmpty {
      try visitor.visitSingularStringField(value: childId, fieldNumber: 2)
    }
    if !gameIds.isEmpty {
      try visitor.visitRepeatedStringField(value: gameIds, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_UpdateIndecesRequest) -> Bool {
    if profileId != other.profileId {return false}
    if childId != other.childId {return false}
    if gameIds != other.gameIds {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///  Get game by game_id or unique_name
public struct Apipb_GetGameRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetGameRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unique_name"),
    2: .standard(proto: "game_id"),
  ]

  public var uniqueName: String = ""

  public var gameId: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &uniqueName)
      case 2: try decoder.decodeSingularStringField(value: &gameId)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !uniqueName.isEmpty {
      try visitor.visitSingularStringField(value: uniqueName, fieldNumber: 1)
    }
    if !gameId.isEmpty {
      try visitor.visitSingularStringField(value: gameId, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GetGameRequest) -> Bool {
    if uniqueName != other.uniqueName {return false}
    if gameId != other.gameId {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_ListGamesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListGamesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "release_state"),
    2: .same(proto: "limit"),
    3: .same(proto: "offset"),
    4: .same(proto: "language"),
  ]

  public var releaseState: Apipb_ListGamesRequest.InnerState = Apipb_ListGamesRequest.InnerState.any

  public var limit: Int32 = 0

  public var offset: Int32 = 0

  public var language: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum InnerState: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case any // = 0
    case created // = 1
    case development // = 2
    case waiting // = 3
    case rejected // = 4
    case validated // = 5
    case production // = 6
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "ANY"),
      1: .same(proto: "CREATED"),
      2: .same(proto: "DEVELOPMENT"),
      3: .same(proto: "WAITING"),
      4: .same(proto: "REJECTED"),
      5: .same(proto: "VALIDATED"),
      6: .same(proto: "PRODUCTION"),
    ]

    public init() {
      self = .any
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .any
      case 1: self = .created
      case 2: self = .development
      case 3: self = .waiting
      case 4: self = .rejected
      case 5: self = .validated
      case 6: self = .production
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .any: return 0
      case .created: return 1
      case .development: return 2
      case .waiting: return 3
      case .rejected: return 4
      case .validated: return 5
      case .production: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &releaseState)
      case 2: try decoder.decodeSingularInt32Field(value: &limit)
      case 3: try decoder.decodeSingularInt32Field(value: &offset)
      case 4: try decoder.decodeSingularStringField(value: &language)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if releaseState != Apipb_ListGamesRequest.InnerState.any {
      try visitor.visitSingularEnumField(value: releaseState, fieldNumber: 1)
    }
    if limit != 0 {
      try visitor.visitSingularInt32Field(value: limit, fieldNumber: 2)
    }
    if offset != 0 {
      try visitor.visitSingularInt32Field(value: offset, fieldNumber: 3)
    }
    if !language.isEmpty {
      try visitor.visitSingularStringField(value: language, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_ListGamesRequest) -> Bool {
    if releaseState != other.releaseState {return false}
    if limit != other.limit {return false}
    if offset != other.offset {return false}
    if language != other.language {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_ListItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_id"),
    2: .standard(proto: "unique_name"),
    3: .standard(proto: "latest_version"),
    4: .standard(proto: "latest_state"),
    5: .standard(proto: "production_version"),
    6: .same(proto: "storage"),
    7: .standard(proto: "archive_format"),
    8: .standard(proto: "released_at"),
    9: .same(proto: "languages"),
  ]

  public var gameId: String = ""

  public var uniqueName: String = ""

  public var latestVersion: String = ""

  public var latestState: Apipb_ReleaseState = Apipb_ReleaseState.created

  public var productionVersion: String = ""

  public var storage: String = ""

  public var archiveFormat: String = ""

  public var releasedAt: Int64 = 0

  public var languages: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &gameId)
      case 2: try decoder.decodeSingularStringField(value: &uniqueName)
      case 3: try decoder.decodeSingularStringField(value: &latestVersion)
      case 4: try decoder.decodeSingularEnumField(value: &latestState)
      case 5: try decoder.decodeSingularStringField(value: &productionVersion)
      case 6: try decoder.decodeSingularStringField(value: &storage)
      case 7: try decoder.decodeSingularStringField(value: &archiveFormat)
      case 8: try decoder.decodeSingularInt64Field(value: &releasedAt)
      case 9: try decoder.decodeRepeatedStringField(value: &languages)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !gameId.isEmpty {
      try visitor.visitSingularStringField(value: gameId, fieldNumber: 1)
    }
    if !uniqueName.isEmpty {
      try visitor.visitSingularStringField(value: uniqueName, fieldNumber: 2)
    }
    if !latestVersion.isEmpty {
      try visitor.visitSingularStringField(value: latestVersion, fieldNumber: 3)
    }
    if latestState != Apipb_ReleaseState.created {
      try visitor.visitSingularEnumField(value: latestState, fieldNumber: 4)
    }
    if !productionVersion.isEmpty {
      try visitor.visitSingularStringField(value: productionVersion, fieldNumber: 5)
    }
    if !storage.isEmpty {
      try visitor.visitSingularStringField(value: storage, fieldNumber: 6)
    }
    if !archiveFormat.isEmpty {
      try visitor.visitSingularStringField(value: archiveFormat, fieldNumber: 7)
    }
    if releasedAt != 0 {
      try visitor.visitSingularInt64Field(value: releasedAt, fieldNumber: 8)
    }
    if !languages.isEmpty {
      try visitor.visitRepeatedStringField(value: languages, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_ListItem) -> Bool {
    if gameId != other.gameId {return false}
    if uniqueName != other.uniqueName {return false}
    if latestVersion != other.latestVersion {return false}
    if latestState != other.latestState {return false}
    if productionVersion != other.productionVersion {return false}
    if storage != other.storage {return false}
    if archiveFormat != other.archiveFormat {return false}
    if releasedAt != other.releasedAt {return false}
    if languages != other.languages {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_ListItemWithTests: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListItemWithTests"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_id"),
    2: .standard(proto: "unique_name"),
    3: .standard(proto: "testing_version"),
    4: .same(proto: "groups"),
  ]

  public var gameId: String = ""

  public var uniqueName: String = ""

  public var testingVersion: Int32 = 0

  public var groups: [Apipb_ListItemWithTests.TestGroup] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct TestGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = Apipb_ListItemWithTests.protoMessageName + ".TestGroup"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      1: .same(proto: "name"),
      2: .same(proto: "weight"),
      3: .standard(proto: "latest_version"),
      4: .standard(proto: "latest_state"),
      5: .standard(proto: "production_version"),
      6: .same(proto: "storage"),
      7: .standard(proto: "archive_format"),
      8: .standard(proto: "released_at"),
      9: .same(proto: "languages"),
    ]

    public var name: String = ""

    public var weight: Int32 = 0

    public var latestVersion: String = ""

    public var latestState: Apipb_ReleaseState = Apipb_ReleaseState.created

    public var productionVersion: String = ""

    public var storage: String = ""

    public var archiveFormat: String = ""

    public var releasedAt: Int64 = 0

    public var languages: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &name)
        case 2: try decoder.decodeSingularInt32Field(value: &weight)
        case 3: try decoder.decodeSingularStringField(value: &latestVersion)
        case 4: try decoder.decodeSingularEnumField(value: &latestState)
        case 5: try decoder.decodeSingularStringField(value: &productionVersion)
        case 6: try decoder.decodeSingularStringField(value: &storage)
        case 7: try decoder.decodeSingularStringField(value: &archiveFormat)
        case 8: try decoder.decodeSingularInt64Field(value: &releasedAt)
        case 9: try decoder.decodeRepeatedStringField(value: &languages)
        default: break
        }
      }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !name.isEmpty {
        try visitor.visitSingularStringField(value: name, fieldNumber: 1)
      }
      if weight != 0 {
        try visitor.visitSingularInt32Field(value: weight, fieldNumber: 2)
      }
      if !latestVersion.isEmpty {
        try visitor.visitSingularStringField(value: latestVersion, fieldNumber: 3)
      }
      if latestState != Apipb_ReleaseState.created {
        try visitor.visitSingularEnumField(value: latestState, fieldNumber: 4)
      }
      if !productionVersion.isEmpty {
        try visitor.visitSingularStringField(value: productionVersion, fieldNumber: 5)
      }
      if !storage.isEmpty {
        try visitor.visitSingularStringField(value: storage, fieldNumber: 6)
      }
      if !archiveFormat.isEmpty {
        try visitor.visitSingularStringField(value: archiveFormat, fieldNumber: 7)
      }
      if releasedAt != 0 {
        try visitor.visitSingularInt64Field(value: releasedAt, fieldNumber: 8)
      }
      if !languages.isEmpty {
        try visitor.visitRepeatedStringField(value: languages, fieldNumber: 9)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    public func _protobuf_generated_isEqualTo(other: Apipb_ListItemWithTests.TestGroup) -> Bool {
      if name != other.name {return false}
      if weight != other.weight {return false}
      if latestVersion != other.latestVersion {return false}
      if latestState != other.latestState {return false}
      if productionVersion != other.productionVersion {return false}
      if storage != other.storage {return false}
      if archiveFormat != other.archiveFormat {return false}
      if releasedAt != other.releasedAt {return false}
      if languages != other.languages {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &gameId)
      case 2: try decoder.decodeSingularStringField(value: &uniqueName)
      case 3: try decoder.decodeSingularInt32Field(value: &testingVersion)
      case 4: try decoder.decodeRepeatedMessageField(value: &groups)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !gameId.isEmpty {
      try visitor.visitSingularStringField(value: gameId, fieldNumber: 1)
    }
    if !uniqueName.isEmpty {
      try visitor.visitSingularStringField(value: uniqueName, fieldNumber: 2)
    }
    if testingVersion != 0 {
      try visitor.visitSingularInt32Field(value: testingVersion, fieldNumber: 3)
    }
    if !groups.isEmpty {
      try visitor.visitRepeatedMessageField(value: groups, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_ListItemWithTests) -> Bool {
    if gameId != other.gameId {return false}
    if uniqueName != other.uniqueName {return false}
    if testingVersion != other.testingVersion {return false}
    if groups != other.groups {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GetLatestVersionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetLatestVersionsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .standard(proto: "game_ids"),
  ]

  ///  Default State is PRODUCTION
  public var state: Apipb_RequestReleaseState = Apipb_RequestReleaseState.productionState

  public var gameIds: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &state)
      case 2: try decoder.decodeRepeatedStringField(value: &gameIds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if state != Apipb_RequestReleaseState.productionState {
      try visitor.visitSingularEnumField(value: state, fieldNumber: 1)
    }
    if !gameIds.isEmpty {
      try visitor.visitRepeatedStringField(value: gameIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GetLatestVersionsRequest) -> Bool {
    if state != other.state {return false}
    if gameIds != other.gameIds {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GameAndVersion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameAndVersion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_id"),
    2: .same(proto: "version"),
    3: .standard(proto: "tarball_url"),
  ]

  public var gameId: String = ""

  public var version: String = ""

  public var tarballURL: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &gameId)
      case 2: try decoder.decodeSingularStringField(value: &version)
      case 3: try decoder.decodeSingularStringField(value: &tarballURL)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !gameId.isEmpty {
      try visitor.visitSingularStringField(value: gameId, fieldNumber: 1)
    }
    if !version.isEmpty {
      try visitor.visitSingularStringField(value: version, fieldNumber: 2)
    }
    if !tarballURL.isEmpty {
      try visitor.visitSingularStringField(value: tarballURL, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GameAndVersion) -> Bool {
    if gameId != other.gameId {return false}
    if version != other.version {return false}
    if tarballURL != other.tarballURL {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GameVersionsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameVersionsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "results"),
  ]

  public var results: [Apipb_GameAndVersion] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &results)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !results.isEmpty {
      try visitor.visitRepeatedMessageField(value: results, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GameVersionsResponse) -> Bool {
    if results != other.results {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///  Search Service
public struct Apipb_IndexRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IndexRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_IndexRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_SearchResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_id"),
    2: .same(proto: "score"),
  ]

  public var gameId: String = ""

  public var score: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &gameId)
      case 2: try decoder.decodeSingularDoubleField(value: &score)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !gameId.isEmpty {
      try visitor.visitSingularStringField(value: gameId, fieldNumber: 1)
    }
    if score != 0 {
      try visitor.visitSingularDoubleField(value: score, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_SearchResult) -> Bool {
    if gameId != other.gameId {return false}
    if score != other.score {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_SearchRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "query"),
    2: .same(proto: "state"),
  ]

  public var query: String = ""

  ///  Default State is PRODUCTION    
  public var state: Apipb_RequestReleaseState = Apipb_RequestReleaseState.productionState

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &query)
      case 2: try decoder.decodeSingularEnumField(value: &state)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !query.isEmpty {
      try visitor.visitSingularStringField(value: query, fieldNumber: 1)
    }
    if state != Apipb_RequestReleaseState.productionState {
      try visitor.visitSingularEnumField(value: state, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_SearchRequest) -> Bool {
    if query != other.query {return false}
    if state != other.state {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_SearchResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "results"),
  ]

  public var type: Int32 = 0

  public var results: [Apipb_SearchResult] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &type)
      case 2: try decoder.decodeRepeatedMessageField(value: &results)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if type != 0 {
      try visitor.visitSingularInt32Field(value: type, fieldNumber: 1)
    }
    if !results.isEmpty {
      try visitor.visitRepeatedMessageField(value: results, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_SearchResponse) -> Bool {
    if type != other.type {return false}
    if results != other.results {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///   Common
public struct Apipb_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "message"),
  ]

  public var type: Int32 = 0

  public var message: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &type)
      case 2: try decoder.decodeSingularStringField(value: &message)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if type != 0 {
      try visitor.visitSingularInt32Field(value: type, fieldNumber: 1)
    }
    if !message.isEmpty {
      try visitor.visitSingularStringField(value: message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_Response) -> Bool {
    if type != other.type {return false}
    if message != other.message {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///   A label selector requirement is a selector that contains values, a key, and an operator
///   that relates the key and values.
public struct Apipb_LabelSelectorRequirement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LabelSelectorRequirement"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "operator"),
    3: .same(proto: "values"),
  ]

  ///   key is the label key that the selector applies to.
  public var key: String = ""

  ///   operator represents a key's relationship to a set of values.
  ///   Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
  public var operator_p: Apipb_LabelSelectorOperator = Apipb_LabelSelectorOperator.`in`

  ///   values is an array of string values. If the operator is In or NotIn,
  ///   the values array must be non-empty. If the operator is Exists or DoesNotExist,
  ///   the values array must be empty. If the operator is Gt or Lt, the values
  ///   array must have a single element, which will be interpreted as an integer.
  public var values: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &key)
      case 2: try decoder.decodeSingularEnumField(value: &operator_p)
      case 3: try decoder.decodeRepeatedStringField(value: &values)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !key.isEmpty {
      try visitor.visitSingularStringField(value: key, fieldNumber: 1)
    }
    if operator_p != Apipb_LabelSelectorOperator.`in` {
      try visitor.visitSingularEnumField(value: operator_p, fieldNumber: 2)
    }
    if !values.isEmpty {
      try visitor.visitRepeatedStringField(value: values, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_LabelSelectorRequirement) -> Bool {
    if key != other.key {return false}
    if operator_p != other.operator_p {return false}
    if values != other.values {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///   An empty label selector term matches all objects. A null label selector term
///   matches no objects.
public struct Apipb_LabelSelectorTerm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LabelSelectorTerm"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "expressions"),
  ]

  ///   expressions is a list of label selector requirements. The requirements are ANDed.
  public var expressions: [Apipb_LabelSelectorRequirement] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &expressions)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !expressions.isEmpty {
      try visitor.visitRepeatedMessageField(value: expressions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_LabelSelectorTerm) -> Bool {
    if expressions != other.expressions {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///   A label selector represents the union of the results of one or more label queries
///   over a set of labels; that is, it represents the OR of the selectors represented
///   by the labelSelectorTerms.
public struct Apipb_LabelSelector: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LabelSelector"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "terms"),
  ]

  ///   terms is a list of label selector terms. The terms are ORed.
  public var terms: [Apipb_LabelSelectorTerm] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &terms)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !terms.isEmpty {
      try visitor.visitRepeatedMessageField(value: terms, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_LabelSelector) -> Bool {
    if terms != other.terms {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
