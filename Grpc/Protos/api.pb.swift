/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: api.proto
 *
 */

import Foundation
import SwiftProtobuf


public struct Apipb_StatisticsReq: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_StatisticsReq"}
  public var protoMessageName: String {return "StatisticsReq"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "time_from", json: "timeFrom", swift: "timeFrom"),
    2: .unique(proto: "time_to", json: "timeTo", swift: "timeTo"),
  ]


  public var timeFrom: Int64 = 0

  public var timeTo: Int64 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &timeFrom)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &timeTo)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if timeFrom != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: timeFrom, fieldNumber: 1)
    }
    if timeTo != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: timeTo, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_StatisticsReq) -> Bool {
    if timeFrom != other.timeFrom {return false}
    if timeTo != other.timeTo {return false}
    return true
  }
}

public struct Apipb_StatisticsRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_StatisticsRes"}
  public var protoMessageName: String {return "StatisticsRes"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "statistics", swift: "statistics"),
  ]


  public var statistics: Dictionary<String,Int64> = [:]

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt64>.self, value: &statistics)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !statistics.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt64>.self, value: statistics, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_StatisticsRes) -> Bool {
    if statistics != other.statistics {return false}
    return true
  }
}
