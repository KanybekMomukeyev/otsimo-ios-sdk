/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: listener.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

fileprivate let _protobuf_package = "apipb"

public struct Apipb_DeviceInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeviceInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vendorId"),
    2: .same(proto: "clientSdk"),
    3: .same(proto: "bundleIdentifier"),
    4: .same(proto: "bundleVersion"),
    5: .same(proto: "bundleShortVersion"),
    6: .same(proto: "deviceType"),
    7: .same(proto: "deviceName"),
    8: .same(proto: "osName"),
    9: .same(proto: "systemVersion"),
    10: .same(proto: "languageCode"),
    11: .same(proto: "countryCode"),
  ]

  public var vendorId: String = ""

  public var clientSdk: String = ""

  public var bundleIdentifier: String = ""

  public var bundleVersion: String = ""

  public var bundleShortVersion: String = ""

  public var deviceType: String = ""

  public var deviceName: String = ""

  public var osName: String = ""

  public var systemVersion: String = ""

  public var languageCode: String = ""

  public var countryCode: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &vendorId)
      case 2: try decoder.decodeSingularStringField(value: &clientSdk)
      case 3: try decoder.decodeSingularStringField(value: &bundleIdentifier)
      case 4: try decoder.decodeSingularStringField(value: &bundleVersion)
      case 5: try decoder.decodeSingularStringField(value: &bundleShortVersion)
      case 6: try decoder.decodeSingularStringField(value: &deviceType)
      case 7: try decoder.decodeSingularStringField(value: &deviceName)
      case 8: try decoder.decodeSingularStringField(value: &osName)
      case 9: try decoder.decodeSingularStringField(value: &systemVersion)
      case 10: try decoder.decodeSingularStringField(value: &languageCode)
      case 11: try decoder.decodeSingularStringField(value: &countryCode)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !vendorId.isEmpty {
      try visitor.visitSingularStringField(value: vendorId, fieldNumber: 1)
    }
    if !clientSdk.isEmpty {
      try visitor.visitSingularStringField(value: clientSdk, fieldNumber: 2)
    }
    if !bundleIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: bundleIdentifier, fieldNumber: 3)
    }
    if !bundleVersion.isEmpty {
      try visitor.visitSingularStringField(value: bundleVersion, fieldNumber: 4)
    }
    if !bundleShortVersion.isEmpty {
      try visitor.visitSingularStringField(value: bundleShortVersion, fieldNumber: 5)
    }
    if !deviceType.isEmpty {
      try visitor.visitSingularStringField(value: deviceType, fieldNumber: 6)
    }
    if !deviceName.isEmpty {
      try visitor.visitSingularStringField(value: deviceName, fieldNumber: 7)
    }
    if !osName.isEmpty {
      try visitor.visitSingularStringField(value: osName, fieldNumber: 8)
    }
    if !systemVersion.isEmpty {
      try visitor.visitSingularStringField(value: systemVersion, fieldNumber: 9)
    }
    if !languageCode.isEmpty {
      try visitor.visitSingularStringField(value: languageCode, fieldNumber: 10)
    }
    if !countryCode.isEmpty {
      try visitor.visitSingularStringField(value: countryCode, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_DeviceInfo) -> Bool {
    if vendorId != other.vendorId {return false}
    if clientSdk != other.clientSdk {return false}
    if bundleIdentifier != other.bundleIdentifier {return false}
    if bundleVersion != other.bundleVersion {return false}
    if bundleShortVersion != other.bundleShortVersion {return false}
    if deviceType != other.deviceType {return false}
    if deviceName != other.deviceName {return false}
    if osName != other.osName {return false}
    if systemVersion != other.systemVersion {return false}
    if languageCode != other.languageCode {return false}
    if countryCode != other.countryCode {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GameInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "version"),
    3: .same(proto: "language"),
  ]

  public var id: String = ""

  public var version: String = ""

  public var language: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &id)
      case 2: try decoder.decodeSingularStringField(value: &version)
      case 3: try decoder.decodeSingularStringField(value: &language)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !id.isEmpty {
      try visitor.visitSingularStringField(value: id, fieldNumber: 1)
    }
    if !version.isEmpty {
      try visitor.visitSingularStringField(value: version, fieldNumber: 2)
    }
    if !language.isEmpty {
      try visitor.visitSingularStringField(value: language, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GameInfo) -> Bool {
    if id != other.id {return false}
    if version != other.version {return false}
    if language != other.language {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///   Points are represented as latitude-longitude pairs in the E7 representation
///   (degrees multiplied by 10**7 and rounded to the nearest integer).
///   Latitudes should be in the range +/- 90 degrees and longitude should be in
///   the range +/- 180 degrees (inclusive).
public struct Apipb_Point: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Point"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "latitude"),
    2: .same(proto: "longitude"),
  ]

  public var latitude: Int32 = 0

  public var longitude: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &latitude)
      case 2: try decoder.decodeSingularInt32Field(value: &longitude)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if latitude != 0 {
      try visitor.visitSingularInt32Field(value: latitude, fieldNumber: 1)
    }
    if longitude != 0 {
      try visitor.visitSingularInt32Field(value: longitude, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_Point) -> Bool {
    if latitude != other.latitude {return false}
    if longitude != other.longitude {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_Vector3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Vector3"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
  ]

  public var x: Float = 0

  public var y: Float = 0

  public var z: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &x)
      case 2: try decoder.decodeSingularFloatField(value: &y)
      case 3: try decoder.decodeSingularFloatField(value: &z)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if x != 0 {
      try visitor.visitSingularFloatField(value: x, fieldNumber: 1)
    }
    if y != 0 {
      try visitor.visitSingularFloatField(value: y, fieldNumber: 2)
    }
    if z != 0 {
      try visitor.visitSingularFloatField(value: z, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_Vector3) -> Bool {
    if x != other.x {return false}
    if y != other.y {return false}
    if z != other.z {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_MotionData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MotionData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gravity"),
    2: .standard(proto: "user_acceleration"),
    3: .standard(proto: "rotation_rate"),
    4: .same(proto: "attitude"),
  ]

  private class _StorageClass {
    var _gravity: Apipb_Vector3? = nil
    var _userAcceleration: Apipb_Vector3? = nil
    var _rotationRate: Apipb_Vector3? = nil
    var _attitude: Apipb_Vector3? = nil

    init() {}

    init(copying source: _StorageClass) {
      _gravity = source._gravity
      _userAcceleration = source._userAcceleration
      _rotationRate = source._rotationRate
      _attitude = source._attitude
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var gravity: Apipb_Vector3 {
    get {return _storage._gravity ?? Apipb_Vector3()}
    set {_uniqueStorage()._gravity = newValue}
  }
  public var hasGravity: Bool {
    return _storage._gravity != nil
  }
  public mutating func clearGravity() {
    return _storage._gravity = nil
  }

  public var userAcceleration: Apipb_Vector3 {
    get {return _storage._userAcceleration ?? Apipb_Vector3()}
    set {_uniqueStorage()._userAcceleration = newValue}
  }
  public var hasUserAcceleration: Bool {
    return _storage._userAcceleration != nil
  }
  public mutating func clearUserAcceleration() {
    return _storage._userAcceleration = nil
  }

  public var rotationRate: Apipb_Vector3 {
    get {return _storage._rotationRate ?? Apipb_Vector3()}
    set {_uniqueStorage()._rotationRate = newValue}
  }
  public var hasRotationRate: Bool {
    return _storage._rotationRate != nil
  }
  public mutating func clearRotationRate() {
    return _storage._rotationRate = nil
  }

  public var attitude: Apipb_Vector3 {
    get {return _storage._attitude ?? Apipb_Vector3()}
    set {_uniqueStorage()._attitude = newValue}
  }
  public var hasAttitude: Bool {
    return _storage._attitude != nil
  }
  public mutating func clearAttitude() {
    return _storage._attitude = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._gravity)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._userAcceleration)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._rotationRate)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._attitude)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._gravity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._userAcceleration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._rotationRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._attitude {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_MotionData) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._gravity != other_storage._gravity {return false}
        if _storage._userAcceleration != other_storage._userAcceleration {return false}
        if _storage._rotationRate != other_storage._rotationRate {return false}
        if _storage._attitude != other_storage._attitude {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_GestureData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GestureData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "velocity"),
    2: .same(proto: "width"),
    3: .same(proto: "height"),
    4: .same(proto: "duration"),
  ]

  public var velocity: Float = 0

  public var width: Float = 0

  public var height: Float = 0

  public var duration: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &velocity)
      case 2: try decoder.decodeSingularFloatField(value: &width)
      case 3: try decoder.decodeSingularFloatField(value: &height)
      case 4: try decoder.decodeSingularFloatField(value: &duration)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if velocity != 0 {
      try visitor.visitSingularFloatField(value: velocity, fieldNumber: 1)
    }
    if width != 0 {
      try visitor.visitSingularFloatField(value: width, fieldNumber: 2)
    }
    if height != 0 {
      try visitor.visitSingularFloatField(value: height, fieldNumber: 3)
    }
    if duration != 0 {
      try visitor.visitSingularFloatField(value: duration, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_GestureData) -> Bool {
    if velocity != other.velocity {return false}
    if width != other.width {return false}
    if height != other.height {return false}
    if duration != other.duration {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Event"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "child_id"),
    3: .same(proto: "event"),
    4: .same(proto: "timestamp"),
    5: .same(proto: "game"),
    6: .same(proto: "device"),
    7: .standard(proto: "app_id"),
    8: .same(proto: "loc"),
    9: .standard(proto: "event_id"),
    10: .standard(proto: "is_resend"),
    11: .same(proto: "payload"),
    12: .same(proto: "age"),
    13: .same(proto: "gender"),
    14: .standard(proto: "motion_data"),
    15: .standard(proto: "gesture_data"),
  ]

  private class _StorageClass {
    var _userId: String = ""
    var _childId: String = ""
    var _event: String = ""
    var _timestamp: Int64 = 0
    var _game: Apipb_GameInfo? = nil
    var _device: Apipb_DeviceInfo? = nil
    var _appId: String = ""
    var _loc: Apipb_Point? = nil
    var _eventId: String = ""
    var _isResend: Bool = false
    var _payload: Data = Data()
    var _age: Int32 = 0
    var _gender: Apipb_Gender = Apipb_Gender.unknown
    var _motionData: Apipb_MotionData? = nil
    var _gestureData: Apipb_GestureData? = nil

    init() {}

    init(copying source: _StorageClass) {
      _userId = source._userId
      _childId = source._childId
      _event = source._event
      _timestamp = source._timestamp
      _game = source._game
      _device = source._device
      _appId = source._appId
      _loc = source._loc
      _eventId = source._eventId
      _isResend = source._isResend
      _payload = source._payload
      _age = source._age
      _gender = source._gender
      _motionData = source._motionData
      _gestureData = source._gestureData
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  ///  UserId is profile id or child id 
  public var userId: String {
    get {return _storage._userId}
    set {_uniqueStorage()._userId = newValue}
  }

  ///  Child is secondary id  
  public var childId: String {
    get {return _storage._childId}
    set {_uniqueStorage()._childId = newValue}
  }

  ///  Event the event name
  public var event: String {
    get {return _storage._event}
    set {_uniqueStorage()._event = newValue}
  }

  ///  Timestamp is seconds unix time
  public var timestamp: Int64 {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  ///  Game is the game information
  public var game: Apipb_GameInfo {
    get {return _storage._game ?? Apipb_GameInfo()}
    set {_uniqueStorage()._game = newValue}
  }
  public var hasGame: Bool {
    return _storage._game != nil
  }
  public mutating func clearGame() {
    return _storage._game = nil
  }

  ///  Device is device information,
  public var device: Apipb_DeviceInfo {
    get {return _storage._device ?? Apipb_DeviceInfo()}
    set {_uniqueStorage()._device = newValue}
  }
  public var hasDevice: Bool {
    return _storage._device != nil
  }
  public mutating func clearDevice() {
    return _storage._device = nil
  }

  ///  AppId is the client app id
  public var appId: String {
    get {return _storage._appId}
    set {_uniqueStorage()._appId = newValue}
  }

  ///  Loc is the location of user
  public var loc: Apipb_Point {
    get {return _storage._loc ?? Apipb_Point()}
    set {_uniqueStorage()._loc = newValue}
  }
  public var hasLoc: Bool {
    return _storage._loc != nil
  }
  public mutating func clearLoc() {
    return _storage._loc = nil
  }

  ///  EventId is Client side event id in order to track whether event is delivered successfully
  public var eventId: String {
    get {return _storage._eventId}
    set {_uniqueStorage()._eventId = newValue}
  }

  ///  IsResend is true if client is trying to send a failed event
  public var isResend: Bool {
    get {return _storage._isResend}
    set {_uniqueStorage()._isResend = newValue}
  }

  ///  Payload is a json data
  public var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  ///  Age is child's age in month
  public var age: Int32 {
    get {return _storage._age}
    set {_uniqueStorage()._age = newValue}
  }

  ///  Child gender
  public var gender: Apipb_Gender {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  ///  MotionData keeps motion data of device
  public var motionData: Apipb_MotionData {
    get {return _storage._motionData ?? Apipb_MotionData()}
    set {_uniqueStorage()._motionData = newValue}
  }
  public var hasMotionData: Bool {
    return _storage._motionData != nil
  }
  public mutating func clearMotionData() {
    return _storage._motionData = nil
  }

  public var gestureData: Apipb_GestureData {
    get {return _storage._gestureData ?? Apipb_GestureData()}
    set {_uniqueStorage()._gestureData = newValue}
  }
  public var hasGestureData: Bool {
    return _storage._gestureData != nil
  }
  public mutating func clearGestureData() {
    return _storage._gestureData = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._userId)
        case 2: try decoder.decodeSingularStringField(value: &_storage._childId)
        case 3: try decoder.decodeSingularStringField(value: &_storage._event)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._timestamp)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._device)
        case 7: try decoder.decodeSingularStringField(value: &_storage._appId)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._loc)
        case 9: try decoder.decodeSingularStringField(value: &_storage._eventId)
        case 10: try decoder.decodeSingularBoolField(value: &_storage._isResend)
        case 11: try decoder.decodeSingularBytesField(value: &_storage._payload)
        case 12: try decoder.decodeSingularInt32Field(value: &_storage._age)
        case 13: try decoder.decodeSingularEnumField(value: &_storage._gender)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._motionData)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._gestureData)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._userId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userId, fieldNumber: 1)
      }
      if !_storage._childId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._childId, fieldNumber: 2)
      }
      if !_storage._event.isEmpty {
        try visitor.visitSingularStringField(value: _storage._event, fieldNumber: 3)
      }
      if _storage._timestamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._timestamp, fieldNumber: 4)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._device {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._appId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appId, fieldNumber: 7)
      }
      if let v = _storage._loc {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._eventId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eventId, fieldNumber: 9)
      }
      if _storage._isResend != false {
        try visitor.visitSingularBoolField(value: _storage._isResend, fieldNumber: 10)
      }
      if !_storage._payload.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._payload, fieldNumber: 11)
      }
      if _storage._age != 0 {
        try visitor.visitSingularInt32Field(value: _storage._age, fieldNumber: 12)
      }
      if _storage._gender != Apipb_Gender.unknown {
        try visitor.visitSingularEnumField(value: _storage._gender, fieldNumber: 13)
      }
      if let v = _storage._motionData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._gestureData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_Event) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._userId != other_storage._userId {return false}
        if _storage._childId != other_storage._childId {return false}
        if _storage._event != other_storage._event {return false}
        if _storage._timestamp != other_storage._timestamp {return false}
        if _storage._game != other_storage._game {return false}
        if _storage._device != other_storage._device {return false}
        if _storage._appId != other_storage._appId {return false}
        if _storage._loc != other_storage._loc {return false}
        if _storage._eventId != other_storage._eventId {return false}
        if _storage._isResend != other_storage._isResend {return false}
        if _storage._payload != other_storage._payload {return false}
        if _storage._age != other_storage._age {return false}
        if _storage._gender != other_storage._gender {return false}
        if _storage._motionData != other_storage._motionData {return false}
        if _storage._gestureData != other_storage._gestureData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_AppEventData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AppEventData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "event"),
    2: .standard(proto: "app_id"),
    3: .same(proto: "device"),
    4: .same(proto: "timestamp"),
    5: .same(proto: "payload"),
    6: .same(proto: "loc"),
    7: .standard(proto: "event_id"),
    8: .standard(proto: "is_resend"),
    9: .standard(proto: "user_id"),
  ]

  private class _StorageClass {
    var _event: String = ""
    var _appId: String = ""
    var _device: Apipb_DeviceInfo? = nil
    var _timestamp: Int64 = 0
    var _payload: Data = Data()
    var _loc: Apipb_Point? = nil
    var _eventId: String = ""
    var _isResend: Bool = false
    var _userId: String = ""

    init() {}

    init(copying source: _StorageClass) {
      _event = source._event
      _appId = source._appId
      _device = source._device
      _timestamp = source._timestamp
      _payload = source._payload
      _loc = source._loc
      _eventId = source._eventId
      _isResend = source._isResend
      _userId = source._userId
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var event: String {
    get {return _storage._event}
    set {_uniqueStorage()._event = newValue}
  }

  public var appId: String {
    get {return _storage._appId}
    set {_uniqueStorage()._appId = newValue}
  }

  public var device: Apipb_DeviceInfo {
    get {return _storage._device ?? Apipb_DeviceInfo()}
    set {_uniqueStorage()._device = newValue}
  }
  public var hasDevice: Bool {
    return _storage._device != nil
  }
  public mutating func clearDevice() {
    return _storage._device = nil
  }

  public var timestamp: Int64 {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  public var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  public var loc: Apipb_Point {
    get {return _storage._loc ?? Apipb_Point()}
    set {_uniqueStorage()._loc = newValue}
  }
  public var hasLoc: Bool {
    return _storage._loc != nil
  }
  public mutating func clearLoc() {
    return _storage._loc = nil
  }

  ///  EventId is Client side event id in order to track whether event is delivered successfully
  public var eventId: String {
    get {return _storage._eventId}
    set {_uniqueStorage()._eventId = newValue}
  }

  ///  IsResend is true if client is trying to send a failed event
  public var isResend: Bool {
    get {return _storage._isResend}
    set {_uniqueStorage()._isResend = newValue}
  }

  ///  UserId is profile id or child id 
  public var userId: String {
    get {return _storage._userId}
    set {_uniqueStorage()._userId = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._event)
        case 2: try decoder.decodeSingularStringField(value: &_storage._appId)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._device)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._timestamp)
        case 5: try decoder.decodeSingularBytesField(value: &_storage._payload)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._loc)
        case 7: try decoder.decodeSingularStringField(value: &_storage._eventId)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._isResend)
        case 9: try decoder.decodeSingularStringField(value: &_storage._userId)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._event.isEmpty {
        try visitor.visitSingularStringField(value: _storage._event, fieldNumber: 1)
      }
      if !_storage._appId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appId, fieldNumber: 2)
      }
      if let v = _storage._device {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._timestamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._timestamp, fieldNumber: 4)
      }
      if !_storage._payload.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._payload, fieldNumber: 5)
      }
      if let v = _storage._loc {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._eventId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eventId, fieldNumber: 7)
      }
      if _storage._isResend != false {
        try visitor.visitSingularBoolField(value: _storage._isResend, fieldNumber: 8)
      }
      if !_storage._userId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userId, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_AppEventData) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._event != other_storage._event {return false}
        if _storage._appId != other_storage._appId {return false}
        if _storage._device != other_storage._device {return false}
        if _storage._timestamp != other_storage._timestamp {return false}
        if _storage._payload != other_storage._payload {return false}
        if _storage._loc != other_storage._loc {return false}
        if _storage._eventId != other_storage._eventId {return false}
        if _storage._isResend != other_storage._isResend {return false}
        if _storage._userId != other_storage._userId {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_BatchEventData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchEventData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "event"),
    2: .standard(proto: "event_id"),
    3: .same(proto: "timestamp"),
    4: .same(proto: "game"),
    5: .same(proto: "loc"),
    6: .standard(proto: "is_resend"),
    7: .same(proto: "payload"),
    8: .standard(proto: "motion_data"),
    9: .standard(proto: "gesture_data"),
  ]

  private class _StorageClass {
    var _event: String = ""
    var _eventId: String = ""
    var _timestamp: Int64 = 0
    var _game: Apipb_GameInfo? = nil
    var _loc: Apipb_Point? = nil
    var _isResend: Bool = false
    var _payload: Data = Data()
    var _motionData: Apipb_MotionData? = nil
    var _gestureData: Apipb_GestureData? = nil

    init() {}

    init(copying source: _StorageClass) {
      _event = source._event
      _eventId = source._eventId
      _timestamp = source._timestamp
      _game = source._game
      _loc = source._loc
      _isResend = source._isResend
      _payload = source._payload
      _motionData = source._motionData
      _gestureData = source._gestureData
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  ///  Event the event name
  public var event: String {
    get {return _storage._event}
    set {_uniqueStorage()._event = newValue}
  }

  ///  EventId is Client side event id in order to track whether event is delivered successfully
  public var eventId: String {
    get {return _storage._eventId}
    set {_uniqueStorage()._eventId = newValue}
  }

  ///  Timestamp is seconds unix time
  public var timestamp: Int64 {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  ///  Game is the game information
  public var game: Apipb_GameInfo {
    get {return _storage._game ?? Apipb_GameInfo()}
    set {_uniqueStorage()._game = newValue}
  }
  public var hasGame: Bool {
    return _storage._game != nil
  }
  public mutating func clearGame() {
    return _storage._game = nil
  }

  ///  Loc is the location of user
  public var loc: Apipb_Point {
    get {return _storage._loc ?? Apipb_Point()}
    set {_uniqueStorage()._loc = newValue}
  }
  public var hasLoc: Bool {
    return _storage._loc != nil
  }
  public mutating func clearLoc() {
    return _storage._loc = nil
  }

  ///  IsResend is true if client is trying to send a failed event
  public var isResend: Bool {
    get {return _storage._isResend}
    set {_uniqueStorage()._isResend = newValue}
  }

  ///  Payload is a json data
  public var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  ///  MotionData keeps motion data of device
  public var motionData: Apipb_MotionData {
    get {return _storage._motionData ?? Apipb_MotionData()}
    set {_uniqueStorage()._motionData = newValue}
  }
  public var hasMotionData: Bool {
    return _storage._motionData != nil
  }
  public mutating func clearMotionData() {
    return _storage._motionData = nil
  }

  public var gestureData: Apipb_GestureData {
    get {return _storage._gestureData ?? Apipb_GestureData()}
    set {_uniqueStorage()._gestureData = newValue}
  }
  public var hasGestureData: Bool {
    return _storage._gestureData != nil
  }
  public mutating func clearGestureData() {
    return _storage._gestureData = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._event)
        case 2: try decoder.decodeSingularStringField(value: &_storage._eventId)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._timestamp)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._loc)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._isResend)
        case 7: try decoder.decodeSingularBytesField(value: &_storage._payload)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._motionData)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._gestureData)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._event.isEmpty {
        try visitor.visitSingularStringField(value: _storage._event, fieldNumber: 1)
      }
      if !_storage._eventId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eventId, fieldNumber: 2)
      }
      if _storage._timestamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._timestamp, fieldNumber: 3)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._loc {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._isResend != false {
        try visitor.visitSingularBoolField(value: _storage._isResend, fieldNumber: 6)
      }
      if !_storage._payload.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._payload, fieldNumber: 7)
      }
      if let v = _storage._motionData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._gestureData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_BatchEventData) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._event != other_storage._event {return false}
        if _storage._eventId != other_storage._eventId {return false}
        if _storage._timestamp != other_storage._timestamp {return false}
        if _storage._game != other_storage._game {return false}
        if _storage._loc != other_storage._loc {return false}
        if _storage._isResend != other_storage._isResend {return false}
        if _storage._payload != other_storage._payload {return false}
        if _storage._motionData != other_storage._motionData {return false}
        if _storage._gestureData != other_storage._gestureData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_BatchEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatchEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "child_id"),
    3: .standard(proto: "app_id"),
    4: .same(proto: "device"),
    6: .same(proto: "age"),
    7: .same(proto: "gender"),
    5: .same(proto: "data"),
  ]

  private class _StorageClass {
    var _userId: String = ""
    var _childId: String = ""
    var _appId: String = ""
    var _device: Apipb_DeviceInfo? = nil
    var _age: Int32 = 0
    var _gender: Apipb_Gender = Apipb_Gender.unknown
    var _data: [Apipb_BatchEventData] = []

    init() {}

    init(copying source: _StorageClass) {
      _userId = source._userId
      _childId = source._childId
      _appId = source._appId
      _device = source._device
      _age = source._age
      _gender = source._gender
      _data = source._data
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  ///  UserId is profile id or child id 
  public var userId: String {
    get {return _storage._userId}
    set {_uniqueStorage()._userId = newValue}
  }

  ///  Child is secondary id  
  public var childId: String {
    get {return _storage._childId}
    set {_uniqueStorage()._childId = newValue}
  }

  ///  AppId is the client app id
  public var appId: String {
    get {return _storage._appId}
    set {_uniqueStorage()._appId = newValue}
  }

  ///  Device is device information,
  public var device: Apipb_DeviceInfo {
    get {return _storage._device ?? Apipb_DeviceInfo()}
    set {_uniqueStorage()._device = newValue}
  }
  public var hasDevice: Bool {
    return _storage._device != nil
  }
  public mutating func clearDevice() {
    return _storage._device = nil
  }

  ///  Age is child's age in month    
  public var age: Int32 {
    get {return _storage._age}
    set {_uniqueStorage()._age = newValue}
  }

  ///  Child Gender
  public var gender: Apipb_Gender {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  ///  Data is 
  public var data: [Apipb_BatchEventData] {
    get {return _storage._data}
    set {_uniqueStorage()._data = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._userId)
        case 2: try decoder.decodeSingularStringField(value: &_storage._childId)
        case 3: try decoder.decodeSingularStringField(value: &_storage._appId)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._device)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._age)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._gender)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._userId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userId, fieldNumber: 1)
      }
      if !_storage._childId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._childId, fieldNumber: 2)
      }
      if !_storage._appId.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appId, fieldNumber: 3)
      }
      if let v = _storage._device {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._data.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._data, fieldNumber: 5)
      }
      if _storage._age != 0 {
        try visitor.visitSingularInt32Field(value: _storage._age, fieldNumber: 6)
      }
      if _storage._gender != Apipb_Gender.unknown {
        try visitor.visitSingularEnumField(value: _storage._gender, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_BatchEvent) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._userId != other_storage._userId {return false}
        if _storage._childId != other_storage._childId {return false}
        if _storage._appId != other_storage._appId {return false}
        if _storage._device != other_storage._device {return false}
        if _storage._age != other_storage._age {return false}
        if _storage._gender != other_storage._gender {return false}
        if _storage._data != other_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Apipb_EventResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_id"),
    2: .same(proto: "success"),
  ]

  public var eventId: String = ""

  public var success: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &eventId)
      case 2: try decoder.decodeSingularBoolField(value: &success)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !eventId.isEmpty {
      try visitor.visitSingularStringField(value: eventId, fieldNumber: 1)
    }
    if success != false {
      try visitor.visitSingularBoolField(value: success, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Apipb_EventResponse) -> Bool {
    if eventId != other.eventId {return false}
    if success != other.success {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
