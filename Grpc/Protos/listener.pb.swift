/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: listener.proto
 *
 */

import Foundation
import SwiftProtobuf


public struct Apipb_DeviceInfo: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_DeviceInfo"}
  public var protoMessageName: String {return "DeviceInfo"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "vendorId", swift: "vendorId"),
    2: .same(proto: "clientSdk", swift: "clientSdk"),
    3: .same(proto: "bundleIdentifier", swift: "bundleIdentifier"),
    4: .same(proto: "bundleVersion", swift: "bundleVersion"),
    5: .same(proto: "bundleShortVersion", swift: "bundleShortVersion"),
    6: .same(proto: "deviceType", swift: "deviceType"),
    7: .same(proto: "deviceName", swift: "deviceName"),
    8: .same(proto: "osName", swift: "osName"),
    9: .same(proto: "systemVersion", swift: "systemVersion"),
    10: .same(proto: "languageCode", swift: "languageCode"),
    11: .same(proto: "countryCode", swift: "countryCode"),
  ]


  public var vendorId: String = ""

  public var clientSdk: String = ""

  public var bundleIdentifier: String = ""

  public var bundleVersion: String = ""

  public var bundleShortVersion: String = ""

  public var deviceType: String = ""

  public var deviceName: String = ""

  public var osName: String = ""

  public var systemVersion: String = ""

  public var languageCode: String = ""

  public var countryCode: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &vendorId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &clientSdk)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &bundleIdentifier)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &bundleVersion)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &bundleShortVersion)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &deviceType)
    case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &deviceName)
    case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &osName)
    case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &systemVersion)
    case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &languageCode)
    case 11: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &countryCode)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if vendorId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: vendorId, fieldNumber: 1)
    }
    if clientSdk != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: clientSdk, fieldNumber: 2)
    }
    if bundleIdentifier != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: bundleIdentifier, fieldNumber: 3)
    }
    if bundleVersion != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: bundleVersion, fieldNumber: 4)
    }
    if bundleShortVersion != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: bundleShortVersion, fieldNumber: 5)
    }
    if deviceType != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: deviceType, fieldNumber: 6)
    }
    if deviceName != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: deviceName, fieldNumber: 7)
    }
    if osName != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: osName, fieldNumber: 8)
    }
    if systemVersion != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: systemVersion, fieldNumber: 9)
    }
    if languageCode != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: languageCode, fieldNumber: 10)
    }
    if countryCode != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: countryCode, fieldNumber: 11)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_DeviceInfo) -> Bool {
    if vendorId != other.vendorId {return false}
    if clientSdk != other.clientSdk {return false}
    if bundleIdentifier != other.bundleIdentifier {return false}
    if bundleVersion != other.bundleVersion {return false}
    if bundleShortVersion != other.bundleShortVersion {return false}
    if deviceType != other.deviceType {return false}
    if deviceName != other.deviceName {return false}
    if osName != other.osName {return false}
    if systemVersion != other.systemVersion {return false}
    if languageCode != other.languageCode {return false}
    if countryCode != other.countryCode {return false}
    return true
  }
}

public struct Apipb_GameInfo: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GameInfo"}
  public var protoMessageName: String {return "GameInfo"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "version", swift: "version"),
    3: .same(proto: "language", swift: "language"),
  ]


  public var id: String = ""

  public var version: String = ""

  public var language: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &id)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &version)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &language)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: id, fieldNumber: 1)
    }
    if version != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: version, fieldNumber: 2)
    }
    if language != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: language, fieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GameInfo) -> Bool {
    if id != other.id {return false}
    if version != other.version {return false}
    if language != other.language {return false}
    return true
  }
}

///   Points are represented as latitude-longitude pairs in the E7 representation
///   (degrees multiplied by 10**7 and rounded to the nearest integer).
///   Latitudes should be in the range +/- 90 degrees and longitude should be in
///   the range +/- 180 degrees (inclusive).
public struct Apipb_Point: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_Point"}
  public var protoMessageName: String {return "Point"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "latitude", swift: "latitude"),
    2: .same(proto: "longitude", swift: "longitude"),
  ]


  public var latitude: Int32 = 0

  public var longitude: Int32 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &latitude)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &longitude)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if latitude != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: latitude, fieldNumber: 1)
    }
    if longitude != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: longitude, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_Point) -> Bool {
    if latitude != other.latitude {return false}
    if longitude != other.longitude {return false}
    return true
  }
}

public struct Apipb_Vector3: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_Vector3"}
  public var protoMessageName: String {return "Vector3"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "x", swift: "x"),
    2: .same(proto: "y", swift: "y"),
    3: .same(proto: "z", swift: "z"),
  ]


  public var x: Float = 0

  public var y: Float = 0

  public var z: Float = 0

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &x)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &y)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &z)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if x != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: x, fieldNumber: 1)
    }
    if y != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: y, fieldNumber: 2)
    }
    if z != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: z, fieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_Vector3) -> Bool {
    if x != other.x {return false}
    if y != other.y {return false}
    if z != other.z {return false}
    return true
  }
}

public struct Apipb_MotionData: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_MotionData"}
  public var protoMessageName: String {return "MotionData"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "gravity", swift: "gravity"),
    2: .unique(proto: "user_acceleration", json: "userAcceleration", swift: "userAcceleration"),
    3: .unique(proto: "rotation_rate", json: "rotationRate", swift: "rotationRate"),
    4: .same(proto: "attitude", swift: "attitude"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_MotionData
    var _gravity: Apipb_Vector3? = nil
    var _userAcceleration: Apipb_Vector3? = nil
    var _rotationRate: Apipb_Vector3? = nil
    var _attitude: Apipb_Vector3? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Apipb_Vector3.self, value: &_gravity)
      case 2: try setter.decodeSingularMessageField(fieldType: Apipb_Vector3.self, value: &_userAcceleration)
      case 3: try setter.decodeSingularMessageField(fieldType: Apipb_Vector3.self, value: &_rotationRate)
      case 4: try setter.decodeSingularMessageField(fieldType: Apipb_Vector3.self, value: &_attitude)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _gravity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _userAcceleration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _rotationRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _attitude {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _gravity != other._gravity {return false}
      if _userAcceleration != other._userAcceleration {return false}
      if _rotationRate != other._rotationRate {return false}
      if _attitude != other._attitude {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._gravity = _gravity
      clone._userAcceleration = _userAcceleration
      clone._rotationRate = _rotationRate
      clone._attitude = _attitude
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var gravity: Apipb_Vector3 {
    get {return _storage._gravity ?? Apipb_Vector3()}
    set {_uniqueStorage()._gravity = newValue}
  }
  public var hasGravity: Bool {
    return _storage._gravity != nil
  }
  public mutating func clearGravity() {
    return _storage._gravity = nil
  }

  public var userAcceleration: Apipb_Vector3 {
    get {return _storage._userAcceleration ?? Apipb_Vector3()}
    set {_uniqueStorage()._userAcceleration = newValue}
  }
  public var hasUserAcceleration: Bool {
    return _storage._userAcceleration != nil
  }
  public mutating func clearUserAcceleration() {
    return _storage._userAcceleration = nil
  }

  public var rotationRate: Apipb_Vector3 {
    get {return _storage._rotationRate ?? Apipb_Vector3()}
    set {_uniqueStorage()._rotationRate = newValue}
  }
  public var hasRotationRate: Bool {
    return _storage._rotationRate != nil
  }
  public mutating func clearRotationRate() {
    return _storage._rotationRate = nil
  }

  public var attitude: Apipb_Vector3 {
    get {return _storage._attitude ?? Apipb_Vector3()}
    set {_uniqueStorage()._attitude = newValue}
  }
  public var hasAttitude: Bool {
    return _storage._attitude != nil
  }
  public mutating func clearAttitude() {
    return _storage._attitude = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_MotionData) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_GestureData: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_GestureData"}
  public var protoMessageName: String {return "GestureData"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "velocity", swift: "velocity"),
    2: .same(proto: "width", swift: "width"),
    3: .same(proto: "height", swift: "height"),
    4: .same(proto: "duration", swift: "duration"),
  ]


  public var velocity: Float = 0

  public var width: Float = 0

  public var height: Float = 0

  public var duration: Float = 0

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &velocity)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &width)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &height)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &duration)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if velocity != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: velocity, fieldNumber: 1)
    }
    if width != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: width, fieldNumber: 2)
    }
    if height != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: height, fieldNumber: 3)
    }
    if duration != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: duration, fieldNumber: 4)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_GestureData) -> Bool {
    if velocity != other.velocity {return false}
    if width != other.width {return false}
    if height != other.height {return false}
    if duration != other.duration {return false}
    return true
  }
}

public struct Apipb_Event: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_Event"}
  public var protoMessageName: String {return "Event"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "child_id", json: "childId", swift: "childId"),
    3: .same(proto: "event", swift: "event"),
    4: .same(proto: "timestamp", swift: "timestamp"),
    5: .same(proto: "game", swift: "game"),
    6: .same(proto: "device", swift: "device"),
    7: .unique(proto: "app_id", json: "appId", swift: "appId"),
    8: .same(proto: "loc", swift: "loc"),
    9: .unique(proto: "event_id", json: "eventId", swift: "eventId"),
    10: .unique(proto: "is_resend", json: "isResend", swift: "isResend"),
    11: .same(proto: "payload", swift: "payload"),
    12: .same(proto: "age", swift: "age"),
    13: .same(proto: "gender", swift: "gender"),
    14: .unique(proto: "motion_data", json: "motionData", swift: "motionData"),
    15: .unique(proto: "gesture_data", json: "gestureData", swift: "gestureData"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_Event
    var _userId: String = ""
    var _childId: String = ""
    var _event: String = ""
    var _timestamp: Int64 = 0
    var _game: Apipb_GameInfo? = nil
    var _device: Apipb_DeviceInfo? = nil
    var _appId: String = ""
    var _loc: Apipb_Point? = nil
    var _eventId: String = ""
    var _isResend: Bool = false
    var _payload: Data = Data()
    var _age: Int32 = 0
    var _gender: Apipb_Gender = Apipb_Gender.unknown
    var _motionData: Apipb_MotionData? = nil
    var _gestureData: Apipb_GestureData? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_userId)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_childId)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_event)
      case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_timestamp)
      case 5: try setter.decodeSingularMessageField(fieldType: Apipb_GameInfo.self, value: &_game)
      case 6: try setter.decodeSingularMessageField(fieldType: Apipb_DeviceInfo.self, value: &_device)
      case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_appId)
      case 8: try setter.decodeSingularMessageField(fieldType: Apipb_Point.self, value: &_loc)
      case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_eventId)
      case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_isResend)
      case 11: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_payload)
      case 12: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_age)
      case 13: try setter.decodeSingularField(fieldType: Apipb_Gender.self, value: &_gender)
      case 14: try setter.decodeSingularMessageField(fieldType: Apipb_MotionData.self, value: &_motionData)
      case 15: try setter.decodeSingularMessageField(fieldType: Apipb_GestureData.self, value: &_gestureData)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _userId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _userId, fieldNumber: 1)
      }
      if _childId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _childId, fieldNumber: 2)
      }
      if _event != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _event, fieldNumber: 3)
      }
      if _timestamp != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _timestamp, fieldNumber: 4)
      }
      if let v = _game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _device {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if _appId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _appId, fieldNumber: 7)
      }
      if let v = _loc {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if _eventId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _eventId, fieldNumber: 9)
      }
      if _isResend != false {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: _isResend, fieldNumber: 10)
      }
      if _payload != Data() {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: _payload, fieldNumber: 11)
      }
      if _age != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _age, fieldNumber: 12)
      }
      if _gender != Apipb_Gender.unknown {
        try visitor.visitSingularField(fieldType: Apipb_Gender.self, value: _gender, fieldNumber: 13)
      }
      if let v = _motionData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _gestureData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _userId != other._userId {return false}
      if _childId != other._childId {return false}
      if _event != other._event {return false}
      if _timestamp != other._timestamp {return false}
      if _game != other._game {return false}
      if _device != other._device {return false}
      if _appId != other._appId {return false}
      if _loc != other._loc {return false}
      if _eventId != other._eventId {return false}
      if _isResend != other._isResend {return false}
      if _payload != other._payload {return false}
      if _age != other._age {return false}
      if _gender != other._gender {return false}
      if _motionData != other._motionData {return false}
      if _gestureData != other._gestureData {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._userId = _userId
      clone._childId = _childId
      clone._event = _event
      clone._timestamp = _timestamp
      clone._game = _game
      clone._device = _device
      clone._appId = _appId
      clone._loc = _loc
      clone._eventId = _eventId
      clone._isResend = _isResend
      clone._payload = _payload
      clone._age = _age
      clone._gender = _gender
      clone._motionData = _motionData
      clone._gestureData = _gestureData
      return clone
    }
  }

  private var _storage = _StorageClass()


  ///  UserId is profile id or child id 
  public var userId: String {
    get {return _storage._userId}
    set {_uniqueStorage()._userId = newValue}
  }

  ///  Child is secondary id  
  public var childId: String {
    get {return _storage._childId}
    set {_uniqueStorage()._childId = newValue}
  }

  ///  Event the event name
  public var event: String {
    get {return _storage._event}
    set {_uniqueStorage()._event = newValue}
  }

  ///  Timestamp is seconds unix time
  public var timestamp: Int64 {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  ///  Game is the game information
  public var game: Apipb_GameInfo {
    get {return _storage._game ?? Apipb_GameInfo()}
    set {_uniqueStorage()._game = newValue}
  }
  public var hasGame: Bool {
    return _storage._game != nil
  }
  public mutating func clearGame() {
    return _storage._game = nil
  }

  ///  Device is device information,
  public var device: Apipb_DeviceInfo {
    get {return _storage._device ?? Apipb_DeviceInfo()}
    set {_uniqueStorage()._device = newValue}
  }
  public var hasDevice: Bool {
    return _storage._device != nil
  }
  public mutating func clearDevice() {
    return _storage._device = nil
  }

  ///  AppId is the client app id
  public var appId: String {
    get {return _storage._appId}
    set {_uniqueStorage()._appId = newValue}
  }

  ///  Loc is the location of user
  public var loc: Apipb_Point {
    get {return _storage._loc ?? Apipb_Point()}
    set {_uniqueStorage()._loc = newValue}
  }
  public var hasLoc: Bool {
    return _storage._loc != nil
  }
  public mutating func clearLoc() {
    return _storage._loc = nil
  }

  ///  EventId is Client side event id in order to track whether event is delivered successfully
  public var eventId: String {
    get {return _storage._eventId}
    set {_uniqueStorage()._eventId = newValue}
  }

  ///  IsResend is true if client is trying to send a failed event
  public var isResend: Bool {
    get {return _storage._isResend}
    set {_uniqueStorage()._isResend = newValue}
  }

  ///  Payload is a json data
  public var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  ///  Age is child's age in month
  public var age: Int32 {
    get {return _storage._age}
    set {_uniqueStorage()._age = newValue}
  }

  ///  Child gender
  public var gender: Apipb_Gender {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  ///  MotionData keeps motion data of device
  public var motionData: Apipb_MotionData {
    get {return _storage._motionData ?? Apipb_MotionData()}
    set {_uniqueStorage()._motionData = newValue}
  }
  public var hasMotionData: Bool {
    return _storage._motionData != nil
  }
  public mutating func clearMotionData() {
    return _storage._motionData = nil
  }

  public var gestureData: Apipb_GestureData {
    get {return _storage._gestureData ?? Apipb_GestureData()}
    set {_uniqueStorage()._gestureData = newValue}
  }
  public var hasGestureData: Bool {
    return _storage._gestureData != nil
  }
  public mutating func clearGestureData() {
    return _storage._gestureData = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_Event) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_AppEventData: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_AppEventData"}
  public var protoMessageName: String {return "AppEventData"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "event", swift: "event"),
    2: .unique(proto: "app_id", json: "appId", swift: "appId"),
    3: .same(proto: "device", swift: "device"),
    4: .same(proto: "timestamp", swift: "timestamp"),
    5: .same(proto: "payload", swift: "payload"),
    6: .same(proto: "loc", swift: "loc"),
    7: .unique(proto: "event_id", json: "eventId", swift: "eventId"),
    8: .unique(proto: "is_resend", json: "isResend", swift: "isResend"),
    9: .unique(proto: "user_id", json: "userId", swift: "userId"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_AppEventData
    var _event: String = ""
    var _appId: String = ""
    var _device: Apipb_DeviceInfo? = nil
    var _timestamp: Int64 = 0
    var _payload: Data = Data()
    var _loc: Apipb_Point? = nil
    var _eventId: String = ""
    var _isResend: Bool = false
    var _userId: String = ""

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_event)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_appId)
      case 3: try setter.decodeSingularMessageField(fieldType: Apipb_DeviceInfo.self, value: &_device)
      case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_timestamp)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_payload)
      case 6: try setter.decodeSingularMessageField(fieldType: Apipb_Point.self, value: &_loc)
      case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_eventId)
      case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_isResend)
      case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_userId)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _event != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _event, fieldNumber: 1)
      }
      if _appId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _appId, fieldNumber: 2)
      }
      if let v = _device {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _timestamp != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _timestamp, fieldNumber: 4)
      }
      if _payload != Data() {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: _payload, fieldNumber: 5)
      }
      if let v = _loc {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if _eventId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _eventId, fieldNumber: 7)
      }
      if _isResend != false {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: _isResend, fieldNumber: 8)
      }
      if _userId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _userId, fieldNumber: 9)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _event != other._event {return false}
      if _appId != other._appId {return false}
      if _device != other._device {return false}
      if _timestamp != other._timestamp {return false}
      if _payload != other._payload {return false}
      if _loc != other._loc {return false}
      if _eventId != other._eventId {return false}
      if _isResend != other._isResend {return false}
      if _userId != other._userId {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._event = _event
      clone._appId = _appId
      clone._device = _device
      clone._timestamp = _timestamp
      clone._payload = _payload
      clone._loc = _loc
      clone._eventId = _eventId
      clone._isResend = _isResend
      clone._userId = _userId
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var event: String {
    get {return _storage._event}
    set {_uniqueStorage()._event = newValue}
  }

  public var appId: String {
    get {return _storage._appId}
    set {_uniqueStorage()._appId = newValue}
  }

  public var device: Apipb_DeviceInfo {
    get {return _storage._device ?? Apipb_DeviceInfo()}
    set {_uniqueStorage()._device = newValue}
  }
  public var hasDevice: Bool {
    return _storage._device != nil
  }
  public mutating func clearDevice() {
    return _storage._device = nil
  }

  public var timestamp: Int64 {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  public var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  public var loc: Apipb_Point {
    get {return _storage._loc ?? Apipb_Point()}
    set {_uniqueStorage()._loc = newValue}
  }
  public var hasLoc: Bool {
    return _storage._loc != nil
  }
  public mutating func clearLoc() {
    return _storage._loc = nil
  }

  ///  EventId is Client side event id in order to track whether event is delivered successfully
  public var eventId: String {
    get {return _storage._eventId}
    set {_uniqueStorage()._eventId = newValue}
  }

  ///  IsResend is true if client is trying to send a failed event
  public var isResend: Bool {
    get {return _storage._isResend}
    set {_uniqueStorage()._isResend = newValue}
  }

  ///  UserId is profile id or child id 
  public var userId: String {
    get {return _storage._userId}
    set {_uniqueStorage()._userId = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_AppEventData) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_BatchEventData: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_BatchEventData"}
  public var protoMessageName: String {return "BatchEventData"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "event", swift: "event"),
    2: .unique(proto: "event_id", json: "eventId", swift: "eventId"),
    3: .same(proto: "timestamp", swift: "timestamp"),
    4: .same(proto: "game", swift: "game"),
    5: .same(proto: "loc", swift: "loc"),
    6: .unique(proto: "is_resend", json: "isResend", swift: "isResend"),
    7: .same(proto: "payload", swift: "payload"),
    8: .unique(proto: "motion_data", json: "motionData", swift: "motionData"),
    9: .unique(proto: "gesture_data", json: "gestureData", swift: "gestureData"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_BatchEventData
    var _event: String = ""
    var _eventId: String = ""
    var _timestamp: Int64 = 0
    var _game: Apipb_GameInfo? = nil
    var _loc: Apipb_Point? = nil
    var _isResend: Bool = false
    var _payload: Data = Data()
    var _motionData: Apipb_MotionData? = nil
    var _gestureData: Apipb_GestureData? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_event)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_eventId)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_timestamp)
      case 4: try setter.decodeSingularMessageField(fieldType: Apipb_GameInfo.self, value: &_game)
      case 5: try setter.decodeSingularMessageField(fieldType: Apipb_Point.self, value: &_loc)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_isResend)
      case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_payload)
      case 8: try setter.decodeSingularMessageField(fieldType: Apipb_MotionData.self, value: &_motionData)
      case 9: try setter.decodeSingularMessageField(fieldType: Apipb_GestureData.self, value: &_gestureData)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _event != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _event, fieldNumber: 1)
      }
      if _eventId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _eventId, fieldNumber: 2)
      }
      if _timestamp != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _timestamp, fieldNumber: 3)
      }
      if let v = _game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _loc {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _isResend != false {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: _isResend, fieldNumber: 6)
      }
      if _payload != Data() {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: _payload, fieldNumber: 7)
      }
      if let v = _motionData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _gestureData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _event != other._event {return false}
      if _eventId != other._eventId {return false}
      if _timestamp != other._timestamp {return false}
      if _game != other._game {return false}
      if _loc != other._loc {return false}
      if _isResend != other._isResend {return false}
      if _payload != other._payload {return false}
      if _motionData != other._motionData {return false}
      if _gestureData != other._gestureData {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._event = _event
      clone._eventId = _eventId
      clone._timestamp = _timestamp
      clone._game = _game
      clone._loc = _loc
      clone._isResend = _isResend
      clone._payload = _payload
      clone._motionData = _motionData
      clone._gestureData = _gestureData
      return clone
    }
  }

  private var _storage = _StorageClass()


  ///  Event the event name
  public var event: String {
    get {return _storage._event}
    set {_uniqueStorage()._event = newValue}
  }

  ///  EventId is Client side event id in order to track whether event is delivered successfully
  public var eventId: String {
    get {return _storage._eventId}
    set {_uniqueStorage()._eventId = newValue}
  }

  ///  Timestamp is seconds unix time
  public var timestamp: Int64 {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  ///  Game is the game information
  public var game: Apipb_GameInfo {
    get {return _storage._game ?? Apipb_GameInfo()}
    set {_uniqueStorage()._game = newValue}
  }
  public var hasGame: Bool {
    return _storage._game != nil
  }
  public mutating func clearGame() {
    return _storage._game = nil
  }

  ///  Loc is the location of user
  public var loc: Apipb_Point {
    get {return _storage._loc ?? Apipb_Point()}
    set {_uniqueStorage()._loc = newValue}
  }
  public var hasLoc: Bool {
    return _storage._loc != nil
  }
  public mutating func clearLoc() {
    return _storage._loc = nil
  }

  ///  IsResend is true if client is trying to send a failed event
  public var isResend: Bool {
    get {return _storage._isResend}
    set {_uniqueStorage()._isResend = newValue}
  }

  ///  Payload is a json data
  public var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  ///  MotionData keeps motion data of device
  public var motionData: Apipb_MotionData {
    get {return _storage._motionData ?? Apipb_MotionData()}
    set {_uniqueStorage()._motionData = newValue}
  }
  public var hasMotionData: Bool {
    return _storage._motionData != nil
  }
  public mutating func clearMotionData() {
    return _storage._motionData = nil
  }

  public var gestureData: Apipb_GestureData {
    get {return _storage._gestureData ?? Apipb_GestureData()}
    set {_uniqueStorage()._gestureData = newValue}
  }
  public var hasGestureData: Bool {
    return _storage._gestureData != nil
  }
  public mutating func clearGestureData() {
    return _storage._gestureData = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_BatchEventData) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_BatchEvent: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_BatchEvent"}
  public var protoMessageName: String {return "BatchEvent"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "user_id", json: "userId", swift: "userId"),
    2: .unique(proto: "child_id", json: "childId", swift: "childId"),
    3: .unique(proto: "app_id", json: "appId", swift: "appId"),
    4: .same(proto: "device", swift: "device"),
    6: .same(proto: "age", swift: "age"),
    7: .same(proto: "gender", swift: "gender"),
    5: .same(proto: "data", swift: "data"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Apipb_BatchEvent
    var _userId: String = ""
    var _childId: String = ""
    var _appId: String = ""
    var _device: Apipb_DeviceInfo? = nil
    var _age: Int32 = 0
    var _gender: Apipb_Gender = Apipb_Gender.unknown
    var _data: [Apipb_BatchEventData] = []

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_userId)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_childId)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_appId)
      case 4: try setter.decodeSingularMessageField(fieldType: Apipb_DeviceInfo.self, value: &_device)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_age)
      case 7: try setter.decodeSingularField(fieldType: Apipb_Gender.self, value: &_gender)
      case 5: try setter.decodeRepeatedMessageField(fieldType: Apipb_BatchEventData.self, value: &_data)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _userId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _userId, fieldNumber: 1)
      }
      if _childId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _childId, fieldNumber: 2)
      }
      if _appId != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _appId, fieldNumber: 3)
      }
      if let v = _device {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_data.isEmpty {
        try visitor.visitRepeatedMessageField(value: _data, fieldNumber: 5)
      }
      if _age != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _age, fieldNumber: 6)
      }
      if _gender != Apipb_Gender.unknown {
        try visitor.visitSingularField(fieldType: Apipb_Gender.self, value: _gender, fieldNumber: 7)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _userId != other._userId {return false}
      if _childId != other._childId {return false}
      if _appId != other._appId {return false}
      if _device != other._device {return false}
      if _age != other._age {return false}
      if _gender != other._gender {return false}
      if _data != other._data {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._userId = _userId
      clone._childId = _childId
      clone._appId = _appId
      clone._device = _device
      clone._age = _age
      clone._gender = _gender
      clone._data = _data
      return clone
    }
  }

  private var _storage = _StorageClass()


  ///  UserId is profile id or child id 
  public var userId: String {
    get {return _storage._userId}
    set {_uniqueStorage()._userId = newValue}
  }

  ///  Child is secondary id  
  public var childId: String {
    get {return _storage._childId}
    set {_uniqueStorage()._childId = newValue}
  }

  ///  AppId is the client app id
  public var appId: String {
    get {return _storage._appId}
    set {_uniqueStorage()._appId = newValue}
  }

  ///  Device is device information,
  public var device: Apipb_DeviceInfo {
    get {return _storage._device ?? Apipb_DeviceInfo()}
    set {_uniqueStorage()._device = newValue}
  }
  public var hasDevice: Bool {
    return _storage._device != nil
  }
  public mutating func clearDevice() {
    return _storage._device = nil
  }

  ///  Age is child's age in month    
  public var age: Int32 {
    get {return _storage._age}
    set {_uniqueStorage()._age = newValue}
  }

  ///  Child Gender
  public var gender: Apipb_Gender {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  ///  Data is 
  public var data: [Apipb_BatchEventData] {
    get {return _storage._data}
    set {_uniqueStorage()._data = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Apipb_BatchEvent) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Apipb_EventResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Apipb_EventResponse"}
  public var protoMessageName: String {return "EventResponse"}
  public var protoPackageName: String {return "apipb"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "event_id", json: "eventId", swift: "eventId"),
    2: .same(proto: "success", swift: "success"),
  ]


  public var eventId: String = ""

  public var success: Bool = false

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &eventId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &success)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if eventId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: eventId, fieldNumber: 1)
    }
    if success != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: success, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Apipb_EventResponse) -> Bool {
    if eventId != other.eventId {return false}
    if success != other.success {return false}
    return true
  }
}
