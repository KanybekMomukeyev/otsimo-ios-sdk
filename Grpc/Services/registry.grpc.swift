// Code generated by protoc-gen-grpc-swift
// DO NOT EDIT!
import SwiftProtobuf
import GRPCClient


public class RegistryService: GrpcProtoService {

    public convenience init(host: String) {
        self.init(host: host, packageName: "apipb", serviceName: "RegistryService")
    }

    public func get(_ request: Apipb_GetGameRequest,
                           handler: @escaping (Apipb_Game?, Error?) -> Void) -> GrpcProtoCall<Apipb_Game> {
        let writable = GRXWriteable { (value, error) in
            handler(value as? Apipb_Game, error)
        }
        return RPC(method: "Get",
                   requestsWriter: GRXWriter(value: request),
                   response: Apipb_Game.self,
                   responsesWriteable: writable!)
    }
	
    public func getRelease(_ request: Apipb_GetGameReleaseRequest,
                           handler: @escaping (Apipb_GameRelease?, Error?) -> Void) -> GrpcProtoCall<Apipb_GameRelease> {
        let writable = GRXWriteable { (value, error) in
            handler(value as? Apipb_GameRelease, error)
        }
        return RPC(method: "GetRelease",
                   requestsWriter: GRXWriter(value: request),
                   response: Apipb_GameRelease.self,
                   responsesWriteable: writable!)
    }
	
    public func publish(_ request: Apipb_GameManifest,
                           handler: @escaping (Apipb_PublishResponse?, Error?) -> Void) -> GrpcProtoCall<Apipb_PublishResponse> {
        let writable = GRXWriteable { (value, error) in
            handler(value as? Apipb_PublishResponse, error)
        }
        return RPC(method: "Publish",
                   requestsWriter: GRXWriter(value: request),
                   response: Apipb_PublishResponse.self,
                   responsesWriteable: writable!)
    }
	
    public func changeReleaseState(_ request: Apipb_ValidateRequest,
                           handler: @escaping (Apipb_Response?, Error?) -> Void) -> GrpcProtoCall<Apipb_Response> {
        let writable = GRXWriteable { (value, error) in
            handler(value as? Apipb_Response, error)
        }
        return RPC(method: "ChangeReleaseState",
                   requestsWriter: GRXWriter(value: request),
                   response: Apipb_Response.self,
                   responsesWriteable: writable!)
    }
	
    public func getLatestVersions(_ request: Apipb_GetLatestVersionsRequest,
                           handler: @escaping (Apipb_GameVersionsResponse?, Error?) -> Void) -> GrpcProtoCall<Apipb_GameVersionsResponse> {
        let writable = GRXWriteable { (value, error) in
            handler(value as? Apipb_GameVersionsResponse, error)
        }
        return RPC(method: "GetLatestVersions",
                   requestsWriter: GRXWriter(value: request),
                   response: Apipb_GameVersionsResponse.self,
                   responsesWriteable: writable!)
    }
	
    public func search(_ request: Apipb_SearchRequest,
                           handler: @escaping (Apipb_SearchResponse?, Error?) -> Void) -> GrpcProtoCall<Apipb_SearchResponse> {
        let writable = GRXWriteable { (value, error) in
            handler(value as? Apipb_SearchResponse, error)
        }
        return RPC(method: "Search",
                   requestsWriter: GRXWriter(value: request),
                   response: Apipb_SearchResponse.self,
                   responsesWriteable: writable!)
    }
	
    public func listGames(_ request: Apipb_ListGamesRequest,
                           handler: @escaping (Bool, Apipb_ListItem?, Error?) -> Void) -> GrpcProtoCall<Apipb_ListItem> {
        
        let writable = GRXWriteable { (done, value, error) in
            handler(done, value as? Apipb_ListItem, error)
        }

        return RPC(method: "ListGames",
                   requestsWriter: GRXWriter(value: request),
                   response: Apipb_ListItem.self,
                   responsesWriteable: writable!)
    }
	
    public func listGamesWithTests(_ request: Apipb_ListGamesRequest,
                           handler: @escaping (Bool, Apipb_ListItemWithTests?, Error?) -> Void) -> GrpcProtoCall<Apipb_ListItemWithTests> {
        
        let writable = GRXWriteable { (done, value, error) in
            handler(done, value as? Apipb_ListItemWithTests, error)
        }

        return RPC(method: "ListGamesWithTests",
                   requestsWriter: GRXWriter(value: request),
                   response: Apipb_ListItemWithTests.self,
                   responsesWriteable: writable!)
    }
	
    public func allReleases(_ request: Apipb_GetGameRequest,
                           handler: @escaping (Apipb_AllGameReleases?, Error?) -> Void) -> GrpcProtoCall<Apipb_AllGameReleases> {
        let writable = GRXWriteable { (value, error) in
            handler(value as? Apipb_AllGameReleases, error)
        }
        return RPC(method: "AllReleases",
                   requestsWriter: GRXWriter(value: request),
                   response: Apipb_AllGameReleases.self,
                   responsesWriteable: writable!)
    }
	
    public func category(_ request: Apipb_CategoryReq,
                           handler: @escaping (Apipb_GameCategory?, Error?) -> Void) -> GrpcProtoCall<Apipb_GameCategory> {
        let writable = GRXWriteable { (value, error) in
            handler(value as? Apipb_GameCategory, error)
        }
        return RPC(method: "Category",
                   requestsWriter: GRXWriter(value: request),
                   response: Apipb_GameCategory.self,
                   responsesWriteable: writable!)
    }
	
    public func listCategories(_ request: Apipb_CategoryListReq,
                           handler: @escaping (Apipb_CategoryList?, Error?) -> Void) -> GrpcProtoCall<Apipb_CategoryList> {
        let writable = GRXWriteable { (value, error) in
            handler(value as? Apipb_CategoryList, error)
        }
        return RPC(method: "ListCategories",
                   requestsWriter: GRXWriter(value: request),
                   response: Apipb_CategoryList.self,
                   responsesWriteable: writable!)
    }
	
    public func getAllGames(_ request: Apipb_GetAllGamesReq,
                           handler: @escaping (Apipb_GetAllGamesRes?, Error?) -> Void) -> GrpcProtoCall<Apipb_GetAllGamesRes> {
        let writable = GRXWriteable { (value, error) in
            handler(value as? Apipb_GetAllGamesRes, error)
        }
        return RPC(method: "GetAllGames",
                   requestsWriter: GRXWriter(value: request),
                   response: Apipb_GetAllGamesRes.self,
                   responsesWriteable: writable!)
    }
	
}