// Code generated by protoc-gen-grpc-swift
// DO NOT EDIT!
import SwiftProtobuf
import GRPCClient


public class CatalogService: GrpcProtoService {

    public convenience init(host: String) {
        self.init(host: host, packageName: "apipb", serviceName: "CatalogService")
    }

    public func pull(_ request: Apipb_CatalogPullRequest,
                           handler: @escaping (Apipb_Catalog?, Error?) -> Void) -> GrpcProtoCall<Apipb_Catalog> {
        let writable = GRXWriteable { (value, error) in
            handler(value as? Apipb_Catalog, error)
        }
        return RPC(method: "Pull",
                   requestsWriter: GRXWriter(value: request),
                   response: Apipb_Catalog.self,
                   responsesWriteable: writable!)
    }
	
    public func push(_ request: Apipb_Catalog,
                           handler: @escaping (Apipb_Response?, Error?) -> Void) -> GrpcProtoCall<Apipb_Response> {
        let writable = GRXWriteable { (value, error) in
            handler(value as? Apipb_Response, error)
        }
        return RPC(method: "Push",
                   requestsWriter: GRXWriter(value: request),
                   response: Apipb_Response.self,
                   responsesWriteable: writable!)
    }
	
    public func list(_ request: Apipb_CatalogListRequest,
                           handler: @escaping (Apipb_CatalogListResponse?, Error?) -> Void) -> GrpcProtoCall<Apipb_CatalogListResponse> {
        let writable = GRXWriteable { (value, error) in
            handler(value as? Apipb_CatalogListResponse, error)
        }
        return RPC(method: "List",
                   requestsWriter: GRXWriter(value: request),
                   response: Apipb_CatalogListResponse.self,
                   responsesWriteable: writable!)
    }
	
    public func approve(_ request: Apipb_CatalogApproveRequest,
                           handler: @escaping (Apipb_Response?, Error?) -> Void) -> GrpcProtoCall<Apipb_Response> {
        let writable = GRXWriteable { (value, error) in
            handler(value as? Apipb_Response, error)
        }
        return RPC(method: "Approve",
                   requestsWriter: GRXWriter(value: request),
                   response: Apipb_Response.self,
                   responsesWriteable: writable!)
    }
	
}