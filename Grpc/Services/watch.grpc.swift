// Code generated by protoc-gen-grpc-swift
// DO NOT EDIT!
import SwiftProtobuf
import GRPCClient


public class WatchService: GrpcProtoService {

    public convenience init(host: String) {
        self.init(host: host, packageName: "apipb", serviceName: "WatchService")
    }

    public func emit(_ request: Apipb_EmitRequest,
                           handler: @escaping (Apipb_EmitResponse?, Error?) -> Void) -> GrpcProtoCall<Apipb_EmitResponse> {
        let writable = GRXWriteable { (value, error) in
            handler(value as? Apipb_EmitResponse, error)
        }
        return RPC(method: "Emit",
                   requestsWriter: GRXWriter(value: request),
                   response: Apipb_EmitResponse.self,
                   responsesWriteable: writable!)
    }
	
    public func watch(_ request: Apipb_WatchRequest,
                           handler: @escaping (Bool, Apipb_WatchResponse?, Error?) -> Void) -> GrpcProtoCall<Apipb_WatchResponse> {
        
        let writable = GRXWriteable { (done, value, error) in
            handler(done, value as? Apipb_WatchResponse, error)
        }

        return RPC(method: "Watch",
                   requestsWriter: GRXWriter(value: request),
                   response: Apipb_WatchResponse.self,
                   responsesWriteable: writable!)
    }
	
}