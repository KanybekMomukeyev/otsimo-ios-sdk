// Code generated by protoc-gen-grpc-swift
// DO NOT EDIT!
import SwiftProtobuf
import GRPCClient


public class ListenerService: GrpcProtoService {

    public convenience init(host: String) {
        self.init(host: host, packageName: "apipb", serviceName: "ListenerService")
    }

    public func appEvent(_ request: Apipb_AppEventData,
                           handler: @escaping (Apipb_EventResponse?, Error?) -> Void) -> GrpcProtoCall<Apipb_EventResponse> {
        let writable = GRXWriteable { (value, error) in
            handler(value as? Apipb_EventResponse, error)
        }
        return RPC(method: "AppEvent",
                   requestsWriter: GRXWriter(value: request),
                   response: Apipb_EventResponse.self,
                   responsesWriteable: writable!)
    }
	
    public func customEvent(_ writer: GRXWriter,
                           handler: @escaping (Bool, Apipb_EventResponse?, Error?) -> Void) -> GrpcProtoCall<Apipb_EventResponse> {
        
        let writable = GRXWriteable { (done, value, error) in
            handler(done, value as? Apipb_EventResponse, error)
        }

        return RPC(method: "CustomEvent",
                   requestsWriter: writer,
                   response: Apipb_EventResponse.self,
                   responsesWriteable: writable!)
    }
	
    public func batchStream(_ writer: GRXWriter,
                           handler: @escaping (Bool, Apipb_EventResponse?, Error?) -> Void) -> GrpcProtoCall<Apipb_EventResponse> {
        
        let writable = GRXWriteable { (done, value, error) in
            handler(done, value as? Apipb_EventResponse, error)
        }

        return RPC(method: "BatchStream",
                   requestsWriter: writer,
                   response: Apipb_EventResponse.self,
                   responsesWriteable: writable!)
    }
	
}